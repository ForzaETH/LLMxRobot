[
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 12, 14, 16, 18, 20, 22, 24, 26]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.05, -0.1, -0.05, 0.2, 0.1, -0.05, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.2, 6.1, 6, 6.3, 6.1, 6.2, 6, 6.1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.1, 0.2, 0.15, 0.25, 0.2, 0.1, 0.05]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 9,
      "s_pos": [
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26
      ],
      "d_pos": [
        0.1,
        0.15,
        0.05,
        -0.1,
        -0.05,
        0.2,
        0.1,
        -0.05,
        0
      ],
      "s_speed": [
        6,
        6.2,
        6.1,
        6,
        6.3,
        6.1,
        6.2,
        6,
        6.1
      ],
      "d_speed": [
        0.2,
        0.3,
        0.1,
        0.2,
        0.15,
        0.25,
        0.2,
        0.1,
        0.05
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.05, 0.04, 0.03, 0.02, 0.01, 0.0, -0.01, -0.02, -0.01, 0.0, 0.01, 0.02, 0.03]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.2, 6.1, 5.9, 6.0, 6.3, 6.1, 5.8, 6.0, 6.2, 5.9, 6.1, 6.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.1, 0.15, 0.1, 0.05, 0.1, 0.15, 0.1, 0.05, 0.1, 0.2, 0.1]\n\n        \n        - The distance to the left wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n\n        - The distance to the right wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 13,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "d_pos": [
        0.05,
        0.04,
        0.03,
        0.02,
        0.01,
        0.0,
        -0.01,
        -0.02,
        -0.01,
        0.0,
        0.01,
        0.02,
        0.03
      ],
      "s_speed": [
        6,
        6.2,
        6.1,
        5.9,
        6.0,
        6.3,
        6.1,
        5.8,
        6.0,
        6.2,
        5.9,
        6.1,
        6.0
      ],
      "d_speed": [
        0.1,
        0.2,
        0.1,
        0.15,
        0.1,
        0.05,
        0.1,
        0.15,
        0.1,
        0.05,
        0.1,
        0.2,
        0.1
      ],
      "d_left": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "d_right": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 11, 12, 13, 14, 15, 16, 17]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.2, 0.1, 0.05, 0.0, 0.05, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [4.5, 5.0, 5.5, 5.0, 4.5, 5.0, 5.5, 5.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.3, 0.1, 0.0, 0.1, 0.2, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5]\n\n\n        - The distance to the right wall is: [1.0, 1.1, 0.9, 1.0, 1.1, 1.0, 0.9, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 8,
      "s_pos": [
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17
      ],
      "d_pos": [
        0.1,
        0.15,
        0.2,
        0.1,
        0.05,
        0.0,
        0.05,
        0.1
      ],
      "s_speed": [
        4.5,
        5.0,
        5.5,
        5.0,
        4.5,
        5.0,
        5.5,
        5.0
      ],
      "d_speed": [
        0.1,
        0.2,
        0.3,
        0.1,
        0.0,
        0.1,
        0.2,
        0.1
      ],
      "d_left": [
        1.5,
        1.4,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5
      ],
      "d_right": [
        1.0,
        1.1,
        0.9,
        1.0,
        1.1,
        1.0,
        0.9,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.1, 0.0, -0.1, -0.2, -0.1, 0.0, 0.1, 0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.1, 0.0, -0.1, -0.2, -0.1, 0.0, 0.1, 0.2, 0.1]\n\n        \n        - The distance to the left wall is: [1.0, 1.1, 1.0, 1.0, 0.9, 0.8, 0.9, 1.0, 1.1, 1.2, 1.1]\n\n\n        - The distance to the right wall is: [1.1, 1.0, 1.1, 1.1, 1.2, 1.3, 1.2, 1.1, 1.0, 0.9, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 11,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "d_pos": [
        0.1,
        0.2,
        0.1,
        0.0,
        -0.1,
        -0.2,
        -0.1,
        0.0,
        0.1,
        0.2,
        0.1
      ],
      "s_speed": [
        4,
        5,
        6,
        5,
        6,
        5,
        6,
        5,
        6,
        5,
        6
      ],
      "d_speed": [
        0.1,
        0.2,
        0.1,
        0.0,
        -0.1,
        -0.2,
        -0.1,
        0.0,
        0.1,
        0.2,
        0.1
      ],
      "d_left": [
        1.0,
        1.1,
        1.0,
        1.0,
        0.9,
        0.8,
        0.9,
        1.0,
        1.1,
        1.2,
        1.1
      ],
      "d_right": [
        1.1,
        1.0,
        1.1,
        1.1,
        1.2,
        1.3,
        1.2,
        1.1,
        1.0,
        0.9,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15, 20, 25, 30, 35, 40, 45]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.1, 0.2, -0.2, 0.1, -0.1, 0.2, -0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [4, 5, 5.5, 6, 6.5, 5.5, 5, 4.5, 5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, -0.1, 0.2, -0.2, 0.3, -0.3, 0.2, -0.2, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.7, 1.6, 1.8, 1.5, 1.7, 1.6, 1.8, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.3, 1.4, 1.2, 1.5, 1.3, 1.4, 1.2, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 9,
      "s_pos": [
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45
      ],
      "d_pos": [
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.1
      ],
      "s_speed": [
        4,
        5,
        5.5,
        6,
        6.5,
        5.5,
        5,
        4.5,
        5
      ],
      "d_speed": [
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.3,
        -0.3,
        0.2,
        -0.2,
        0.1
      ],
      "d_left": [
        1.5,
        1.7,
        1.6,
        1.8,
        1.5,
        1.7,
        1.6,
        1.8,
        1.5
      ],
      "d_right": [
        1.5,
        1.3,
        1.4,
        1.2,
        1.5,
        1.3,
        1.4,
        1.2,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.1, 0.0, -0.1, 0.1, 0.2, -0.2, 0.0, 0.1, -0.1, 0.0, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.5, 5.6, 5.7, 5.6, 5.5, 5.4, 5.5, 5.6, 5.7, 5.6, 5.5, 5.4]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.3, 0.2, 0.1, 0.0, 0.2, 0.3, 0.4, 0.1, 0.2, 0.0, 0.1, 0.3]\n\n        \n        - The distance to the left wall is: [1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2]\n\n\n        - The distance to the right wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 12,
      "s_pos": [
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55,
        60
      ],
      "d_pos": [
        0.2,
        0.1,
        0.0,
        -0.1,
        0.1,
        0.2,
        -0.2,
        0.0,
        0.1,
        -0.1,
        0.0,
        0.2
      ],
      "s_speed": [
        5.5,
        5.6,
        5.7,
        5.6,
        5.5,
        5.4,
        5.5,
        5.6,
        5.7,
        5.6,
        5.5,
        5.4
      ],
      "d_speed": [
        0.3,
        0.2,
        0.1,
        0.0,
        0.2,
        0.3,
        0.4,
        0.1,
        0.2,
        0.0,
        0.1,
        0.3
      ],
      "d_left": [
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2
      ],
      "d_right": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.4, 0.5, -0.6, 0.4, -0.5, 0.6, -0.4, 0.5, -0.6, 0.4, -0.5, 0.6, -0.4, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, 0.7, 0.8, 0.5, 0.6, 0.7, 0.8, 0.5, 0.6, 0.7, 0.8, 0.5, 0.6, 0.7]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.6, 1.4, 1.5, 1.6, 1.4, 1.5, 1.6, 1.4, 1.5, 1.6, 1.4, 1.5]\n\n\n        - The distance to the right wall is: [1.2, 1.3, 1.1, 1.3, 1.2, 1.1, 1.3, 1.2, 1.1, 1.3, 1.2, 1.1, 1.3, 1.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 14,
      "s_pos": [
        10,
        15,
        21,
        27,
        33,
        39,
        45,
        51,
        57,
        63,
        69,
        75,
        81,
        87
      ],
      "d_pos": [
        -0.4,
        0.5,
        -0.6,
        0.4,
        -0.5,
        0.6,
        -0.4,
        0.5,
        -0.6,
        0.4,
        -0.5,
        0.6,
        -0.4,
        0.5
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.6,
        0.7,
        0.8,
        0.5,
        0.6,
        0.7,
        0.8,
        0.5,
        0.6,
        0.7,
        0.8,
        0.5,
        0.6,
        0.7
      ],
      "d_left": [
        1.5,
        1.4,
        1.6,
        1.4,
        1.5,
        1.6,
        1.4,
        1.5,
        1.6,
        1.4,
        1.5,
        1.6,
        1.4,
        1.5
      ],
      "d_right": [
        1.2,
        1.3,
        1.1,
        1.3,
        1.2,
        1.1,
        1.3,
        1.2,
        1.1,
        1.3,
        1.2,
        1.1,
        1.3,
        1.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 12, 14, 16, 18, 20, 22]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.35, 0.36, 0.38, 0.37, 0.36, 0.35, 0.34]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.35, 0.34, 0.32, 0.33, 0.34, 0.35, 0.36]\n\n\n        - The distance to the right wall is: [2.65, 2.66, 2.68, 2.67, 2.66, 2.65, 2.64]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 7,
      "s_pos": [
        10,
        12,
        14,
        16,
        18,
        20,
        22
      ],
      "d_pos": [
        0.35,
        0.36,
        0.38,
        0.37,
        0.36,
        0.35,
        0.34
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.35,
        0.34,
        0.32,
        0.33,
        0.34,
        0.35,
        0.36
      ],
      "d_right": [
        2.65,
        2.66,
        2.68,
        2.67,
        2.66,
        2.65,
        2.64
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\n\n\n        - The distance to the right wall is: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 12,
      "s_pos": [
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50
      ],
      "d_pos": [
        0.4,
        0.4,
        0.4,
        0.4,
        0.4,
        0.4,
        0.4,
        0.4,
        0.4,
        0.4,
        0.4,
        0.4
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8
      ],
      "d_right": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 12,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 0 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.15]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.15]\n\n        \n        - The distance to the left wall is: [0.8, 0.7, 0.75]\n\n\n        - The distance to the right wall is: [0.9, 0.8, 0.85]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 0,
      "data_samples": 3,
      "s_pos": [
        10,
        15,
        20
      ],
      "d_pos": [
        0.1,
        0.2,
        0.15
      ],
      "s_speed": [
        6,
        6.5,
        7
      ],
      "d_speed": [
        0.1,
        0.2,
        0.15
      ],
      "d_left": [
        0.8,
        0.7,
        0.75
      ],
      "d_right": [
        0.9,
        0.8,
        0.85
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 15,
      "s_pos": [
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50
      ],
      "d_pos": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 49, 48, 47, 46, 45, 44, 43]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.25, 0.28, 0.3, 0.28, 0.25, 0.2, 0.15]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-3, -3, -3, -3, -3, -3, -3, -3]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.15, 0.18, 0.2, 0.18, 0.15, 0.1, 0.05]\n\n        \n        - The distance to the left wall is: [0.9, 0.85, 0.8, 0.75, 0.8, 0.85, 0.9, 0.95]\n\n\n        - The distance to the right wall is: [1.1, 1.15, 1.2, 1.25, 1.2, 1.15, 1.1, 1.05]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 8,
      "s_pos": [
        50,
        49,
        48,
        47,
        46,
        45,
        44,
        43
      ],
      "d_pos": [
        0.2,
        0.25,
        0.28,
        0.3,
        0.28,
        0.25,
        0.2,
        0.15
      ],
      "s_speed": [
        -3,
        -3,
        -3,
        -3,
        -3,
        -3,
        -3,
        -3
      ],
      "d_speed": [
        0.1,
        0.15,
        0.18,
        0.2,
        0.18,
        0.15,
        0.1,
        0.05
      ],
      "d_left": [
        0.9,
        0.85,
        0.8,
        0.75,
        0.8,
        0.85,
        0.9,
        0.95
      ],
      "d_right": [
        1.1,
        1.15,
        1.2,
        1.25,
        1.2,
        1.15,
        1.1,
        1.05
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 11,
      "s_pos": [
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 15,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 4 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 5, 5, 5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 4,
      "s_pos": [
        0,
        5,
        10,
        15
      ],
      "d_pos": [
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        5,
        5,
        5,
        5
      ],
      "d_speed": [
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 4 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.2, 0.2, 0.2]\n\n        \n        - The distance to the left wall is: [2, 2, 2, 2]\n\n\n        - The distance to the right wall is: [2, 2, 2, 2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 4,
      "s_pos": [
        10,
        15,
        20,
        25
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "d_left": [
        2,
        2,
        2,
        2
      ],
      "d_right": [
        2,
        2,
        2,
        2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, -0.1, 0.1, 0.0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7, 6.8, 6.9]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.3, 0.1, 0.0]\n\n        \n        - The distance to the left wall is: [2, 2.1, 2, 1.9, 2]\n\n\n        - The distance to the right wall is: [1.8, 1.9, 1.8, 1.7, 1.8]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 5,
      "s_pos": [
        10,
        15,
        20,
        25,
        30
      ],
      "d_pos": [
        0.1,
        0.2,
        -0.1,
        0.1,
        0.0
      ],
      "s_speed": [
        6,
        6.5,
        7,
        6.8,
        6.9
      ],
      "d_speed": [
        0.1,
        0.2,
        0.3,
        0.1,
        0.0
      ],
      "d_left": [
        2,
        2.1,
        2,
        1.9,
        2
      ],
      "d_right": [
        1.8,
        1.9,
        1.8,
        1.7,
        1.8
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 2, 4]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.2, 1.2, 1.2]\n\n\n        - The distance to the right wall is: [1.2, 1.2, 1.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 3,
      "s_pos": [
        0,
        2,
        4
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0
      ],
      "d_left": [
        1.2,
        1.2,
        1.2
      ],
      "d_right": [
        1.2,
        1.2,
        1.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n\n\n        - The distance to the right wall is: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 10,
      "s_pos": [
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "d_right": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.1, 0.2, -0.2, 0.15, -0.15, 0.25, -0.25, 0.3, -0.3, 0.2, -0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7, 6.8, 6.5, 6.2, 6.8, 7, 6.5, 6.2, 6.8, 7, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.4, 0.6, 0.5, 0.7, 0.5, 0.6, 0.5, 0.7, 0.5, 0.6, 0.5, 0.7, 0.6]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.6, 1.3, 1.5, 1.4, 1.6, 1.3, 1.5, 1.4, 1.6, 1.3, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.4, 1.7, 1.5, 1.6, 1.4, 1.7, 1.5, 1.6, 1.4, 1.7, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 13,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "d_pos": [
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.15,
        -0.15,
        0.25,
        -0.25,
        0.3,
        -0.3,
        0.2,
        -0.2,
        0.1
      ],
      "s_speed": [
        6,
        6.5,
        7,
        6.8,
        6.5,
        6.2,
        6.8,
        7,
        6.5,
        6.2,
        6.8,
        7,
        6.5
      ],
      "d_speed": [
        0.4,
        0.6,
        0.5,
        0.7,
        0.5,
        0.6,
        0.5,
        0.7,
        0.5,
        0.6,
        0.5,
        0.7,
        0.6
      ],
      "d_left": [
        1.5,
        1.4,
        1.6,
        1.3,
        1.5,
        1.4,
        1.6,
        1.3,
        1.5,
        1.4,
        1.6,
        1.3,
        1.5
      ],
      "d_right": [
        1.5,
        1.6,
        1.4,
        1.7,
        1.5,
        1.6,
        1.4,
        1.7,
        1.5,
        1.6,
        1.4,
        1.7,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n\n        - The distance to the right wall is: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 14,
      "s_pos": [
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "d_right": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.1, 0.05, 0.1, 0.15, 0.1, 0.05, 0.1, 0.15, 0.1, 0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6.2, 6.8, 6.5, 6.7, 6.3, 6.9, 6.6, 6.4, 6.7, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.15, 0.1, 0.2, 0.15, 0.1, 0.2, 0.15, 0.1, 0.2, 0.15]\n\n        \n        - The distance to the left wall is: [1, 1.1, 1.2, 1.1, 1.2, 1.1, 1, 1.1, 1.2, 1.1, 1.2, 1.1]\n\n\n        - The distance to the right wall is: [0.9, 0.8, 0.7, 0.8, 0.7, 0.8, 0.9, 0.8, 0.7, 0.8, 0.7, 0.8]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 12,
      "s_pos": [
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55,
        60
      ],
      "d_pos": [
        0.1,
        0.15,
        0.1,
        0.05,
        0.1,
        0.15,
        0.1,
        0.05,
        0.1,
        0.15,
        0.1,
        0.05
      ],
      "s_speed": [
        6,
        6.5,
        6.2,
        6.8,
        6.5,
        6.7,
        6.3,
        6.9,
        6.6,
        6.4,
        6.7,
        6.5
      ],
      "d_speed": [
        0.1,
        0.2,
        0.15,
        0.1,
        0.2,
        0.15,
        0.1,
        0.2,
        0.15,
        0.1,
        0.2,
        0.15
      ],
      "d_left": [
        1,
        1.1,
        1.2,
        1.1,
        1.2,
        1.1,
        1,
        1.1,
        1.2,
        1.1,
        1.2,
        1.1
      ],
      "d_right": [
        0.9,
        0.8,
        0.7,
        0.8,
        0.7,
        0.8,
        0.9,
        0.8,
        0.7,
        0.8,
        0.7,
        0.8
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.4, -0.4, 0.35, -0.35, 0.3, -0.3, 0.25, -0.25, 0.2, -0.2, 0.15, -0.15, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6.8, 7, 6.5, 6, 6.2, 7, 6.7, 7, 6.9, 6.8, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.6, 0.55, -0.55, 0.5, -0.5, 0.45, -0.45, 0.4, -0.4, 0.35, -0.35, 0.3]\n\n        \n        - The distance to the left wall is: [1, 0.9, 1.1, 0.8, 1.2, 0.7, 1.3, 0.6, 1.4, 0.5, 1.5, 0.4, 1.6]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.4, 1.7, 1.3, 1.8, 1.2, 1.9, 1.1, 2, 1, 2.1, 0.9]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 13,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "d_pos": [
        0.4,
        -0.4,
        0.35,
        -0.35,
        0.3,
        -0.3,
        0.25,
        -0.25,
        0.2,
        -0.2,
        0.15,
        -0.15,
        0.1
      ],
      "s_speed": [
        6,
        6.5,
        6.8,
        7,
        6.5,
        6,
        6.2,
        7,
        6.7,
        7,
        6.9,
        6.8,
        6.5
      ],
      "d_speed": [
        0.6,
        -0.6,
        0.55,
        -0.55,
        0.5,
        -0.5,
        0.45,
        -0.45,
        0.4,
        -0.4,
        0.35,
        -0.35,
        0.3
      ],
      "d_left": [
        1,
        0.9,
        1.1,
        0.8,
        1.2,
        0.7,
        1.3,
        0.6,
        1.4,
        0.5,
        1.5,
        0.4,
        1.6
      ],
      "d_right": [
        1.5,
        1.6,
        1.4,
        1.7,
        1.3,
        1.8,
        1.2,
        1.9,
        1.1,
        2,
        1,
        2.1,
        0.9
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [20, 25, 30, 35, 40, 45, 50, 55]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0.02, -0.01, 0.04, 0.08, 0.1, 0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6.2, 6.8, 7, 6.5, 6.3, 6.8]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.15, 0.1, 0.05, 0.1, 0.14, 0.2, 0.15]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.1, 1.4, 1.5, 1.3, 1.2, 1.4]\n\n\n        - The distance to the right wall is: [1.5, 1.4, 1.6, 1.3, 1.2, 1.4, 1.5, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 8,
      "s_pos": [
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55
      ],
      "d_pos": [
        0.1,
        0.05,
        0.02,
        -0.01,
        0.04,
        0.08,
        0.1,
        0.05
      ],
      "s_speed": [
        6,
        6.5,
        6.2,
        6.8,
        7,
        6.5,
        6.3,
        6.8
      ],
      "d_speed": [
        0.2,
        0.15,
        0.1,
        0.05,
        0.1,
        0.14,
        0.2,
        0.15
      ],
      "d_left": [
        1.2,
        1.3,
        1.1,
        1.4,
        1.5,
        1.3,
        1.2,
        1.4
      ],
      "d_right": [
        1.5,
        1.4,
        1.6,
        1.3,
        1.2,
        1.4,
        1.5,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35, 40]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.1, 0.2, -0.2, 0.1, -0.1, 0.0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [4, 5, 6, 5, 6, 5, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.3, 0.4, 0.2, 0.3, 0.2, 0.4, 0.3]\n\n        \n        - The distance to the left wall is: [0.8, 1.0, 0.9, 1.1, 1.0, 1.2, 1.1]\n\n\n        - The distance to the right wall is: [1.2, 1.0, 1.1, 0.9, 1.0, 0.8, 0.9]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 7,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35,
        40
      ],
      "d_pos": [
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.1,
        -0.1,
        0.0
      ],
      "s_speed": [
        4,
        5,
        6,
        5,
        6,
        5,
        6
      ],
      "d_speed": [
        0.3,
        0.4,
        0.2,
        0.3,
        0.2,
        0.4,
        0.3
      ],
      "d_left": [
        0.8,
        1.0,
        0.9,
        1.1,
        1.0,
        1.2,
        1.1
      ],
      "d_right": [
        1.2,
        1.0,
        1.1,
        0.9,
        1.0,
        0.8,
        0.9
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 11, 17, 23, 29, 35, 41]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.55, 1.5, 1.45, 1.4, 1.35, 1.3]\n\n\n        - The distance to the right wall is: [1.5, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 8,
      "s_pos": [
        0,
        5,
        11,
        17,
        23,
        29,
        35,
        41
      ],
      "d_pos": [
        0.1,
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1
      ],
      "s_speed": [
        5,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1
      ],
      "d_left": [
        1.5,
        1.6,
        1.55,
        1.5,
        1.45,
        1.4,
        1.35,
        1.3
      ],
      "d_right": [
        1.5,
        1.4,
        1.45,
        1.5,
        1.55,
        1.6,
        1.65,
        1.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.2, 0.3, -0.4, 0.2, -0.1, 0.4, -0.3, 0.2, -0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6, 5.5, 6, 6.5, 6, 5.5, 6, 6.5, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.7, 0.5, -0.6, 0.7, -0.5, 0.6, -0.7, 0.5, -0.6, 0.7]\n\n        \n        - The distance to the left wall is: [0.8, 0.7, 0.9, 0.6, 0.8, 0.7, 0.9, 0.6, 0.8, 0.7, 0.9]\n\n\n        - The distance to the right wall is: [0.7, 0.8, 0.6, 0.9, 0.7, 0.8, 0.6, 0.9, 0.7, 0.8, 0.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 11,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "d_pos": [
        0.1,
        -0.2,
        0.3,
        -0.4,
        0.2,
        -0.1,
        0.4,
        -0.3,
        0.2,
        -0.2,
        0.1
      ],
      "s_speed": [
        6,
        6.5,
        6,
        5.5,
        6,
        6.5,
        6,
        5.5,
        6,
        6.5,
        6
      ],
      "d_speed": [
        0.6,
        -0.7,
        0.5,
        -0.6,
        0.7,
        -0.5,
        0.6,
        -0.7,
        0.5,
        -0.6,
        0.7
      ],
      "d_left": [
        0.8,
        0.7,
        0.9,
        0.6,
        0.8,
        0.7,
        0.9,
        0.6,
        0.8,
        0.7,
        0.9
      ],
      "d_right": [
        0.7,
        0.8,
        0.6,
        0.9,
        0.7,
        0.8,
        0.6,
        0.9,
        0.7,
        0.8,
        0.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30, 35, 40]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The distance to the left wall is: [2, 2, 2, 2, 2, 2, 2, 2, 2]\n\n\n        - The distance to the right wall is: [2, 2, 2, 2, 2, 2, 2, 2, 2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 9,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "d_left": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "d_right": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 4 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.1, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6.8, 7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.1, 0.2, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.3, 1.7, 1.6]\n\n\n        - The distance to the right wall is: [1.2, 1.4, 1.1, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 4,
      "s_pos": [
        10,
        15,
        20,
        25
      ],
      "d_pos": [
        0.1,
        0.2,
        0.1,
        0.2
      ],
      "s_speed": [
        6,
        6.5,
        6.8,
        7
      ],
      "d_speed": [
        0.2,
        0.1,
        0.2,
        0.1
      ],
      "d_left": [
        1.5,
        1.3,
        1.7,
        1.6
      ],
      "d_right": [
        1.2,
        1.4,
        1.1,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.5, 5.6, 5.7, 5.5, 5.8, 5.9, 6.0, 5.8, 6.1, 6.2, 5.9, 6.0, 6.1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n        \n        - The distance to the left wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n\n        - The distance to the right wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 13,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "d_pos": [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "s_speed": [
        5.5,
        5.6,
        5.7,
        5.5,
        5.8,
        5.9,
        6.0,
        5.8,
        6.1,
        6.2,
        5.9,
        6.0,
        6.1
      ],
      "d_speed": [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "d_left": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "d_right": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [15, 15, 15, 15, 15, 15, 15]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 7,
      "s_pos": [
        15,
        15,
        15,
        15,
        15,
        15,
        15
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 3,
      "s_pos": [
        5,
        10,
        15
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 49, 48, 47, 46]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.25, 0.3, 0.35, 0.4]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-2, -2, -2, -2, -2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1, 1.2, 1.3, 1.4, 1.5]\n\n\n        - The distance to the right wall is: [0.8, 0.6, 0.5, 0.4, 0.3]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 5,
      "s_pos": [
        50,
        49,
        48,
        47,
        46
      ],
      "d_pos": [
        0.2,
        0.25,
        0.3,
        0.35,
        0.4
      ],
      "s_speed": [
        -2,
        -2,
        -2,
        -2,
        -2
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1,
        1.2,
        1.3,
        1.4,
        1.5
      ],
      "d_right": [
        0.8,
        0.6,
        0.5,
        0.4,
        0.3
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35, 40, 45, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n\n        - The distance to the right wall is: [3.8, 3.8, 3.8, 3.8, 3.8, 3.8, 3.8, 3.8, 3.8]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 9,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50
      ],
      "d_pos": [
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "d_right": [
        3.8,
        3.8,
        3.8,
        3.8,
        3.8,
        3.8,
        3.8,
        3.8,
        3.8
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [1, 2, 3, 4, 5, 6]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.1, 0.0, -0.1, -0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 6,
      "s_pos": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "d_pos": [
        0.1,
        0.2,
        0.1,
        0.0,
        -0.1,
        -0.2
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.35, -0.36, -0.34, -0.33, -0.35, -0.36, -0.37, -0.35, -0.36, -0.34, -0.33, -0.35]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 5.5, 6, 5.8, 6.2, 5.9, 6.1, 5.7, 6, 6.3, 6, 5.8]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.1, 0.2, 0.3, 0.4, 0.2, 0.3, 0.2, 0.1, 0.2, 0.3]\n\n        \n        - The distance to the left wall is: [0.35, 0.34, 0.36, 0.37, 0.35, 0.34, 0.33, 0.35, 0.34, 0.36, 0.37, 0.35]\n\n\n        - The distance to the right wall is: [2.65, 2.66, 2.64, 2.63, 2.65, 2.66, 2.67, 2.65, 2.66, 2.64, 2.63, 2.65]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 12,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11
      ],
      "d_pos": [
        -0.35,
        -0.36,
        -0.34,
        -0.33,
        -0.35,
        -0.36,
        -0.37,
        -0.35,
        -0.36,
        -0.34,
        -0.33,
        -0.35
      ],
      "s_speed": [
        5,
        5.5,
        6,
        5.8,
        6.2,
        5.9,
        6.1,
        5.7,
        6,
        6.3,
        6,
        5.8
      ],
      "d_speed": [
        0.2,
        0.3,
        0.1,
        0.2,
        0.3,
        0.4,
        0.2,
        0.3,
        0.2,
        0.1,
        0.2,
        0.3
      ],
      "d_left": [
        0.35,
        0.34,
        0.36,
        0.37,
        0.35,
        0.34,
        0.33,
        0.35,
        0.34,
        0.36,
        0.37,
        0.35
      ],
      "d_right": [
        2.65,
        2.66,
        2.64,
        2.63,
        2.65,
        2.66,
        2.67,
        2.65,
        2.66,
        2.64,
        2.63,
        2.65
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 6, 7, 8, 9, 10, 11, 12, 13]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.1, 0.0, -0.1, 0.0, 0.1, 0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [4, 5, 5, 6, 6, 5, 5, 6, 5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.1, 0.0, -0.1, 0.0, 0.1, 0.2, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.5, 1.4, 1.5, 1.4, 1.5, 1.6, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.4, 1.5, 1.6, 1.5, 1.6, 1.5, 1.4, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 9,
      "s_pos": [
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13
      ],
      "d_pos": [
        0.1,
        0.2,
        0.1,
        0.0,
        -0.1,
        0.0,
        0.1,
        0.2,
        0.1
      ],
      "s_speed": [
        4,
        5,
        5,
        6,
        6,
        5,
        5,
        6,
        5
      ],
      "d_speed": [
        0.1,
        0.2,
        0.1,
        0.0,
        -0.1,
        0.0,
        0.1,
        0.2,
        0.1
      ],
      "d_left": [
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5
      ],
      "d_right": [
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 13 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.0, -0.1, 0.0, 0.1, 0.0, -0.1, 0.0, 0.1, 0.0, -0.1, 0.0, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, -0.1, 0.1, -0.1, 0.1, -0.1, 0.1, -0.1, 0.1, -0.1, 0.1, -0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.8, 0.9, 0.8, 0.9, 0.8, 0.9, 0.8, 0.9, 0.8, 0.9, 0.8, 0.9, 0.8]\n\n\n        - The distance to the right wall is: [1.2, 1.1, 1.2, 1.1, 1.2, 1.1, 1.2, 1.1, 1.2, 1.1, 1.2, 1.1, 1.2]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 13,
      "data_samples": 13,
      "s_pos": [
        10,
        9,
        8,
        7,
        6,
        5,
        4,
        3,
        2,
        1,
        0,
        -1,
        -2
      ],
      "d_pos": [
        0.1,
        0.0,
        -0.1,
        0.0,
        0.1,
        0.0,
        -0.1,
        0.0,
        0.1,
        0.0,
        -0.1,
        0.0,
        0.1
      ],
      "s_speed": [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      ],
      "d_speed": [
        0.1,
        -0.1,
        0.1,
        -0.1,
        0.1,
        -0.1,
        0.1,
        -0.1,
        0.1,
        -0.1,
        0.1,
        -0.1,
        0.1
      ],
      "d_left": [
        0.8,
        0.9,
        0.8,
        0.9,
        0.8,
        0.9,
        0.8,
        0.9,
        0.8,
        0.9,
        0.8,
        0.9,
        0.8
      ],
      "d_right": [
        1.2,
        1.1,
        1.2,
        1.1,
        1.2,
        1.1,
        1.2,
        1.1,
        1.2,
        1.1,
        1.2,
        1.1,
        1.2
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 4 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.35, 0.35, 0.36, 0.36]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.35, 0.35, 0.36, 0.36]\n\n\n        - The distance to the right wall is: [3.65, 3.65, 3.64, 3.64]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 4,
      "s_pos": [
        10,
        15,
        20,
        25
      ],
      "d_pos": [
        0.35,
        0.35,
        0.36,
        0.36
      ],
      "s_speed": [
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.35,
        0.35,
        0.36,
        0.36
      ],
      "d_right": [
        3.65,
        3.65,
        3.64,
        3.64
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0.1, 0.0, -0.05, -0.1, 0.05, 0.0, 0.1, -0.05, 0.0, 0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6, 5.5, 6, 6.5, 6, 5.5, 6, 6.5, 6, 5.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.1, 0.15, 0.1, 0.2, 0.1, 0.15, 0.1, 0.2, 0.1, 0.15]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4]\n\n\n        - The distance to the right wall is: [1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 12,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55
      ],
      "d_pos": [
        0.1,
        0.05,
        0.1,
        0.0,
        -0.05,
        -0.1,
        0.05,
        0.0,
        0.1,
        -0.05,
        0.0,
        0.05
      ],
      "s_speed": [
        6,
        6.5,
        6,
        5.5,
        6,
        6.5,
        6,
        5.5,
        6,
        6.5,
        6,
        5.5
      ],
      "d_speed": [
        0.1,
        0.2,
        0.1,
        0.15,
        0.1,
        0.2,
        0.1,
        0.15,
        0.1,
        0.2,
        0.1,
        0.15
      ],
      "d_left": [
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4
      ],
      "d_right": [
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [100, 100, 100, 100, 100, 100]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 6,
      "s_pos": [
        100,
        100,
        100,
        100,
        100,
        100
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 12,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [1, 2, 3, 4, 5, 6]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.1, 0.0, -0.1, -0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 6,
      "s_pos": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "d_pos": [
        0.1,
        0.2,
        0.1,
        0.0,
        -0.1,
        -0.2
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.25, 0.26, 0.27, 0.28, 0.29, 0.28, 0.27, 0.26, 0.25, 0.24]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35]\n\n\n        - The distance to the right wall is: [2.15, 2.15, 2.15, 2.15, 2.15, 2.15, 2.15, 2.15, 2.15, 2.15]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 10,
      "s_pos": [
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19
      ],
      "d_pos": [
        0.25,
        0.26,
        0.27,
        0.28,
        0.29,
        0.28,
        0.27,
        0.26,
        0.25,
        0.24
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.35,
        0.35,
        0.35,
        0.35,
        0.35,
        0.35,
        0.35,
        0.35,
        0.35,
        0.35
      ],
      "d_right": [
        2.15,
        2.15,
        2.15,
        2.15,
        2.15,
        2.15,
        2.15,
        2.15,
        2.15,
        2.15
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.5, 5.6, 5.7, 5.5, 5.8, 5.9, 6.0, 5.8, 6.1, 6.2, 5.9, 6.0, 6.1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n        \n        - The distance to the left wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n\n        - The distance to the right wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 13,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "d_pos": [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "s_speed": [
        5.5,
        5.6,
        5.7,
        5.5,
        5.8,
        5.9,
        6.0,
        5.8,
        6.1,
        6.2,
        5.9,
        6.0,
        6.1
      ],
      "d_speed": [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "d_left": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "d_right": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.2, 0.2, 0.1, 0.0, -0.1, -0.1, -0.2, -0.1, 0.0, 0.1, 0.2, 0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.05, 0.05, 0.1, 0.1, 0.05, 0.0, -0.05, -0.05, -0.1, -0.05, 0.0, 0.05, 0.1, 0.1, 0.05]\n\n        \n        - The distance to the left wall is: [1.2, 1.2, 1.1, 1.1, 1.2, 1.3, 1.4, 1.4, 1.3, 1.4, 1.5, 1.4, 1.3, 1.3, 1.2]\n\n\n        - The distance to the right wall is: [1.2, 1.2, 1.3, 1.3, 1.2, 1.1, 1.0, 1.0, 1.1, 1.0, 0.9, 1.0, 1.1, 1.1, 1.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 15,
      "s_pos": [
        0,
        0.5,
        1.0,
        1.5,
        2.0,
        2.5,
        3.0,
        3.5,
        4.0,
        4.5,
        5.0,
        5.5,
        6.0,
        6.5,
        7.0
      ],
      "d_pos": [
        0.1,
        0.1,
        0.2,
        0.2,
        0.1,
        0.0,
        -0.1,
        -0.1,
        -0.2,
        -0.1,
        0.0,
        0.1,
        0.2,
        0.2,
        0.1
      ],
      "s_speed": [
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5
      ],
      "d_speed": [
        0.05,
        0.05,
        0.1,
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.05,
        -0.1,
        -0.05,
        0.0,
        0.05,
        0.1,
        0.1,
        0.05
      ],
      "d_left": [
        1.2,
        1.2,
        1.1,
        1.1,
        1.2,
        1.3,
        1.4,
        1.4,
        1.3,
        1.4,
        1.5,
        1.4,
        1.3,
        1.3,
        1.2
      ],
      "d_right": [
        1.2,
        1.2,
        1.3,
        1.3,
        1.2,
        1.1,
        1.0,
        1.0,
        1.1,
        1.0,
        0.9,
        1.0,
        1.1,
        1.1,
        1.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 14,
      "s_pos": [
        0,
        0.5,
        1,
        1.5,
        2,
        2.5,
        3,
        3.5,
        4,
        4.5,
        5,
        5.5,
        6,
        6.5
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.0, -0.1, 0.0, 0.1, 0.0, -0.1, 0.0, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.2, 6.1, 6.3, 6.4, 6.2, 6.1, 6.3, 6.4]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.1, 0.2, 0.1, 0.2, 0.1, 0.2, 0.1, 0.2]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.5, 1.4, 1.5, 1.4, 1.5, 1.4, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.5, 1.6, 1.5, 1.6, 1.5, 1.6, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 9,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "d_pos": [
        0.1,
        0.0,
        -0.1,
        0.0,
        0.1,
        0.0,
        -0.1,
        0.0,
        0.1
      ],
      "s_speed": [
        6,
        6.2,
        6.1,
        6.3,
        6.4,
        6.2,
        6.1,
        6.3,
        6.4
      ],
      "d_speed": [
        0.2,
        0.1,
        0.2,
        0.1,
        0.2,
        0.1,
        0.2,
        0.1,
        0.2
      ],
      "d_left": [
        1.5,
        1.4,
        1.5,
        1.4,
        1.5,
        1.4,
        1.5,
        1.4,
        1.5
      ],
      "d_right": [
        1.5,
        1.6,
        1.5,
        1.6,
        1.5,
        1.6,
        1.5,
        1.6,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30, 35, 40]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.1, 0.2, -0.2, 0.1, -0.1, 0.2, -0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 5.5, 6, 5.8, 6.2, 5.7, 5.9, 6.1, 5.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.1, 0.2, 0.3, 0.1, 0.2, 0.3, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.6, 1.5, 1.4, 1.6, 1.5, 1.4, 1.6]\n\n\n        - The distance to the right wall is: [1.4, 1.5, 1.3, 1.4, 1.5, 1.3, 1.4, 1.5, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 9,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40
      ],
      "d_pos": [
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.1
      ],
      "s_speed": [
        5,
        5.5,
        6,
        5.8,
        6.2,
        5.7,
        5.9,
        6.1,
        5.5
      ],
      "d_speed": [
        0.2,
        0.3,
        0.1,
        0.2,
        0.3,
        0.1,
        0.2,
        0.3,
        0.1
      ],
      "d_left": [
        1.5,
        1.4,
        1.6,
        1.5,
        1.4,
        1.6,
        1.5,
        1.4,
        1.6
      ],
      "d_right": [
        1.4,
        1.5,
        1.3,
        1.4,
        1.5,
        1.3,
        1.4,
        1.5,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.5]\n\n\n        - The distance to the right wall is: [1.4, 1.5, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 3,
      "s_pos": [
        10,
        15,
        20
      ],
      "d_pos": [
        0.1,
        0.2,
        0.1
      ],
      "s_speed": [
        6,
        6.5,
        7
      ],
      "d_speed": [
        0.1,
        0.2,
        0.1
      ],
      "d_left": [
        1.5,
        1.6,
        1.5
      ],
      "d_right": [
        1.4,
        1.5,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.2, 0.2, 0.2, 0.1, 0.1, 0.1, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.4, 1.4, 1.5, 1.5, 1.5, 1.5, 1.4, 1.4]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.6, 1.6, 1.5, 1.5, 1.5, 1.5, 1.6, 1.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 11,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.2,
        0.2,
        0.2,
        0.1,
        0.1,
        0.1,
        0.2,
        0.2
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.2,
        0.2,
        0.1,
        0.1,
        0.1,
        0.2,
        0.2,
        0.1,
        0.1
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.4,
        1.4,
        1.5,
        1.5,
        1.5,
        1.5,
        1.4,
        1.4
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.6,
        1.6,
        1.5,
        1.5,
        1.5,
        1.5,
        1.6,
        1.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 12, 19]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.5, 6.8, 7.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.25, 0.3]\n\n        \n        - The distance to the left wall is: [0.35, 0.3, 0.25]\n\n\n        - The distance to the right wall is: [2.0, 2.1, 2.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 3,
      "s_pos": [
        5,
        12,
        19
      ],
      "d_pos": [
        0.1,
        0.15,
        0.2
      ],
      "s_speed": [
        6.5,
        6.8,
        7.0
      ],
      "d_speed": [
        0.2,
        0.25,
        0.3
      ],
      "d_left": [
        0.35,
        0.3,
        0.25
      ],
      "d_right": [
        2.0,
        2.1,
        2.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.1, 0, -0.1, 0, 0.2, -0.1, 0.1, 0, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [4, 5, 6, 5, 6, 7, 5, 6, 7, 5, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0.1, 0.2, 0.1, 0.3, 0.2, 0.1, 0.3, 0.2, 0.1, 0.2]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.6, 1.5, 1.7, 1.6, 1.5, 1.4, 1.6, 1.5, 1.6]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.4, 1.5, 1.3, 1.4, 1.5, 1.6, 1.4, 1.5, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 11,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50
      ],
      "d_pos": [
        0.1,
        0.2,
        0.1,
        0,
        -0.1,
        0,
        0.2,
        -0.1,
        0.1,
        0,
        0.1
      ],
      "s_speed": [
        4,
        5,
        6,
        5,
        6,
        7,
        5,
        6,
        7,
        5,
        6
      ],
      "d_speed": [
        0,
        0.1,
        0.2,
        0.1,
        0.3,
        0.2,
        0.1,
        0.3,
        0.2,
        0.1,
        0.2
      ],
      "d_left": [
        1.5,
        1.4,
        1.6,
        1.5,
        1.7,
        1.6,
        1.5,
        1.4,
        1.6,
        1.5,
        1.6
      ],
      "d_right": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.3,
        1.4,
        1.5,
        1.6,
        1.4,
        1.5,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 6, 6, 5, 5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 5,
      "s_pos": [
        10,
        15,
        20,
        25,
        30
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        5,
        6,
        6,
        5,
        5
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 12, 14, 16, 18, 20]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, -0.5, 0.6, -0.6, 0.5, -0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, 0.6, 0.7, 0.7, 0.6, 0.6]\n\n        \n        - The distance to the left wall is: [0.8, 0.9, 0.7, 0.9, 0.8, 0.9]\n\n\n        - The distance to the right wall is: [0.8, 0.9, 0.7, 0.9, 0.8, 0.9]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 6,
      "s_pos": [
        10,
        12,
        14,
        16,
        18,
        20
      ],
      "d_pos": [
        0.5,
        -0.5,
        0.6,
        -0.6,
        0.5,
        -0.5
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.6,
        0.6,
        0.7,
        0.7,
        0.6,
        0.6
      ],
      "d_left": [
        0.8,
        0.9,
        0.7,
        0.9,
        0.8,
        0.9
      ],
      "d_right": [
        0.8,
        0.9,
        0.7,
        0.9,
        0.8,
        0.9
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.4, -0.4, 0.5, -0.5, 0.6, -0.6, 0.7, -0.7, 0.8]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.6, 0.7, -0.7, 0.8, -0.8, 0.9, -0.9, 1.0]\n\n        \n        - The distance to the left wall is: [1.2, 0.8, 1.3, 0.7, 1.4, 0.6, 1.5, 0.5, 1.6]\n\n\n        - The distance to the right wall is: [0.8, 1.2, 0.7, 1.3, 0.6, 1.4, 0.5, 1.5, 0.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 9,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "d_pos": [
        0.4,
        -0.4,
        0.5,
        -0.5,
        0.6,
        -0.6,
        0.7,
        -0.7,
        0.8
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.6,
        -0.6,
        0.7,
        -0.7,
        0.8,
        -0.8,
        0.9,
        -0.9,
        1.0
      ],
      "d_left": [
        1.2,
        0.8,
        1.3,
        0.7,
        1.4,
        0.6,
        1.5,
        0.5,
        1.6
      ],
      "d_right": [
        0.8,
        1.2,
        0.7,
        1.3,
        0.6,
        1.4,
        0.5,
        1.5,
        0.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n\n\n        - The distance to the right wall is: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 10,
      "s_pos": [
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "d_right": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3.1, 4.6, 6.2]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, -0.4, 0.3, -0.5, 0.4]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.5, 6.0, 5.8, 6.2, 5.9]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.7, 0.8, 0.9, 0.7, 0.8]\n\n        \n        - The distance to the left wall is: [1.2, 1.1, 1.3, 1.0, 1.1]\n\n\n        - The distance to the right wall is: [1.3, 1.4, 1.2, 1.5, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 5,
      "s_pos": [
        0,
        1.5,
        3.1,
        4.6,
        6.2
      ],
      "d_pos": [
        0.2,
        -0.4,
        0.3,
        -0.5,
        0.4
      ],
      "s_speed": [
        5.5,
        6.0,
        5.8,
        6.2,
        5.9
      ],
      "d_speed": [
        0.7,
        0.8,
        0.9,
        0.7,
        0.8
      ],
      "d_left": [
        1.2,
        1.1,
        1.3,
        1.0,
        1.1
      ],
      "d_right": [
        1.3,
        1.4,
        1.2,
        1.5,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.1, 0.05, 0.1, 0.15, 0.1, 0.05, 0.1, 0.15, 0.1, 0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6.2, 6.8, 6.5, 6.7, 6.3, 6.9, 6.6, 6.4, 6.7, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.15, 0.1, 0.2, 0.15, 0.1, 0.2, 0.15, 0.1, 0.2, 0.15]\n\n        \n        - The distance to the left wall is: [1, 1.1, 1.2, 1.1, 1.2, 1.1, 1, 1.1, 1.2, 1.1, 1.2, 1.1]\n\n\n        - The distance to the right wall is: [0.9, 0.8, 0.7, 0.8, 0.7, 0.8, 0.9, 0.8, 0.7, 0.8, 0.7, 0.8]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 12,
      "s_pos": [
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55,
        60
      ],
      "d_pos": [
        0.1,
        0.15,
        0.1,
        0.05,
        0.1,
        0.15,
        0.1,
        0.05,
        0.1,
        0.15,
        0.1,
        0.05
      ],
      "s_speed": [
        6,
        6.5,
        6.2,
        6.8,
        6.5,
        6.7,
        6.3,
        6.9,
        6.6,
        6.4,
        6.7,
        6.5
      ],
      "d_speed": [
        0.1,
        0.2,
        0.15,
        0.1,
        0.2,
        0.15,
        0.1,
        0.2,
        0.15,
        0.1,
        0.2,
        0.15
      ],
      "d_left": [
        1,
        1.1,
        1.2,
        1.1,
        1.2,
        1.1,
        1,
        1.1,
        1.2,
        1.1,
        1.2,
        1.1
      ],
      "d_right": [
        0.9,
        0.8,
        0.7,
        0.8,
        0.7,
        0.8,
        0.9,
        0.8,
        0.7,
        0.8,
        0.7,
        0.8
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 11,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3, 4.5, 6, 7.5, 9, 10.5, 12, 13.5, 15, 16.5, 18]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.3, -0.29, -0.28, -0.3, -0.29, -0.28, -0.3, -0.29, -0.28, -0.3, -0.29, -0.28, -0.3]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The distance to the left wall is: [0.3, 0.31, 0.32, 0.3, 0.31, 0.32, 0.3, 0.31, 0.32, 0.3, 0.31, 0.32, 0.3]\n\n\n        - The distance to the right wall is: [2.7, 2.69, 2.68, 2.7, 2.69, 2.68, 2.7, 2.69, 2.68, 2.7, 2.69, 2.68, 2.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 13,
      "s_pos": [
        0,
        1.5,
        3,
        4.5,
        6,
        7.5,
        9,
        10.5,
        12,
        13.5,
        15,
        16.5,
        18
      ],
      "d_pos": [
        -0.3,
        -0.29,
        -0.28,
        -0.3,
        -0.29,
        -0.28,
        -0.3,
        -0.29,
        -0.28,
        -0.3,
        -0.29,
        -0.28,
        -0.3
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "d_left": [
        0.3,
        0.31,
        0.32,
        0.3,
        0.31,
        0.32,
        0.3,
        0.31,
        0.32,
        0.3,
        0.31,
        0.32,
        0.3
      ],
      "d_right": [
        2.7,
        2.69,
        2.68,
        2.7,
        2.69,
        2.68,
        2.7,
        2.69,
        2.68,
        2.7,
        2.69,
        2.68,
        2.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0, -0.1, 0.05, -0.05, 0.1, 0.05, -0.1, 0.05, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.5, 6.7, 6.6, 6.8, 6.7, 6.6, 6.5, 6.7, 6.8, 6.6, 6.7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.1, 0.25, 0.15, 0.2, 0.1, 0.25, 0.3, 0.2, 0.15]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.5, 1.3, 1.6, 1.5, 1.4, 1.3, 1.5, 1.4, 1.6]\n\n\n        - The distance to the right wall is: [1.2, 1.3, 1.2, 1.4, 1.1, 1.2, 1.3, 1.4, 1.2, 1.3, 1.1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 11,
      "s_pos": [
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20
      ],
      "d_pos": [
        0.1,
        0.15,
        0,
        -0.1,
        0.05,
        -0.05,
        0.1,
        0.05,
        -0.1,
        0.05,
        0
      ],
      "s_speed": [
        6.5,
        6.7,
        6.6,
        6.8,
        6.7,
        6.6,
        6.5,
        6.7,
        6.8,
        6.6,
        6.7
      ],
      "d_speed": [
        0.2,
        0.3,
        0.1,
        0.25,
        0.15,
        0.2,
        0.1,
        0.25,
        0.3,
        0.2,
        0.15
      ],
      "d_left": [
        1.5,
        1.4,
        1.5,
        1.3,
        1.6,
        1.5,
        1.4,
        1.3,
        1.5,
        1.4,
        1.6
      ],
      "d_right": [
        1.2,
        1.3,
        1.2,
        1.4,
        1.1,
        1.2,
        1.3,
        1.4,
        1.2,
        1.3,
        1.1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.3, -0.28, -0.27, -0.25, -0.24, -0.23, -0.22, -0.21, -0.2, -0.18, -0.17, -0.15, -0.14, -0.12]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.1, 6.2, 6.3, 6.1, 6, 6.2, 6.3, 6.1, 6, 6.2, 6.3, 6.1, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.05, 0.05, 0.1, 0.1, 0.05, 0.05, 0.1, 0.1, 0.05, 0.05, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.35, 0.36, 0.37, 0.38, 0.35, 0.36, 0.37, 0.38, 0.35, 0.36, 0.37, 0.38, 0.35, 0.36]\n\n\n        - The distance to the right wall is: [2.5, 2.6, 2.7, 2.8, 2.5, 2.6, 2.7, 2.8, 2.5, 2.6, 2.7, 2.8, 2.5, 2.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 14,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13
      ],
      "d_pos": [
        -0.3,
        -0.28,
        -0.27,
        -0.25,
        -0.24,
        -0.23,
        -0.22,
        -0.21,
        -0.2,
        -0.18,
        -0.17,
        -0.15,
        -0.14,
        -0.12
      ],
      "s_speed": [
        6,
        6.1,
        6.2,
        6.3,
        6.1,
        6,
        6.2,
        6.3,
        6.1,
        6,
        6.2,
        6.3,
        6.1,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.05,
        0.05,
        0.1,
        0.1,
        0.05,
        0.05,
        0.1,
        0.1,
        0.05,
        0.05,
        0.1,
        0.1
      ],
      "d_left": [
        0.35,
        0.36,
        0.37,
        0.38,
        0.35,
        0.36,
        0.37,
        0.38,
        0.35,
        0.36,
        0.37,
        0.38,
        0.35,
        0.36
      ],
      "d_right": [
        2.5,
        2.6,
        2.7,
        2.8,
        2.5,
        2.6,
        2.7,
        2.8,
        2.5,
        2.6,
        2.7,
        2.8,
        2.5,
        2.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.2, 0.15, 0.2, 0.1, 0.15, 0.2, 0.1, 0.15, 0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 5.5, 5.2, 5.7, 6, 5.8, 6.2, 5.5, 5.9, 6.1, 5.3, 5.6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.25, 0.3, 0.2, 0.25, 0.3, 0.2, 0.25, 0.3, 0.2, 0.25, 0.3]\n\n        \n        - The distance to the left wall is: [1, 1.2, 1.1, 1.3, 1.2, 1.4, 1.3, 1.5, 1.4, 1.3, 1.5, 1.4]\n\n\n        - The distance to the right wall is: [1.5, 1.3, 1.4, 1.2, 1.3, 1.1, 1.2, 1, 1.1, 1.2, 1, 1.1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 12,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55
      ],
      "d_pos": [
        0.1,
        0.1,
        0.2,
        0.15,
        0.2,
        0.1,
        0.15,
        0.2,
        0.1,
        0.15,
        0.2,
        0.1
      ],
      "s_speed": [
        5,
        5.5,
        5.2,
        5.7,
        6,
        5.8,
        6.2,
        5.5,
        5.9,
        6.1,
        5.3,
        5.6
      ],
      "d_speed": [
        0.2,
        0.25,
        0.3,
        0.2,
        0.25,
        0.3,
        0.2,
        0.25,
        0.3,
        0.2,
        0.25,
        0.3
      ],
      "d_left": [
        1,
        1.2,
        1.1,
        1.3,
        1.2,
        1.4,
        1.3,
        1.5,
        1.4,
        1.3,
        1.5,
        1.4
      ],
      "d_right": [
        1.5,
        1.3,
        1.4,
        1.2,
        1.3,
        1.1,
        1.2,
        1,
        1.1,
        1.2,
        1,
        1.1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3.2, 4.8, 6.5, 8.1, 9.7, 11.4, 12.9]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0.0, -0.05, 0.0, 0.05, 0.1, 0.05, 0.0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.5, 6.7, 6.8, 6.6, 6.7, 6.9, 6.8, 6.7, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.1, 0.0, -0.1, -0.2, -0.1, 0.0, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.5, 1.5, 1.6, 1.5, 1.6, 1.5, 1.6]\n\n\n        - The distance to the right wall is: [1.4, 1.3, 1.4, 1.5, 1.3, 1.4, 1.3, 1.4, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 9,
      "s_pos": [
        0,
        1.5,
        3.2,
        4.8,
        6.5,
        8.1,
        9.7,
        11.4,
        12.9
      ],
      "d_pos": [
        0.1,
        0.05,
        0.0,
        -0.05,
        0.0,
        0.05,
        0.1,
        0.05,
        0.0
      ],
      "s_speed": [
        6.5,
        6.7,
        6.8,
        6.6,
        6.7,
        6.9,
        6.8,
        6.7,
        6.5
      ],
      "d_speed": [
        0.1,
        0.2,
        0.1,
        0.0,
        -0.1,
        -0.2,
        -0.1,
        0.0,
        0.1
      ],
      "d_left": [
        1.5,
        1.6,
        1.5,
        1.5,
        1.6,
        1.5,
        1.6,
        1.5,
        1.6
      ],
      "d_right": [
        1.4,
        1.3,
        1.4,
        1.5,
        1.3,
        1.4,
        1.3,
        1.4,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.1, 0.0, -0.1, -0.2, -0.1, 0.0, 0.1, 0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.1, 0.0, -0.1, -0.2, -0.1, 0.0, 0.1, 0.2, 0.1]\n\n        \n        - The distance to the left wall is: [1.0, 1.1, 1.0, 1.0, 0.9, 0.8, 0.9, 1.0, 1.1, 1.2, 1.1]\n\n\n        - The distance to the right wall is: [1.1, 1.0, 1.1, 1.1, 1.2, 1.3, 1.2, 1.1, 1.0, 0.9, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 11,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "d_pos": [
        0.1,
        0.2,
        0.1,
        0.0,
        -0.1,
        -0.2,
        -0.1,
        0.0,
        0.1,
        0.2,
        0.1
      ],
      "s_speed": [
        4,
        5,
        6,
        5,
        6,
        5,
        6,
        5,
        6,
        5,
        6
      ],
      "d_speed": [
        0.1,
        0.2,
        0.1,
        0.0,
        -0.1,
        -0.2,
        -0.1,
        0.0,
        0.1,
        0.2,
        0.1
      ],
      "d_left": [
        1.0,
        1.1,
        1.0,
        1.0,
        0.9,
        0.8,
        0.9,
        1.0,
        1.1,
        1.2,
        1.1
      ],
      "d_right": [
        1.1,
        1.0,
        1.1,
        1.1,
        1.2,
        1.3,
        1.2,
        1.1,
        1.0,
        0.9,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3, 4.5, 6, 7.5, 9, 10.5, 12, 13.5, 15, 16.5, 18]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.3, -0.29, -0.28, -0.3, -0.29, -0.28, -0.3, -0.29, -0.28, -0.3, -0.29, -0.28, -0.3]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The distance to the left wall is: [0.3, 0.31, 0.32, 0.3, 0.31, 0.32, 0.3, 0.31, 0.32, 0.3, 0.31, 0.32, 0.3]\n\n\n        - The distance to the right wall is: [2.7, 2.69, 2.68, 2.7, 2.69, 2.68, 2.7, 2.69, 2.68, 2.7, 2.69, 2.68, 2.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 13,
      "s_pos": [
        0,
        1.5,
        3,
        4.5,
        6,
        7.5,
        9,
        10.5,
        12,
        13.5,
        15,
        16.5,
        18
      ],
      "d_pos": [
        -0.3,
        -0.29,
        -0.28,
        -0.3,
        -0.29,
        -0.28,
        -0.3,
        -0.29,
        -0.28,
        -0.3,
        -0.29,
        -0.28,
        -0.3
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "d_left": [
        0.3,
        0.31,
        0.32,
        0.3,
        0.31,
        0.32,
        0.3,
        0.31,
        0.32,
        0.3,
        0.31,
        0.32,
        0.3
      ],
      "d_right": [
        2.7,
        2.69,
        2.68,
        2.7,
        2.69,
        2.68,
        2.7,
        2.69,
        2.68,
        2.7,
        2.69,
        2.68,
        2.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30, 35, 40]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The distance to the left wall is: [2, 2, 2, 2, 2, 2, 2, 2, 2]\n\n\n        - The distance to the right wall is: [2, 2, 2, 2, 2, 2, 2, 2, 2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 9,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "d_left": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "d_right": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 11, 17, 23, 29, 35, 41]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.55, 1.5, 1.45, 1.4, 1.35, 1.3]\n\n\n        - The distance to the right wall is: [1.5, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 8,
      "s_pos": [
        0,
        5,
        11,
        17,
        23,
        29,
        35,
        41
      ],
      "d_pos": [
        0.1,
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1
      ],
      "s_speed": [
        5,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1
      ],
      "d_left": [
        1.5,
        1.6,
        1.55,
        1.5,
        1.45,
        1.4,
        1.35,
        1.3
      ],
      "d_right": [
        1.5,
        1.4,
        1.45,
        1.5,
        1.55,
        1.6,
        1.65,
        1.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0.0, 0.6, 1.2, 1.8, 2.4, 3.0, 3.6, 4.2, 4.8, 5.4, 6.0, 6.6, 7.2]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, -0.05, -0.1, 0.0, 0.05, -0.05, 0.1, 0.0, -0.05, 0.05, 0.1, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.3, 0.25, 0.2, 0.15, 0.1, 0.05, 0.2, 0.15, 0.1, 0.05, 0.2, 0.15, 0.3]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 13,
      "s_pos": [
        0.0,
        0.6,
        1.2,
        1.8,
        2.4,
        3.0,
        3.6,
        4.2,
        4.8,
        5.4,
        6.0,
        6.6,
        7.2
      ],
      "d_pos": [
        0.1,
        0.05,
        -0.05,
        -0.1,
        0.0,
        0.05,
        -0.05,
        0.1,
        0.0,
        -0.05,
        0.05,
        0.1,
        -0.1
      ],
      "s_speed": [
        3.5,
        3.5,
        3.5,
        3.5,
        3.5,
        3.5,
        3.5,
        3.5,
        3.5,
        3.5,
        3.5,
        3.5,
        3.5
      ],
      "d_speed": [
        0.3,
        0.25,
        0.2,
        0.15,
        0.1,
        0.05,
        0.2,
        0.15,
        0.1,
        0.05,
        0.2,
        0.15,
        0.3
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 11, 12, 13, 14, 15, 16, 17]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.2, 0.1, 0.05, 0.0, 0.05, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [4.5, 5.0, 5.5, 5.0, 4.5, 5.0, 5.5, 5.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.3, 0.1, 0.0, 0.1, 0.2, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5]\n\n\n        - The distance to the right wall is: [1.0, 1.1, 0.9, 1.0, 1.1, 1.0, 0.9, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 8,
      "s_pos": [
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17
      ],
      "d_pos": [
        0.1,
        0.15,
        0.2,
        0.1,
        0.05,
        0.0,
        0.05,
        0.1
      ],
      "s_speed": [
        4.5,
        5.0,
        5.5,
        5.0,
        4.5,
        5.0,
        5.5,
        5.0
      ],
      "d_speed": [
        0.1,
        0.2,
        0.3,
        0.1,
        0.0,
        0.1,
        0.2,
        0.1
      ],
      "d_left": [
        1.5,
        1.4,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5
      ],
      "d_right": [
        1.0,
        1.1,
        0.9,
        1.0,
        1.1,
        1.0,
        0.9,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.2, 2.5, 3.8, 5.1, 6.4, 7.7, 9.0, 10.3, 11.6]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, -0.02, 0.03, -0.01, 0.02, 0.0, -0.05, 0.04, 0.02]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.0, 6.1, 6.2, 6.0, 6.1, 6.3, 6.2, 6.0, 6.1, 6.2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.15, 0.2, 0.1, 0.05, 0.1, 0.2, 0.15, 0.1, 0.05]\n\n        \n        - The distance to the left wall is: [0.9, 0.95, 1.0, 0.95, 0.9, 0.85, 0.9, 0.95, 1.0, 0.95]\n\n\n        - The distance to the right wall is: [1.1, 1.05, 1.0, 1.05, 1.1, 1.15, 1.1, 1.05, 1.0, 1.05]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 10,
      "s_pos": [
        0,
        1.2,
        2.5,
        3.8,
        5.1,
        6.4,
        7.7,
        9.0,
        10.3,
        11.6
      ],
      "d_pos": [
        0.1,
        0.05,
        -0.02,
        0.03,
        -0.01,
        0.02,
        0.0,
        -0.05,
        0.04,
        0.02
      ],
      "s_speed": [
        6.0,
        6.1,
        6.2,
        6.0,
        6.1,
        6.3,
        6.2,
        6.0,
        6.1,
        6.2
      ],
      "d_speed": [
        0.1,
        0.15,
        0.2,
        0.1,
        0.05,
        0.1,
        0.2,
        0.15,
        0.1,
        0.05
      ],
      "d_left": [
        0.9,
        0.95,
        1.0,
        0.95,
        0.9,
        0.85,
        0.9,
        0.95,
        1.0,
        0.95
      ],
      "d_right": [
        1.1,
        1.05,
        1.0,
        1.05,
        1.1,
        1.15,
        1.1,
        1.05,
        1.0,
        1.05
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.1, 2.3, 3.5, 4.7, 5.9]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, -0.5, 0.4, -0.4, 0.6, -0.6]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.5, 6.8, 6.9, 6.7, 6.6, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.6, 0.5, -0.5, 0.7, -0.7]\n\n        \n        - The distance to the left wall is: [0.8, 0.9, 0.7, 0.9, 0.8, 0.9]\n\n\n        - The distance to the right wall is: [1.2, 1.1, 1.3, 1.1, 1.2, 1.1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 6,
      "s_pos": [
        0,
        1.1,
        2.3,
        3.5,
        4.7,
        5.9
      ],
      "d_pos": [
        0.5,
        -0.5,
        0.4,
        -0.4,
        0.6,
        -0.6
      ],
      "s_speed": [
        6.5,
        6.8,
        6.9,
        6.7,
        6.6,
        6.5
      ],
      "d_speed": [
        0.6,
        -0.6,
        0.5,
        -0.5,
        0.7,
        -0.7
      ],
      "d_left": [
        0.8,
        0.9,
        0.7,
        0.9,
        0.8,
        0.9
      ],
      "d_right": [
        1.2,
        1.1,
        1.3,
        1.1,
        1.2,
        1.1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 4 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0, -0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 5.5, 6, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.05, 0]\n\n        \n        - The distance to the left wall is: [0.8, 0.75, 0.7, 0.65]\n\n\n        - The distance to the right wall is: [0.9, 0.85, 0.8, 0.75]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 4,
      "s_pos": [
        10,
        15,
        20,
        25
      ],
      "d_pos": [
        0.1,
        0.05,
        0,
        -0.05
      ],
      "s_speed": [
        5,
        5.5,
        6,
        6.5
      ],
      "d_speed": [
        0.1,
        0.1,
        0.05,
        0
      ],
      "d_left": [
        0.8,
        0.75,
        0.7,
        0.65
      ],
      "d_right": [
        0.9,
        0.85,
        0.8,
        0.75
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 0 seconds in 4 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 2, 4, 6, 8]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 0,
      "data_samples": 4,
      "s_pos": [
        0,
        2,
        4,
        6,
        8
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 49, 48, 47, 46, 45]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.25, 0.3, 0.28, 0.26, 0.24]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1, -1, -1, -1, -1, -1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.15, 0.2, 0.18, 0.16, 0.14]\n\n        \n        - The distance to the left wall is: [1.2, 1.1, 1.0, 1.0, 1.1, 1.2]\n\n\n        - The distance to the right wall is: [0.8, 0.9, 1.0, 1.0, 0.9, 0.8]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 6,
      "s_pos": [
        50,
        49,
        48,
        47,
        46,
        45
      ],
      "d_pos": [
        0.2,
        0.25,
        0.3,
        0.28,
        0.26,
        0.24
      ],
      "s_speed": [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      ],
      "d_speed": [
        0.1,
        0.15,
        0.2,
        0.18,
        0.16,
        0.14
      ],
      "d_left": [
        1.2,
        1.1,
        1.0,
        1.0,
        1.1,
        1.2
      ],
      "d_right": [
        0.8,
        0.9,
        1.0,
        1.0,
        0.9,
        0.8
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 11, 12, 13, 14, 15, 16]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\n\n\n        - The distance to the right wall is: [5, 5, 5, 5, 5, 5, 5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 7,
      "s_pos": [
        10,
        11,
        12,
        13,
        14,
        15,
        16
      ],
      "d_pos": [
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3
      ],
      "d_right": [
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 0 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.15]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.15]\n\n        \n        - The distance to the left wall is: [0.8, 0.7, 0.75]\n\n\n        - The distance to the right wall is: [0.9, 0.8, 0.85]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 0,
      "data_samples": 3,
      "s_pos": [
        10,
        15,
        20
      ],
      "d_pos": [
        0.1,
        0.2,
        0.15
      ],
      "s_speed": [
        6,
        6.5,
        7
      ],
      "d_speed": [
        0.1,
        0.2,
        0.15
      ],
      "d_left": [
        0.8,
        0.7,
        0.75
      ],
      "d_right": [
        0.9,
        0.8,
        0.85
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 4 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.35, 0.35, 0.36, 0.36]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.35, 0.35, 0.36, 0.36]\n\n\n        - The distance to the right wall is: [3.65, 3.65, 3.64, 3.64]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 4,
      "s_pos": [
        10,
        15,
        20,
        25
      ],
      "d_pos": [
        0.35,
        0.35,
        0.36,
        0.36
      ],
      "s_speed": [
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.35,
        0.35,
        0.36,
        0.36
      ],
      "d_right": [
        3.65,
        3.65,
        3.64,
        3.64
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 15,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.0, -0.1, 0.0, 0.1, 0.0, -0.1, 0.0, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.2, 6.1, 6.3, 6.4, 6.2, 6.1, 6.3, 6.4]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.1, 0.2, 0.1, 0.2, 0.1, 0.2, 0.1, 0.2]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.5, 1.4, 1.5, 1.4, 1.5, 1.4, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.5, 1.6, 1.5, 1.6, 1.5, 1.6, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 9,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "d_pos": [
        0.1,
        0.0,
        -0.1,
        0.0,
        0.1,
        0.0,
        -0.1,
        0.0,
        0.1
      ],
      "s_speed": [
        6,
        6.2,
        6.1,
        6.3,
        6.4,
        6.2,
        6.1,
        6.3,
        6.4
      ],
      "d_speed": [
        0.2,
        0.1,
        0.2,
        0.1,
        0.2,
        0.1,
        0.2,
        0.1,
        0.2
      ],
      "d_left": [
        1.5,
        1.4,
        1.5,
        1.4,
        1.5,
        1.4,
        1.5,
        1.4,
        1.5
      ],
      "d_right": [
        1.5,
        1.6,
        1.5,
        1.6,
        1.5,
        1.6,
        1.5,
        1.6,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 4 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 21, 27, 34]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.4, -0.5, 0.6, -0.7, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, 0.7, 0.8, 0.7, 0.6]\n\n        \n        - The distance to the left wall is: [1.2, 1.1, 1.3, 1.1, 1.4]\n\n\n        - The distance to the right wall is: [0.8, 0.9, 0.7, 0.9, 0.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 4,
      "s_pos": [
        10,
        15,
        21,
        27,
        34
      ],
      "d_pos": [
        0.4,
        -0.5,
        0.6,
        -0.7,
        0.5
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.6,
        0.7,
        0.8,
        0.7,
        0.6
      ],
      "d_left": [
        1.2,
        1.1,
        1.3,
        1.1,
        1.4
      ],
      "d_right": [
        0.8,
        0.9,
        0.7,
        0.9,
        0.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 3,
      "s_pos": [
        5,
        10,
        15
      ],
      "d_pos": [
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [15.3, 15.1, 14.9, 14.7, 14.5, 14.3, 14.1, 13.9, 13.7, 13.5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2, -0.25]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1]\n\n\n        - The distance to the right wall is: [2.5, 2.4, 2.3, 2.2, 2.1, 2.0, 1.9, 1.8, 1.7, 1.6]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: True\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 10,
      "s_pos": [
        15.3,
        15.1,
        14.9,
        14.7,
        14.5,
        14.3,
        14.1,
        13.9,
        13.7,
        13.5
      ],
      "d_pos": [
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25
      ],
      "s_speed": [
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.2,
        1.3,
        1.4,
        1.5,
        1.6,
        1.7,
        1.8,
        1.9,
        2.0,
        2.1
      ],
      "d_right": [
        2.5,
        2.4,
        2.3,
        2.2,
        2.1,
        2.0,
        1.9,
        1.8,
        1.7,
        1.6
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": true
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3.1, 4.6, 6.2, 7.8, 9.3, 10.9, 12.4, 14.0]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0.2, -0.1, 0.05, -0.15, 0.1, 0.0, -0.05, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.2, 5.3, 5.5, 5.6, 5.4, 5.7, 5.5, 5.6, 5.7, 5.4]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.15, 0.2, 0.1, 0.05, 0.1, 0.15, 0.1, 0.05, 0.1]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.2, 1.3, 1.3, 1.2, 1.3, 1.2, 1.3, 1.2]\n\n\n        - The distance to the right wall is: [1.3, 1.2, 1.3, 1.2, 1.2, 1.3, 1.2, 1.3, 1.2, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 10,
      "s_pos": [
        0,
        1.5,
        3.1,
        4.6,
        6.2,
        7.8,
        9.3,
        10.9,
        12.4,
        14.0
      ],
      "d_pos": [
        0.1,
        0.05,
        0.2,
        -0.1,
        0.05,
        -0.15,
        0.1,
        0.0,
        -0.05,
        0.1
      ],
      "s_speed": [
        5.2,
        5.3,
        5.5,
        5.6,
        5.4,
        5.7,
        5.5,
        5.6,
        5.7,
        5.4
      ],
      "d_speed": [
        0.1,
        0.15,
        0.2,
        0.1,
        0.05,
        0.1,
        0.15,
        0.1,
        0.05,
        0.1
      ],
      "d_left": [
        1.2,
        1.3,
        1.2,
        1.3,
        1.3,
        1.2,
        1.3,
        1.2,
        1.3,
        1.2
      ],
      "d_right": [
        1.3,
        1.2,
        1.3,
        1.2,
        1.2,
        1.3,
        1.2,
        1.3,
        1.2,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35, 40, 45]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n        \n        - The distance to the left wall is: [2, 2, 2, 2, 2, 2, 2, 2]\n\n\n        - The distance to the right wall is: [2, 2, 2, 2, 2, 2, 2, 2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 8,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45
      ],
      "d_pos": [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "d_left": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "d_right": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.2, 0.2, 0.1, 0, -0.1, -0.1, 0, 0.1, 0.1, 0.2, 0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1, 1.2, 1, 1.1, 1.2, 1.3, 1.1, 1, 1.2, 1.1, 1, 1.2, 1.1, 1]\n\n\n        - The distance to the right wall is: [1.5, 1.3, 1.5, 1.4, 1.3, 1.2, 1.4, 1.5, 1.3, 1.4, 1.5, 1.3, 1.4, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 14,
      "s_pos": [
        0,
        3,
        6,
        9,
        12,
        15,
        18,
        21,
        24,
        27,
        30,
        33,
        36,
        39
      ],
      "d_pos": [
        0.1,
        0.1,
        0.2,
        0.2,
        0.1,
        0,
        -0.1,
        -0.1,
        0,
        0.1,
        0.1,
        0.2,
        0.2,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1,
        1.2,
        1,
        1.1,
        1.2,
        1.3,
        1.1,
        1,
        1.2,
        1.1,
        1,
        1.2,
        1.1,
        1
      ],
      "d_right": [
        1.5,
        1.3,
        1.5,
        1.4,
        1.3,
        1.2,
        1.4,
        1.5,
        1.3,
        1.4,
        1.5,
        1.3,
        1.4,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 14,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0, -0.05, -0.1, -0.05, 0, 0.05, 0.1, 0.05, 0, -0.05, -0.1, -0.05, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.5, 5.6, 5.7, 5.7, 5.8, 5.8, 5.9, 5.9, 6, 6, 6.1, 6.1, 6.2, 6.2, 6.3]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2, -0.15, -0.1, -0.05, 0, 0.05, 0.1]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.2, 1.1, 1.2, 1.3, 1.2, 1.1, 1.2, 1.3, 1.2, 1.1, 1.2, 1.3, 1.2]\n\n\n        - The distance to the right wall is: [0.8, 0.7, 0.8, 0.9, 0.8, 0.7, 0.8, 0.9, 0.8, 0.7, 0.8, 0.9, 0.8, 0.7, 0.8]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 15,
      "s_pos": [
        0,
        0.5,
        1,
        1.5,
        2,
        2.5,
        3,
        3.5,
        4,
        4.5,
        5,
        5.5,
        6,
        6.5,
        7
      ],
      "d_pos": [
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.05,
        0,
        0.05,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.05,
        0
      ],
      "s_speed": [
        5.5,
        5.6,
        5.7,
        5.7,
        5.8,
        5.8,
        5.9,
        5.9,
        6,
        6,
        6.1,
        6.1,
        6.2,
        6.2,
        6.3
      ],
      "d_speed": [
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.15,
        -0.1,
        -0.05,
        0,
        0.05,
        0.1
      ],
      "d_left": [
        1.2,
        1.3,
        1.2,
        1.1,
        1.2,
        1.3,
        1.2,
        1.1,
        1.2,
        1.3,
        1.2,
        1.1,
        1.2,
        1.3,
        1.2
      ],
      "d_right": [
        0.8,
        0.7,
        0.8,
        0.9,
        0.8,
        0.7,
        0.8,
        0.9,
        0.8,
        0.7,
        0.8,
        0.9,
        0.8,
        0.7,
        0.8
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.2, 0.1, 0, -0.1, -0.05, 0, 0.05, 0.1, 0.15]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.2, 6.5, 6.3, 6.1, 6, 6.2, 6.4, 6.3, 6.5, 6.1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.25, 0.3, 0.15, 0.1, 0.05, 0.1, 0.15, 0.2, 0.25, 0.2]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.3, 1.5, 1.6, 1.7, 1.6, 1.5, 1.4, 1.3, 1.4]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.7, 1.5, 1.4, 1.3, 1.4, 1.5, 1.6, 1.7, 1.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 11,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50
      ],
      "d_pos": [
        0.1,
        0.15,
        0.2,
        0.1,
        0,
        -0.1,
        -0.05,
        0,
        0.05,
        0.1,
        0.15
      ],
      "s_speed": [
        6,
        6.2,
        6.5,
        6.3,
        6.1,
        6,
        6.2,
        6.4,
        6.3,
        6.5,
        6.1
      ],
      "d_speed": [
        0.2,
        0.25,
        0.3,
        0.15,
        0.1,
        0.05,
        0.1,
        0.15,
        0.2,
        0.25,
        0.2
      ],
      "d_left": [
        1.5,
        1.4,
        1.3,
        1.5,
        1.6,
        1.7,
        1.6,
        1.5,
        1.4,
        1.3,
        1.4
      ],
      "d_right": [
        1.5,
        1.6,
        1.7,
        1.5,
        1.4,
        1.3,
        1.4,
        1.5,
        1.6,
        1.7,
        1.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0.05, -0.1, 0.1, -0.05, 0, 0.1, -0.1, 0.05, 0, -0.05, 0.1, -0.1, 0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6, 5.5, 6, 6.5, 6, 5.5, 6, 6.5, 6, 5.5, 6, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0.1, -0.2, 0.2, -0.1, 0, 0.2, -0.2, 0.1, 0, -0.1, 0.2, -0.2, 0.1]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 14,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13
      ],
      "d_pos": [
        0,
        0.05,
        -0.1,
        0.1,
        -0.05,
        0,
        0.1,
        -0.1,
        0.05,
        0,
        -0.05,
        0.1,
        -0.1,
        0.05
      ],
      "s_speed": [
        6,
        6.5,
        6,
        5.5,
        6,
        6.5,
        6,
        5.5,
        6,
        6.5,
        6,
        5.5,
        6,
        6.5
      ],
      "d_speed": [
        0,
        0.1,
        -0.2,
        0.2,
        -0.1,
        0,
        0.2,
        -0.2,
        0.1,
        0,
        -0.1,
        0.2,
        -0.2,
        0.1
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.4, -0.4, 0.5, -0.5, 0.6, -0.6]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.7, -0.7, 0.8, -0.8, 0.9, -0.9]\n\n        \n        - The distance to the left wall is: [1, 1.5, 1, 1.5, 1, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1, 1.5, 1, 1.5, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 6,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35
      ],
      "d_pos": [
        0.4,
        -0.4,
        0.5,
        -0.5,
        0.6,
        -0.6
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.7,
        -0.7,
        0.8,
        -0.8,
        0.9,
        -0.9
      ],
      "d_left": [
        1,
        1.5,
        1,
        1.5,
        1,
        1.5
      ],
      "d_right": [
        1.5,
        1,
        1.5,
        1,
        1.5,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [100, 100, 100, 100, 100, 100, 100, 100, 100, 100]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 10,
      "s_pos": [
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3.2, 4.8, 6.5, 8.1, 9.7, 11.4, 12.9]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0.0, -0.05, 0.0, 0.05, 0.1, 0.05, 0.0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.5, 6.7, 6.8, 6.6, 6.7, 6.9, 6.8, 6.7, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.1, 0.0, -0.1, -0.2, -0.1, 0.0, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.5, 1.5, 1.6, 1.5, 1.6, 1.5, 1.6]\n\n\n        - The distance to the right wall is: [1.4, 1.3, 1.4, 1.5, 1.3, 1.4, 1.3, 1.4, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 9,
      "s_pos": [
        0,
        1.5,
        3.2,
        4.8,
        6.5,
        8.1,
        9.7,
        11.4,
        12.9
      ],
      "d_pos": [
        0.1,
        0.05,
        0.0,
        -0.05,
        0.0,
        0.05,
        0.1,
        0.05,
        0.0
      ],
      "s_speed": [
        6.5,
        6.7,
        6.8,
        6.6,
        6.7,
        6.9,
        6.8,
        6.7,
        6.5
      ],
      "d_speed": [
        0.1,
        0.2,
        0.1,
        0.0,
        -0.1,
        -0.2,
        -0.1,
        0.0,
        0.1
      ],
      "d_left": [
        1.5,
        1.6,
        1.5,
        1.5,
        1.6,
        1.5,
        1.6,
        1.5,
        1.6
      ],
      "d_right": [
        1.4,
        1.3,
        1.4,
        1.5,
        1.3,
        1.4,
        1.3,
        1.4,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 10, 10, 10, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.8, 0.8, 0.8, 0.8, 0.8]\n\n\n        - The distance to the right wall is: [1.2, 1.2, 1.2, 1.2, 1.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 5,
      "s_pos": [
        10,
        10,
        10,
        10,
        10
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.8,
        0.8,
        0.8,
        0.8,
        0.8
      ],
      "d_right": [
        1.2,
        1.2,
        1.2,
        1.2,
        1.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 12, 19]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.5, 6.8, 7.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.25, 0.3]\n\n        \n        - The distance to the left wall is: [0.35, 0.3, 0.25]\n\n\n        - The distance to the right wall is: [2.0, 2.1, 2.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 3,
      "s_pos": [
        5,
        12,
        19
      ],
      "d_pos": [
        0.1,
        0.15,
        0.2
      ],
      "s_speed": [
        6.5,
        6.8,
        7.0
      ],
      "d_speed": [
        0.2,
        0.25,
        0.3
      ],
      "d_left": [
        0.35,
        0.3,
        0.25
      ],
      "d_right": [
        2.0,
        2.1,
        2.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.2, 2.4, 3.6, 4.8, 6.0, 7.2]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.05, 0.1, 0.05, 0, -0.05, 0, 0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.1, 0, -0.1, 0, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.5, 1.6, 1.7, 1.6, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.5, 1.4, 1.3, 1.4, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 7,
      "s_pos": [
        0,
        1.2,
        2.4,
        3.6,
        4.8,
        6.0,
        7.2
      ],
      "d_pos": [
        0.05,
        0.1,
        0.05,
        0,
        -0.05,
        0,
        0.05
      ],
      "s_speed": [
        3.5,
        4.0,
        4.5,
        5.0,
        5.5,
        6.0,
        6.5
      ],
      "d_speed": [
        0.1,
        0.2,
        0.1,
        0,
        -0.1,
        0,
        0.1
      ],
      "d_left": [
        1.5,
        1.4,
        1.5,
        1.6,
        1.7,
        1.6,
        1.5
      ],
      "d_right": [
        1.5,
        1.6,
        1.5,
        1.4,
        1.3,
        1.4,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\n\n\n        - The distance to the right wall is: [4.7, 4.7, 4.7, 4.7, 4.7, 4.7, 4.7, 4.7, 4.7, 4.7, 4.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 11,
      "s_pos": [
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20
      ],
      "d_pos": [
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3
      ],
      "d_right": [
        4.7,
        4.7,
        4.7,
        4.7,
        4.7,
        4.7,
        4.7,
        4.7,
        4.7,
        4.7,
        4.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1, 1.1, 1.1, 1, 1, 1.1, 1.1, 1, 1, 1.1]\n\n\n        - The distance to the right wall is: [1.2, 1.1, 1.1, 1.2, 1.2, 1.1, 1.1, 1.2, 1.2, 1.1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 10,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1,
        1.1,
        1.1,
        1,
        1,
        1.1,
        1.1,
        1,
        1,
        1.1
      ],
      "d_right": [
        1.2,
        1.1,
        1.1,
        1.2,
        1.2,
        1.1,
        1.1,
        1.2,
        1.2,
        1.1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.1, 0.2, -0.2, 0.1, -0.1, 0.2, -0.2, 0.1, -0.1, 0.2, -0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [4, 5, 6, 5, 6, 5, 4, 5, 6, 5, 4, 5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.4, 0.3, 0.4, 0.3, 0.2, 0.3, 0.4, 0.3, 0.2, 0.3]\n\n        \n        - The distance to the left wall is: [1.2, 1.1, 1.3, 1.0, 1.2, 1.1, 1.3, 1.0, 1.2, 1.1, 1.3, 1.0]\n\n\n        - The distance to the right wall is: [1.0, 1.2, 1.0, 1.3, 1.0, 1.2, 1.0, 1.3, 1.0, 1.2, 1.0, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 12,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55
      ],
      "d_pos": [
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.1,
        -0.1,
        0.2,
        -0.2
      ],
      "s_speed": [
        4,
        5,
        6,
        5,
        6,
        5,
        4,
        5,
        6,
        5,
        4,
        5
      ],
      "d_speed": [
        0.2,
        0.3,
        0.4,
        0.3,
        0.4,
        0.3,
        0.2,
        0.3,
        0.4,
        0.3,
        0.2,
        0.3
      ],
      "d_left": [
        1.2,
        1.1,
        1.3,
        1.0,
        1.2,
        1.1,
        1.3,
        1.0,
        1.2,
        1.1,
        1.3,
        1.0
      ],
      "d_right": [
        1.0,
        1.2,
        1.0,
        1.3,
        1.0,
        1.2,
        1.0,
        1.3,
        1.0,
        1.2,
        1.0,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15, 20, 25, 30, 35, 40, 45]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.1, 0.2, -0.2, 0.1, -0.1, 0.2, -0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [4, 5, 5.5, 6, 6.5, 5.5, 5, 4.5, 5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, -0.1, 0.2, -0.2, 0.3, -0.3, 0.2, -0.2, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.7, 1.6, 1.8, 1.5, 1.7, 1.6, 1.8, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.3, 1.4, 1.2, 1.5, 1.3, 1.4, 1.2, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 9,
      "s_pos": [
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45
      ],
      "d_pos": [
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.1
      ],
      "s_speed": [
        4,
        5,
        5.5,
        6,
        6.5,
        5.5,
        5,
        4.5,
        5
      ],
      "d_speed": [
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.3,
        -0.3,
        0.2,
        -0.2,
        0.1
      ],
      "d_left": [
        1.5,
        1.7,
        1.6,
        1.8,
        1.5,
        1.7,
        1.6,
        1.8,
        1.5
      ],
      "d_right": [
        1.5,
        1.3,
        1.4,
        1.2,
        1.5,
        1.3,
        1.4,
        1.2,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 49.5, 49, 48.5, 48, 47.5, 47, 46.5, 46, 45.5, 45]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2, -0.25]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.05, 0, -0.05, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 11,
      "s_pos": [
        50,
        49.5,
        49,
        48.5,
        48,
        47.5,
        47,
        46.5,
        46,
        45.5,
        45
      ],
      "d_pos": [
        0.1,
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25
      ],
      "s_speed": [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      ],
      "d_speed": [
        0.1,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.3, 0.35, 0.33, 0.32, 0.31]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6.7, 6.5, 6.2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.3, 0.4, 0.35, 0.32, 0.3]\n\n        \n        - The distance to the left wall is: [0.35, 0.34, 0.36, 0.38, 0.39]\n\n\n        - The distance to the right wall is: [4.65, 4.66, 4.64, 4.62, 4.61]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 5,
      "s_pos": [
        10,
        15,
        20,
        25,
        30
      ],
      "d_pos": [
        0.3,
        0.35,
        0.33,
        0.32,
        0.31
      ],
      "s_speed": [
        6,
        6.5,
        6.7,
        6.5,
        6.2
      ],
      "d_speed": [
        0.3,
        0.4,
        0.35,
        0.32,
        0.3
      ],
      "d_left": [
        0.35,
        0.34,
        0.36,
        0.38,
        0.39
      ],
      "d_right": [
        4.65,
        4.66,
        4.64,
        4.62,
        4.61
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.25, 0.3, 0.2, 0.1, 0, -0.1, -0.2, -0.15, -0.1, 0, 0.1, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.15, 0.2, 0.05, 0.1, 0.1, 0.2, 0.15, 0.1, 0.05, 0.1, 0.15, 0.2]\n\n        \n        - The distance to the left wall is: [0.35, 0.3, 0.25, 0.35, 0.4, 0.45, 0.5, 0.55, 0.5, 0.45, 0.4, 0.35, 0.3]\n\n\n        - The distance to the right wall is: [2.65, 2.7, 2.75, 2.65, 2.6, 2.55, 2.5, 2.45, 2.5, 2.55, 2.6, 2.65, 2.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 13,
      "s_pos": [
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34
      ],
      "d_pos": [
        0.2,
        0.25,
        0.3,
        0.2,
        0.1,
        0,
        -0.1,
        -0.2,
        -0.15,
        -0.1,
        0,
        0.1,
        0.2
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.15,
        0.2,
        0.05,
        0.1,
        0.1,
        0.2,
        0.15,
        0.1,
        0.05,
        0.1,
        0.15,
        0.2
      ],
      "d_left": [
        0.35,
        0.3,
        0.25,
        0.35,
        0.4,
        0.45,
        0.5,
        0.55,
        0.5,
        0.45,
        0.4,
        0.35,
        0.3
      ],
      "d_right": [
        2.65,
        2.7,
        2.75,
        2.65,
        2.6,
        2.55,
        2.5,
        2.45,
        2.5,
        2.55,
        2.6,
        2.65,
        2.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 13 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.0, -0.1, 0.0, 0.1, 0.0, -0.1, 0.0, 0.1, 0.0, -0.1, 0.0, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, -0.1, 0.1, -0.1, 0.1, -0.1, 0.1, -0.1, 0.1, -0.1, 0.1, -0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.8, 0.9, 0.8, 0.9, 0.8, 0.9, 0.8, 0.9, 0.8, 0.9, 0.8, 0.9, 0.8]\n\n\n        - The distance to the right wall is: [1.2, 1.1, 1.2, 1.1, 1.2, 1.1, 1.2, 1.1, 1.2, 1.1, 1.2, 1.1, 1.2]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 13,
      "data_samples": 13,
      "s_pos": [
        10,
        9,
        8,
        7,
        6,
        5,
        4,
        3,
        2,
        1,
        0,
        -1,
        -2
      ],
      "d_pos": [
        0.1,
        0.0,
        -0.1,
        0.0,
        0.1,
        0.0,
        -0.1,
        0.0,
        0.1,
        0.0,
        -0.1,
        0.0,
        0.1
      ],
      "s_speed": [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      ],
      "d_speed": [
        0.1,
        -0.1,
        0.1,
        -0.1,
        0.1,
        -0.1,
        0.1,
        -0.1,
        0.1,
        -0.1,
        0.1,
        -0.1,
        0.1
      ],
      "d_left": [
        0.8,
        0.9,
        0.8,
        0.9,
        0.8,
        0.9,
        0.8,
        0.9,
        0.8,
        0.9,
        0.8,
        0.9,
        0.8
      ],
      "d_right": [
        1.2,
        1.1,
        1.2,
        1.1,
        1.2,
        1.1,
        1.2,
        1.1,
        1.2,
        1.1,
        1.2,
        1.1,
        1.2
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3, 4.5, 6, 7.5, 9, 10.5, 12, 13.5, 15]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0, -0.05, -0.1, -0.05, 0, 0.05, 0.1, 0.05, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 5.5, 6, 5.5, 5, 5.5, 6, 5.5, 5, 5.5, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.05, 0, -0.05, -0.1, -0.05, 0, 0.05, 0.1, 0.05, 0]\n\n        \n        - The distance to the left wall is: [1, 1.1, 1.2, 1.1, 1, 1.1, 1.2, 1.1, 1, 1.1, 1.2]\n\n\n        - The distance to the right wall is: [1, 1.1, 1.2, 1.1, 1, 1.1, 1.2, 1.1, 1, 1.1, 1.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 11,
      "s_pos": [
        0,
        1.5,
        3,
        4.5,
        6,
        7.5,
        9,
        10.5,
        12,
        13.5,
        15
      ],
      "d_pos": [
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.05,
        0,
        0.05,
        0.1,
        0.05,
        0
      ],
      "s_speed": [
        5,
        5.5,
        6,
        5.5,
        5,
        5.5,
        6,
        5.5,
        5,
        5.5,
        6
      ],
      "d_speed": [
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.05,
        0,
        0.05,
        0.1,
        0.05,
        0
      ],
      "d_left": [
        1,
        1.1,
        1.2,
        1.1,
        1,
        1.1,
        1.2,
        1.1,
        1,
        1.1,
        1.2
      ],
      "d_right": [
        1,
        1.1,
        1.2,
        1.1,
        1,
        1.1,
        1.2,
        1.1,
        1,
        1.1,
        1.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 49, 48, 47, 46]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.25, 0.3, 0.35, 0.4]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-2, -2, -2, -2, -2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1, 1.2, 1.3, 1.4, 1.5]\n\n\n        - The distance to the right wall is: [0.8, 0.6, 0.5, 0.4, 0.3]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 5,
      "s_pos": [
        50,
        49,
        48,
        47,
        46
      ],
      "d_pos": [
        0.2,
        0.25,
        0.3,
        0.35,
        0.4
      ],
      "s_speed": [
        -2,
        -2,
        -2,
        -2,
        -2
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1,
        1.2,
        1.3,
        1.4,
        1.5
      ],
      "d_right": [
        0.8,
        0.6,
        0.5,
        0.4,
        0.3
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 15,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 3,
      "s_pos": [
        5,
        10,
        15
      ],
      "d_pos": [
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.2, 2.5, 4.0, 5.5, 7.1]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.25, 0.3, 0.15, 0.1, 0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [4.5, 5.0, 5.5, 6.0, 6.5, 7.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.3, 0.35, 0.4, 0.25, 0.2, 0.15]\n\n        \n        - The distance to the left wall is: [0.8, 0.85, 0.9, 0.95, 1.0, 1.05]\n\n\n        - The distance to the right wall is: [1.2, 1.15, 1.1, 1.05, 1.0, 0.95]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 6,
      "s_pos": [
        0,
        1.2,
        2.5,
        4.0,
        5.5,
        7.1
      ],
      "d_pos": [
        0.2,
        0.25,
        0.3,
        0.15,
        0.1,
        0.05
      ],
      "s_speed": [
        4.5,
        5.0,
        5.5,
        6.0,
        6.5,
        7.0
      ],
      "d_speed": [
        0.3,
        0.35,
        0.4,
        0.25,
        0.2,
        0.15
      ],
      "d_left": [
        0.8,
        0.85,
        0.9,
        0.95,
        1.0,
        1.05
      ],
      "d_right": [
        1.2,
        1.15,
        1.1,
        1.05,
        1.0,
        0.95
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.3, 0.35, 0.33, 0.32, 0.31]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6.7, 6.5, 6.2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.3, 0.4, 0.35, 0.32, 0.3]\n\n        \n        - The distance to the left wall is: [0.35, 0.34, 0.36, 0.38, 0.39]\n\n\n        - The distance to the right wall is: [4.65, 4.66, 4.64, 4.62, 4.61]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 5,
      "s_pos": [
        10,
        15,
        20,
        25,
        30
      ],
      "d_pos": [
        0.3,
        0.35,
        0.33,
        0.32,
        0.31
      ],
      "s_speed": [
        6,
        6.5,
        6.7,
        6.5,
        6.2
      ],
      "d_speed": [
        0.3,
        0.4,
        0.35,
        0.32,
        0.3
      ],
      "d_left": [
        0.35,
        0.34,
        0.36,
        0.38,
        0.39
      ],
      "d_right": [
        4.65,
        4.66,
        4.64,
        4.62,
        4.61
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.15, 0.1, 0.05, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.25, 0.2, 0.15, 0.2]\n\n        \n        - The distance to the left wall is: [0.3, 0.35, 0.3, 0.25, 0.3, 0.35]\n\n\n        - The distance to the right wall is: [3.7, 3.65, 3.7, 3.75, 3.7, 3.65]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 6,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35
      ],
      "d_pos": [
        0.1,
        0.2,
        0.15,
        0.1,
        0.05,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.2,
        0.3,
        0.25,
        0.2,
        0.15,
        0.2
      ],
      "d_left": [
        0.3,
        0.35,
        0.3,
        0.25,
        0.3,
        0.35
      ],
      "d_right": [
        3.7,
        3.65,
        3.7,
        3.75,
        3.7,
        3.65
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0.02, 0.01, -0.01, 0, 0.03, -0.02, 0.01, -0.01, 0.02, 0, -0.02, 0.01, 0, -0.01]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.5, 6.7, 6.6, 6.4, 6.5, 6.8, 6.6, 6.7, 6.5, 6.6, 6.7, 6.5, 6.6, 6.7, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.12, 0.11, 0.09, 0.1, 0.13, 0.11, 0.12, 0.1, 0.11, 0.12, 0.1, 0.11, 0.12, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 15,
      "s_pos": [
        0,
        0.5,
        1.0,
        1.5,
        2.0,
        2.5,
        3.0,
        3.5,
        4.0,
        4.5,
        5.0,
        5.5,
        6.0,
        6.5,
        7.0
      ],
      "d_pos": [
        0,
        0.02,
        0.01,
        -0.01,
        0,
        0.03,
        -0.02,
        0.01,
        -0.01,
        0.02,
        0,
        -0.02,
        0.01,
        0,
        -0.01
      ],
      "s_speed": [
        6.5,
        6.7,
        6.6,
        6.4,
        6.5,
        6.8,
        6.6,
        6.7,
        6.5,
        6.6,
        6.7,
        6.5,
        6.6,
        6.7,
        6.5
      ],
      "d_speed": [
        0.1,
        0.12,
        0.11,
        0.09,
        0.1,
        0.13,
        0.11,
        0.12,
        0.1,
        0.11,
        0.12,
        0.1,
        0.11,
        0.12,
        0.1
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0.05, -0.1, 0.1, -0.05, 0, 0.1, -0.1, 0.05, 0, -0.05, 0.1, -0.1, 0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6, 5.5, 6, 6.5, 6, 5.5, 6, 6.5, 6, 5.5, 6, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0.1, -0.2, 0.2, -0.1, 0, 0.2, -0.2, 0.1, 0, -0.1, 0.2, -0.2, 0.1]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 14,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13
      ],
      "d_pos": [
        0,
        0.05,
        -0.1,
        0.1,
        -0.05,
        0,
        0.1,
        -0.1,
        0.05,
        0,
        -0.05,
        0.1,
        -0.1,
        0.05
      ],
      "s_speed": [
        6,
        6.5,
        6,
        5.5,
        6,
        6.5,
        6,
        5.5,
        6,
        6.5,
        6,
        5.5,
        6,
        6.5
      ],
      "d_speed": [
        0,
        0.1,
        -0.2,
        0.2,
        -0.1,
        0,
        0.2,
        -0.2,
        0.1,
        0,
        -0.1,
        0.2,
        -0.2,
        0.1
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 8,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 10, 10, 10, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, 0.5, 0.5, 0.5, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.3, 0.3, 0.3, 0.3, 0.3]\n\n\n        - The distance to the right wall is: [0.3, 0.3, 0.3, 0.3, 0.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 5,
      "s_pos": [
        10,
        10,
        10,
        10,
        10
      ],
      "d_pos": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.3,
        0.3,
        0.3,
        0.3,
        0.3
      ],
      "d_right": [
        0.3,
        0.3,
        0.3,
        0.3,
        0.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.2, 2.5, 3.8, 5.1, 6.4, 7.7, 9.0, 10.3, 11.6]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, -0.02, 0.03, -0.01, 0.02, 0.0, -0.05, 0.04, 0.02]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.0, 6.1, 6.2, 6.0, 6.1, 6.3, 6.2, 6.0, 6.1, 6.2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.15, 0.2, 0.1, 0.05, 0.1, 0.2, 0.15, 0.1, 0.05]\n\n        \n        - The distance to the left wall is: [0.9, 0.95, 1.0, 0.95, 0.9, 0.85, 0.9, 0.95, 1.0, 0.95]\n\n\n        - The distance to the right wall is: [1.1, 1.05, 1.0, 1.05, 1.1, 1.15, 1.1, 1.05, 1.0, 1.05]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 10,
      "s_pos": [
        0,
        1.2,
        2.5,
        3.8,
        5.1,
        6.4,
        7.7,
        9.0,
        10.3,
        11.6
      ],
      "d_pos": [
        0.1,
        0.05,
        -0.02,
        0.03,
        -0.01,
        0.02,
        0.0,
        -0.05,
        0.04,
        0.02
      ],
      "s_speed": [
        6.0,
        6.1,
        6.2,
        6.0,
        6.1,
        6.3,
        6.2,
        6.0,
        6.1,
        6.2
      ],
      "d_speed": [
        0.1,
        0.15,
        0.2,
        0.1,
        0.05,
        0.1,
        0.2,
        0.15,
        0.1,
        0.05
      ],
      "d_left": [
        0.9,
        0.95,
        1.0,
        0.95,
        0.9,
        0.85,
        0.9,
        0.95,
        1.0,
        0.95
      ],
      "d_right": [
        1.1,
        1.05,
        1.0,
        1.05,
        1.1,
        1.15,
        1.1,
        1.05,
        1.0,
        1.05
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 0 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.15, 0.2, 0.1, 0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.5, 6.7, 6.6, 6.8, 6.5, 6.6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.15, 0.2, 0.1, 0.05]\n\n        \n        - The distance to the left wall is: [1.2, 1.1, 1.3, 1.2, 1.3, 1.2]\n\n\n        - The distance to the right wall is: [1.1, 1.2, 1.1, 1.1, 1.2, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 0,
      "data_samples": 6,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "d_pos": [
        0.1,
        0.2,
        0.15,
        0.2,
        0.1,
        0.05
      ],
      "s_speed": [
        6.5,
        6.7,
        6.6,
        6.8,
        6.5,
        6.6
      ],
      "d_speed": [
        0.1,
        0.2,
        0.15,
        0.2,
        0.1,
        0.05
      ],
      "d_left": [
        1.2,
        1.1,
        1.3,
        1.2,
        1.3,
        1.2
      ],
      "d_right": [
        1.1,
        1.2,
        1.1,
        1.1,
        1.2,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5.0, 4.9, 4.8, 4.7, 4.6, 4.5, 4.4, 4.3, 4.2, 4.1, 4.0, 3.9, 3.8, 3.7, 3.6]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.2, 0.25, 0.3, 0.28, 0.25, 0.2, 0.15, 0.1, 0.05, 0.0, -0.05, -0.1, -0.15]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.05, 0.1, 0.15, 0.2, 0.25, 0.2, 0.15, 0.1, 0.05, 0.0, -0.05, -0.1, -0.15, -0.2, -0.25]\n\n        \n        - The distance to the left wall is: [1.5, 1.45, 1.4, 1.35, 1.3, 1.28, 1.25, 1.2, 1.15, 1.1, 1.05, 1.0, 0.95, 0.9, 0.85]\n\n\n        - The distance to the right wall is: [2.5, 2.55, 2.6, 2.65, 2.7, 2.72, 2.75, 2.8, 2.85, 2.9, 2.95, 3.0, 3.05, 3.1, 3.15]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 15,
      "s_pos": [
        5.0,
        4.9,
        4.8,
        4.7,
        4.6,
        4.5,
        4.4,
        4.3,
        4.2,
        4.1,
        4.0,
        3.9,
        3.8,
        3.7,
        3.6
      ],
      "d_pos": [
        0.1,
        0.15,
        0.2,
        0.25,
        0.3,
        0.28,
        0.25,
        0.2,
        0.15,
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1,
        -0.15
      ],
      "s_speed": [
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2
      ],
      "d_speed": [
        0.05,
        0.1,
        0.15,
        0.2,
        0.25,
        0.2,
        0.15,
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25
      ],
      "d_left": [
        1.5,
        1.45,
        1.4,
        1.35,
        1.3,
        1.28,
        1.25,
        1.2,
        1.15,
        1.1,
        1.05,
        1.0,
        0.95,
        0.9,
        0.85
      ],
      "d_right": [
        2.5,
        2.55,
        2.6,
        2.65,
        2.7,
        2.72,
        2.75,
        2.8,
        2.85,
        2.9,
        2.95,
        3.0,
        3.05,
        3.1,
        3.15
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15, 20, 25, 30, 35, 40, 45]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.1, 0.2, -0.2, 0.1, -0.1, 0.2, -0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [4, 5, 5.5, 6, 6.5, 5.5, 5, 4.5, 5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, -0.1, 0.2, -0.2, 0.3, -0.3, 0.2, -0.2, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.7, 1.6, 1.8, 1.5, 1.7, 1.6, 1.8, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.3, 1.4, 1.2, 1.5, 1.3, 1.4, 1.2, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 9,
      "s_pos": [
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45
      ],
      "d_pos": [
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.1
      ],
      "s_speed": [
        4,
        5,
        5.5,
        6,
        6.5,
        5.5,
        5,
        4.5,
        5
      ],
      "d_speed": [
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.3,
        -0.3,
        0.2,
        -0.2,
        0.1
      ],
      "d_left": [
        1.5,
        1.7,
        1.6,
        1.8,
        1.5,
        1.7,
        1.6,
        1.8,
        1.5
      ],
      "d_right": [
        1.5,
        1.3,
        1.4,
        1.2,
        1.5,
        1.3,
        1.4,
        1.2,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.4, -0.4, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.6, 0.7]\n\n        \n        - The distance to the left wall is: [0.6, 0.5, 0.4]\n\n\n        - The distance to the right wall is: [0.5, 0.4, 0.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 3,
      "s_pos": [
        0,
        1,
        2
      ],
      "d_pos": [
        0.4,
        -0.4,
        0.5
      ],
      "s_speed": [
        6,
        6,
        6
      ],
      "d_speed": [
        0.6,
        -0.6,
        0.7
      ],
      "d_left": [
        0.6,
        0.5,
        0.4
      ],
      "d_right": [
        0.5,
        0.4,
        0.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [100, 99.5, 99, 98.5, 98, 97.5, 97, 96.5, 96, 95.5, 95, 94.5, 94, 93.5, 93]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2, -0.25, -0.2, -0.15, -0.1, -0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [-0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1]\n\n        \n        - The distance to the left wall is: [0.8, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35]\n\n\n        - The distance to the right wall is: [1.2, 1.3, 1.25, 1.2, 1.15, 1.1, 1.05, 1, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7, 0.65]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 15,
      "s_pos": [
        100,
        99.5,
        99,
        98.5,
        98,
        97.5,
        97,
        96.5,
        96,
        95.5,
        95,
        94.5,
        94,
        93.5,
        93
      ],
      "d_pos": [
        0.1,
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25,
        -0.2,
        -0.15,
        -0.1,
        -0.05
      ],
      "s_speed": [
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2
      ],
      "d_speed": [
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1
      ],
      "d_left": [
        0.8,
        0.7,
        0.75,
        0.8,
        0.85,
        0.9,
        0.95,
        1,
        1.05,
        1.1,
        1.15,
        1.2,
        1.25,
        1.3,
        1.35
      ],
      "d_right": [
        1.2,
        1.3,
        1.25,
        1.2,
        1.15,
        1.1,
        1.05,
        1,
        0.95,
        0.9,
        0.85,
        0.8,
        0.75,
        0.7,
        0.65
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15, 20, 25, 30, 35, 40]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.35, -0.36, -0.37, -0.35, -0.34, -0.33, -0.32, -0.31]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.2, 6.1, 6.3, 6.5, 6.4, 6.6, 6.7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.25, 0.22, 0.28, 0.24, 0.26, 0.27]\n\n        \n        - The distance to the left wall is: [0.3, 0.29, 0.28, 0.3, 0.31, 0.32, 0.33, 0.34]\n\n\n        - The distance to the right wall is: [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 8,
      "s_pos": [
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40
      ],
      "d_pos": [
        -0.35,
        -0.36,
        -0.37,
        -0.35,
        -0.34,
        -0.33,
        -0.32,
        -0.31
      ],
      "s_speed": [
        6,
        6.2,
        6.1,
        6.3,
        6.5,
        6.4,
        6.6,
        6.7
      ],
      "d_speed": [
        0.2,
        0.3,
        0.25,
        0.22,
        0.28,
        0.24,
        0.26,
        0.27
      ],
      "d_left": [
        0.3,
        0.29,
        0.28,
        0.3,
        0.31,
        0.32,
        0.33,
        0.34
      ],
      "d_right": [
        2.5,
        2.5,
        2.5,
        2.5,
        2.5,
        2.5,
        2.5,
        2.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.2, 0.2, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.4, 1.5, 1.4, 1.5]\n\n\n        - The distance to the right wall is: [1.4, 1.3, 1.5, 1.4, 1.5, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 6,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35
      ],
      "d_pos": [
        0.1,
        0.1,
        0.2,
        0.2,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "d_left": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.4,
        1.5
      ],
      "d_right": [
        1.4,
        1.3,
        1.5,
        1.4,
        1.5,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 0 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3, 4.5, 6, 7.5, 9, 10.5, 12, 13.5, 15]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0, -0.05, 0.1, 0.05, 0, -0.05, 0.1, 0.05, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.1, 0, -0.1, 0.2, 0.1, 0, -0.1, 0.2, 0.1, 0]\n\n        \n        - The distance to the left wall is: [1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2]\n\n\n        - The distance to the right wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 0,
      "data_samples": 11,
      "s_pos": [
        0,
        1.5,
        3,
        4.5,
        6,
        7.5,
        9,
        10.5,
        12,
        13.5,
        15
      ],
      "d_pos": [
        0.1,
        0.05,
        0,
        -0.05,
        0.1,
        0.05,
        0,
        -0.05,
        0.1,
        0.05,
        0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.2,
        0.1,
        0,
        -0.1,
        0.2,
        0.1,
        0,
        -0.1,
        0.2,
        0.1,
        0
      ],
      "d_left": [
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2
      ],
      "d_right": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 0 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.15, 0.2, 0.1, 0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.5, 6.7, 6.6, 6.8, 6.5, 6.6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.15, 0.2, 0.1, 0.05]\n\n        \n        - The distance to the left wall is: [1.2, 1.1, 1.3, 1.2, 1.3, 1.2]\n\n\n        - The distance to the right wall is: [1.1, 1.2, 1.1, 1.1, 1.2, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 0,
      "data_samples": 6,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "d_pos": [
        0.1,
        0.2,
        0.15,
        0.2,
        0.1,
        0.05
      ],
      "s_speed": [
        6.5,
        6.7,
        6.6,
        6.8,
        6.5,
        6.6
      ],
      "d_speed": [
        0.1,
        0.2,
        0.15,
        0.2,
        0.1,
        0.05
      ],
      "d_left": [
        1.2,
        1.1,
        1.3,
        1.2,
        1.3,
        1.2
      ],
      "d_right": [
        1.1,
        1.2,
        1.1,
        1.1,
        1.2,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 12,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [1, 6, 11, 16, 21, 26, 31, 36]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, -0.1, -0.1, 0.1, 0.1, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.2, 0.2, 0.3, 0.3, 0.2, 0.2, 0.3]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.4, 1.4, 1.5, 1.5, 1.4]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.4, 1.4, 1.5, 1.5, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 8,
      "s_pos": [
        1,
        6,
        11,
        16,
        21,
        26,
        31,
        36
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        -0.1,
        -0.1,
        0.1,
        0.1,
        -0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.2,
        0.2,
        0.2,
        0.3,
        0.3,
        0.2,
        0.2,
        0.3
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.4,
        1.4,
        1.5,
        1.5,
        1.4
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.4,
        1.4,
        1.5,
        1.5,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.1, 0.2, -0.2, 0.15, -0.15, 0.25, -0.25, 0.3, -0.3, 0.2, -0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7, 6.8, 6.5, 6.2, 6.8, 7, 6.5, 6.2, 6.8, 7, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.4, 0.6, 0.5, 0.7, 0.5, 0.6, 0.5, 0.7, 0.5, 0.6, 0.5, 0.7, 0.6]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.6, 1.3, 1.5, 1.4, 1.6, 1.3, 1.5, 1.4, 1.6, 1.3, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.4, 1.7, 1.5, 1.6, 1.4, 1.7, 1.5, 1.6, 1.4, 1.7, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 13,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "d_pos": [
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.15,
        -0.15,
        0.25,
        -0.25,
        0.3,
        -0.3,
        0.2,
        -0.2,
        0.1
      ],
      "s_speed": [
        6,
        6.5,
        7,
        6.8,
        6.5,
        6.2,
        6.8,
        7,
        6.5,
        6.2,
        6.8,
        7,
        6.5
      ],
      "d_speed": [
        0.4,
        0.6,
        0.5,
        0.7,
        0.5,
        0.6,
        0.5,
        0.7,
        0.5,
        0.6,
        0.5,
        0.7,
        0.6
      ],
      "d_left": [
        1.5,
        1.4,
        1.6,
        1.3,
        1.5,
        1.4,
        1.6,
        1.3,
        1.5,
        1.4,
        1.6,
        1.3,
        1.5
      ],
      "d_right": [
        1.5,
        1.6,
        1.4,
        1.7,
        1.5,
        1.6,
        1.4,
        1.7,
        1.5,
        1.6,
        1.4,
        1.7,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.2, 0.2, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7, 6.5, 6, 5.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.1, 0.3, 0.2, 0.1, 0.2]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.4, 1.5, 1.6, 1.5]\n\n\n        - The distance to the right wall is: [1.2, 1.1, 1.3, 1.2, 1.1, 1.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 6,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35
      ],
      "d_pos": [
        0.1,
        0.1,
        0.2,
        0.2,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6.5,
        7,
        6.5,
        6,
        5.5
      ],
      "d_speed": [
        0.2,
        0.1,
        0.3,
        0.2,
        0.1,
        0.2
      ],
      "d_left": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.6,
        1.5
      ],
      "d_right": [
        1.2,
        1.1,
        1.3,
        1.2,
        1.1,
        1.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.2, 1.1, 1.3, 1.2, 1.2, 1.1, 1.3]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.4, 1.5, 1.5, 1.6, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 7,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.2,
        1.1,
        1.3,
        1.2,
        1.2,
        1.1,
        1.3
      ],
      "d_right": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.5,
        1.6,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 4 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 9, 8, 7]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.1, 0.0, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-2, -2, -2, -2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.5, 0.6, 0.7, 0.8]\n\n\n        - The distance to the right wall is: [0.7, 0.8, 0.9, 1.0]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: True\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 4,
      "s_pos": [
        10,
        9,
        8,
        7
      ],
      "d_pos": [
        0.2,
        0.1,
        0.0,
        -0.1
      ],
      "s_speed": [
        -2,
        -2,
        -2,
        -2
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.5,
        0.6,
        0.7,
        0.8
      ],
      "d_right": [
        0.7,
        0.8,
        0.9,
        1.0
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": true
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 50, 50, 50, 50, 50, 50, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n\n        - The distance to the right wall is: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 8,
      "s_pos": [
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "d_right": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.4, -0.4, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.6, 0.7]\n\n        \n        - The distance to the left wall is: [0.6, 0.5, 0.4]\n\n\n        - The distance to the right wall is: [0.5, 0.4, 0.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 3,
      "s_pos": [
        0,
        1,
        2
      ],
      "d_pos": [
        0.4,
        -0.4,
        0.5
      ],
      "s_speed": [
        6,
        6,
        6
      ],
      "d_speed": [
        0.6,
        -0.6,
        0.7
      ],
      "d_left": [
        0.6,
        0.5,
        0.4
      ],
      "d_right": [
        0.5,
        0.4,
        0.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30, 35, 40]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.1, 0.2, -0.2, 0.1, -0.1, 0.2, -0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 5.5, 6, 5.8, 6.2, 5.7, 5.9, 6.1, 5.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.1, 0.2, 0.3, 0.1, 0.2, 0.3, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.6, 1.5, 1.4, 1.6, 1.5, 1.4, 1.6]\n\n\n        - The distance to the right wall is: [1.4, 1.5, 1.3, 1.4, 1.5, 1.3, 1.4, 1.5, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 9,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40
      ],
      "d_pos": [
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.1
      ],
      "s_speed": [
        5,
        5.5,
        6,
        5.8,
        6.2,
        5.7,
        5.9,
        6.1,
        5.5
      ],
      "d_speed": [
        0.2,
        0.3,
        0.1,
        0.2,
        0.3,
        0.1,
        0.2,
        0.3,
        0.1
      ],
      "d_left": [
        1.5,
        1.4,
        1.6,
        1.5,
        1.4,
        1.6,
        1.5,
        1.4,
        1.6
      ],
      "d_right": [
        1.4,
        1.5,
        1.3,
        1.4,
        1.5,
        1.3,
        1.4,
        1.5,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.4, -0.4, 0.35, -0.35, 0.3, -0.3, 0.25, -0.25, 0.2, -0.2, 0.15, -0.15, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6.8, 7, 6.5, 6, 6.2, 7, 6.7, 7, 6.9, 6.8, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.6, 0.55, -0.55, 0.5, -0.5, 0.45, -0.45, 0.4, -0.4, 0.35, -0.35, 0.3]\n\n        \n        - The distance to the left wall is: [1, 0.9, 1.1, 0.8, 1.2, 0.7, 1.3, 0.6, 1.4, 0.5, 1.5, 0.4, 1.6]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.4, 1.7, 1.3, 1.8, 1.2, 1.9, 1.1, 2, 1, 2.1, 0.9]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 13,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "d_pos": [
        0.4,
        -0.4,
        0.35,
        -0.35,
        0.3,
        -0.3,
        0.25,
        -0.25,
        0.2,
        -0.2,
        0.15,
        -0.15,
        0.1
      ],
      "s_speed": [
        6,
        6.5,
        6.8,
        7,
        6.5,
        6,
        6.2,
        7,
        6.7,
        7,
        6.9,
        6.8,
        6.5
      ],
      "d_speed": [
        0.6,
        -0.6,
        0.55,
        -0.55,
        0.5,
        -0.5,
        0.45,
        -0.45,
        0.4,
        -0.4,
        0.35,
        -0.35,
        0.3
      ],
      "d_left": [
        1,
        0.9,
        1.1,
        0.8,
        1.2,
        0.7,
        1.3,
        0.6,
        1.4,
        0.5,
        1.5,
        0.4,
        1.6
      ],
      "d_right": [
        1.5,
        1.6,
        1.4,
        1.7,
        1.3,
        1.8,
        1.2,
        1.9,
        1.1,
        2,
        1,
        2.1,
        0.9
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 4 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.2, 0.2, 0.2]\n\n        \n        - The distance to the left wall is: [2, 2, 2, 2]\n\n\n        - The distance to the right wall is: [2, 2, 2, 2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 4,
      "s_pos": [
        10,
        15,
        20,
        25
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "d_left": [
        2,
        2,
        2,
        2
      ],
      "d_right": [
        2,
        2,
        2,
        2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.05, 0.04, 0.03, 0.02, 0.01, 0.0, -0.01, -0.02, -0.01, 0.0, 0.01, 0.02, 0.03]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.2, 6.1, 5.9, 6.0, 6.3, 6.1, 5.8, 6.0, 6.2, 5.9, 6.1, 6.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.1, 0.15, 0.1, 0.05, 0.1, 0.15, 0.1, 0.05, 0.1, 0.2, 0.1]\n\n        \n        - The distance to the left wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n\n        - The distance to the right wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 13,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "d_pos": [
        0.05,
        0.04,
        0.03,
        0.02,
        0.01,
        0.0,
        -0.01,
        -0.02,
        -0.01,
        0.0,
        0.01,
        0.02,
        0.03
      ],
      "s_speed": [
        6,
        6.2,
        6.1,
        5.9,
        6.0,
        6.3,
        6.1,
        5.8,
        6.0,
        6.2,
        5.9,
        6.1,
        6.0
      ],
      "d_speed": [
        0.1,
        0.2,
        0.1,
        0.15,
        0.1,
        0.05,
        0.1,
        0.15,
        0.1,
        0.05,
        0.1,
        0.2,
        0.1
      ],
      "d_left": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "d_right": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [15.3, 15.1, 14.9, 14.7, 14.5, 14.3, 14.1, 13.9, 13.7, 13.5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2, -0.25]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1]\n\n\n        - The distance to the right wall is: [2.5, 2.4, 2.3, 2.2, 2.1, 2.0, 1.9, 1.8, 1.7, 1.6]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: True\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 10,
      "s_pos": [
        15.3,
        15.1,
        14.9,
        14.7,
        14.5,
        14.3,
        14.1,
        13.9,
        13.7,
        13.5
      ],
      "d_pos": [
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25
      ],
      "s_speed": [
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.2,
        1.3,
        1.4,
        1.5,
        1.6,
        1.7,
        1.8,
        1.9,
        2.0,
        2.1
      ],
      "d_right": [
        2.5,
        2.4,
        2.3,
        2.2,
        2.1,
        2.0,
        1.9,
        1.8,
        1.7,
        1.6
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": true
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35, 40, 45, 50, 55]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, -0.5, 0.4, -0.4, 0.3, -0.3, 0.2, -0.2, 0.1, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7, 6.8, 6.2, 6.5, 7, 6.6, 6.3, 6.4]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.6, 0.5, -0.5, 0.4, -0.4, 0.3, -0.3, 0.2, -0.2]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.6, 1.5, 1.4, 1.5, 1.6, 1.4, 1.5, 1.6]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.4, 1.5, 1.6, 1.5, 1.4, 1.6, 1.5, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 10,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55
      ],
      "d_pos": [
        0.5,
        -0.5,
        0.4,
        -0.4,
        0.3,
        -0.3,
        0.2,
        -0.2,
        0.1,
        -0.1
      ],
      "s_speed": [
        6,
        6.5,
        7,
        6.8,
        6.2,
        6.5,
        7,
        6.6,
        6.3,
        6.4
      ],
      "d_speed": [
        0.6,
        -0.6,
        0.5,
        -0.5,
        0.4,
        -0.4,
        0.3,
        -0.3,
        0.2,
        -0.2
      ],
      "d_left": [
        1.5,
        1.4,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.4,
        1.5,
        1.6
      ],
      "d_right": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.6,
        1.5,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.35, 0.36, 0.34, 0.37, 0.33, 0.38, 0.36, 0.35, 0.34, 0.37, 0.35, 0.33, 0.36, 0.34, 0.35]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.5, 5.6, 5.5, 5.7, 5.5, 5.6, 5.5, 5.6, 5.5, 5.7, 5.5, 5.6, 5.5, 5.6, 5.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.3, 0.4, 0.2, 0.3, 0.1, 0.3, 0.2, 0.2, 0.3, 0.4, 0.3, 0.2, 0.1, 0.3, 0.2]\n\n        \n        - The distance to the left wall is: [0.35, 0.36, 0.34, 0.37, 0.33, 0.38, 0.36, 0.35, 0.34, 0.37, 0.35, 0.33, 0.36, 0.34, 0.35]\n\n\n        - The distance to the right wall is: [3.65, 3.64, 3.66, 3.63, 3.67, 3.62, 3.64, 3.65, 3.66, 3.63, 3.65, 3.67, 3.64, 3.66, 3.65]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 15,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14
      ],
      "d_pos": [
        0.35,
        0.36,
        0.34,
        0.37,
        0.33,
        0.38,
        0.36,
        0.35,
        0.34,
        0.37,
        0.35,
        0.33,
        0.36,
        0.34,
        0.35
      ],
      "s_speed": [
        5.5,
        5.6,
        5.5,
        5.7,
        5.5,
        5.6,
        5.5,
        5.6,
        5.5,
        5.7,
        5.5,
        5.6,
        5.5,
        5.6,
        5.5
      ],
      "d_speed": [
        0.3,
        0.4,
        0.2,
        0.3,
        0.1,
        0.3,
        0.2,
        0.2,
        0.3,
        0.4,
        0.3,
        0.2,
        0.1,
        0.3,
        0.2
      ],
      "d_left": [
        0.35,
        0.36,
        0.34,
        0.37,
        0.33,
        0.38,
        0.36,
        0.35,
        0.34,
        0.37,
        0.35,
        0.33,
        0.36,
        0.34,
        0.35
      ],
      "d_right": [
        3.65,
        3.64,
        3.66,
        3.63,
        3.67,
        3.62,
        3.64,
        3.65,
        3.66,
        3.63,
        3.65,
        3.67,
        3.64,
        3.66,
        3.65
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.2, 0.1, 0.0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.1, 0.1, 0.1, 0.0]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.4, 1.3, 1.2]\n\n\n        - The distance to the right wall is: [1.1, 1.1, 1.0, 1.1, 1.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 5,
      "s_pos": [
        10,
        15,
        20,
        25,
        30
      ],
      "d_pos": [
        0.1,
        0.1,
        0.2,
        0.1,
        0.0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.2,
        0.1,
        0.1,
        0.1,
        0.0
      ],
      "d_left": [
        1.2,
        1.3,
        1.4,
        1.3,
        1.2
      ],
      "d_right": [
        1.1,
        1.1,
        1.0,
        1.1,
        1.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15, 20, 25, 30, 35, 40]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, -0.3, 0.4, -0.5, 0.3, -0.4, 0.5, -0.3]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.6, 0.7, -0.7, 0.6, -0.7, 0.7, -0.6]\n\n        \n        - The distance to the left wall is: [0.6, 0.5, 0.7, 0.4, 0.6, 0.5, 0.7, 0.4]\n\n\n        - The distance to the right wall is: [0.6, 0.5, 0.7, 0.4, 0.6, 0.5, 0.7, 0.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 8,
      "s_pos": [
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40
      ],
      "d_pos": [
        0.2,
        -0.3,
        0.4,
        -0.5,
        0.3,
        -0.4,
        0.5,
        -0.3
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.6,
        -0.6,
        0.7,
        -0.7,
        0.6,
        -0.7,
        0.7,
        -0.6
      ],
      "d_left": [
        0.6,
        0.5,
        0.7,
        0.4,
        0.6,
        0.5,
        0.7,
        0.4
      ],
      "d_right": [
        0.6,
        0.5,
        0.7,
        0.4,
        0.6,
        0.5,
        0.7,
        0.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9]\n\n\n        - The distance to the right wall is: [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 15,
      "s_pos": [
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10
      ],
      "d_pos": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.9,
        0.9,
        0.9,
        0.9,
        0.9,
        0.9,
        0.9,
        0.9,
        0.9,
        0.9,
        0.9,
        0.9,
        0.9,
        0.9,
        0.9
      ],
      "d_right": [
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.3, 0.35, 0.33, 0.32, 0.31]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6.7, 6.5, 6.2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.3, 0.4, 0.35, 0.32, 0.3]\n\n        \n        - The distance to the left wall is: [0.35, 0.34, 0.36, 0.38, 0.39]\n\n\n        - The distance to the right wall is: [4.65, 4.66, 4.64, 4.62, 4.61]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 5,
      "s_pos": [
        10,
        15,
        20,
        25,
        30
      ],
      "d_pos": [
        0.3,
        0.35,
        0.33,
        0.32,
        0.31
      ],
      "s_speed": [
        6,
        6.5,
        6.7,
        6.5,
        6.2
      ],
      "d_speed": [
        0.3,
        0.4,
        0.35,
        0.32,
        0.3
      ],
      "d_left": [
        0.35,
        0.34,
        0.36,
        0.38,
        0.39
      ],
      "d_right": [
        4.65,
        4.66,
        4.64,
        4.62,
        4.61
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10.5, 10.4, 10.3, 10.2, 10.1, 10.0, 9.9, 9.8, 9.7, 9.6, 9.5, 9.4]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.2, 0.15, -0.1, 0.2, -0.15, 0.1, -0.2, 0.15, -0.1, 0.2, -0.15]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.3, -0.3, 0.3, -0.3, 0.3, -0.3, 0.3, -0.3, 0.3, -0.3, 0.3, -0.3]\n\n        \n        - The distance to the left wall is: [0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6]\n\n\n        - The distance to the right wall is: [0.5, 0.4, 0.5, 0.4, 0.5, 0.4, 0.5, 0.4, 0.5, 0.4, 0.5, 0.4]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 12,
      "s_pos": [
        10.5,
        10.4,
        10.3,
        10.2,
        10.1,
        10.0,
        9.9,
        9.8,
        9.7,
        9.6,
        9.5,
        9.4
      ],
      "d_pos": [
        0.1,
        -0.2,
        0.15,
        -0.1,
        0.2,
        -0.15,
        0.1,
        -0.2,
        0.15,
        -0.1,
        0.2,
        -0.15
      ],
      "s_speed": [
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0
      ],
      "d_speed": [
        0.3,
        -0.3,
        0.3,
        -0.3,
        0.3,
        -0.3,
        0.3,
        -0.3,
        0.3,
        -0.3,
        0.3,
        -0.3
      ],
      "d_left": [
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6
      ],
      "d_right": [
        0.5,
        0.4,
        0.5,
        0.4,
        0.5,
        0.4,
        0.5,
        0.4,
        0.5,
        0.4,
        0.5,
        0.4
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 11, 17, 23, 29, 35, 41]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.55, 1.5, 1.45, 1.4, 1.35, 1.3]\n\n\n        - The distance to the right wall is: [1.5, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 8,
      "s_pos": [
        0,
        5,
        11,
        17,
        23,
        29,
        35,
        41
      ],
      "d_pos": [
        0.1,
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1
      ],
      "s_speed": [
        5,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1
      ],
      "d_left": [
        1.5,
        1.6,
        1.55,
        1.5,
        1.45,
        1.4,
        1.35,
        1.3
      ],
      "d_right": [
        1.5,
        1.4,
        1.45,
        1.5,
        1.55,
        1.6,
        1.65,
        1.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 4.8, 4.6, 4.4, 4.2, 4]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.1, 0.05, 0, -0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1, -1, -1, -1, -1, -1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.1, -0.1, -0.15, -0.2, -0.25]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.6, 1.7, 1.8, 1.9]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.4, 1.3, 1.2, 1.1]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 6,
      "s_pos": [
        5,
        4.8,
        4.6,
        4.4,
        4.2,
        4
      ],
      "d_pos": [
        0.1,
        0.15,
        0.1,
        0.05,
        0,
        -0.05
      ],
      "s_speed": [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      ],
      "d_speed": [
        0.2,
        0.1,
        -0.1,
        -0.15,
        -0.2,
        -0.25
      ],
      "d_left": [
        1.5,
        1.4,
        1.6,
        1.7,
        1.8,
        1.9
      ],
      "d_right": [
        1.5,
        1.6,
        1.4,
        1.3,
        1.2,
        1.1
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.2, 0.1, 0.0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.1, 0.1, 0.1, 0.0]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.4, 1.3, 1.2]\n\n\n        - The distance to the right wall is: [1.1, 1.1, 1.0, 1.1, 1.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 5,
      "s_pos": [
        10,
        15,
        20,
        25,
        30
      ],
      "d_pos": [
        0.1,
        0.1,
        0.2,
        0.1,
        0.0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.2,
        0.1,
        0.1,
        0.1,
        0.0
      ],
      "d_left": [
        1.2,
        1.3,
        1.4,
        1.3,
        1.2
      ],
      "d_right": [
        1.1,
        1.1,
        1.0,
        1.1,
        1.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 4 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [2, 3, 4, 5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, -0.5, 0.4, -0.4]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, 0.7, 0.6, 0.7]\n\n        \n        - The distance to the left wall is: [1.5, 1.2, 1.8, 1.3]\n\n\n        - The distance to the right wall is: [1.7, 1.9, 1.4, 1.8]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 4,
      "s_pos": [
        2,
        3,
        4,
        5
      ],
      "d_pos": [
        0.5,
        -0.5,
        0.4,
        -0.4
      ],
      "s_speed": [
        6,
        6.5,
        6,
        6.5
      ],
      "d_speed": [
        0.6,
        0.7,
        0.6,
        0.7
      ],
      "d_left": [
        1.5,
        1.2,
        1.8,
        1.3
      ],
      "d_right": [
        1.7,
        1.9,
        1.4,
        1.8
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1, 1.1, 1.1, 1, 1, 1.1, 1.1, 1, 1, 1.1]\n\n\n        - The distance to the right wall is: [1.2, 1.1, 1.1, 1.2, 1.2, 1.1, 1.1, 1.2, 1.2, 1.1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 10,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1,
        1.1,
        1.1,
        1,
        1,
        1.1,
        1.1,
        1,
        1,
        1.1
      ],
      "d_right": [
        1.2,
        1.1,
        1.1,
        1.2,
        1.2,
        1.1,
        1.1,
        1.2,
        1.2,
        1.1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35, 40, 45, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n\n        - The distance to the right wall is: [3.8, 3.8, 3.8, 3.8, 3.8, 3.8, 3.8, 3.8, 3.8]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 9,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50
      ],
      "d_pos": [
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "d_right": [
        3.8,
        3.8,
        3.8,
        3.8,
        3.8,
        3.8,
        3.8,
        3.8,
        3.8
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 10, 10, 10, 10, 10, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\n\n\n        - The distance to the right wall is: [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 7,
      "s_pos": [
        10,
        10,
        10,
        10,
        10,
        10,
        10
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8
      ],
      "d_right": [
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [3.5, 3.4, 3.3, 3.2, 3.1, 3.0, 2.9, 2.8, 2.7, 2.6, 2.5, 2.4, 2.3]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2, -0.25, -0.2, -0.15, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1]\n\n\n        - The distance to the right wall is: [1.0, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7, 0.65, 0.6, 0.55, 0.5, 0.45, 0.4]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 13,
      "s_pos": [
        3.5,
        3.4,
        3.3,
        3.2,
        3.1,
        3.0,
        2.9,
        2.8,
        2.7,
        2.6,
        2.5,
        2.4,
        2.3
      ],
      "d_pos": [
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25,
        -0.2,
        -0.15,
        -0.1
      ],
      "s_speed": [
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.5,
        0.55,
        0.6,
        0.65,
        0.7,
        0.75,
        0.8,
        0.85,
        0.9,
        0.95,
        1.0,
        1.05,
        1.1
      ],
      "d_right": [
        1.0,
        0.95,
        0.9,
        0.85,
        0.8,
        0.75,
        0.7,
        0.65,
        0.6,
        0.55,
        0.5,
        0.45,
        0.4
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.1, 0.0, -0.1, 0.1, 0.2, -0.2, 0.0, 0.1, -0.1, 0.0, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.5, 5.6, 5.7, 5.6, 5.5, 5.4, 5.5, 5.6, 5.7, 5.6, 5.5, 5.4]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.3, 0.2, 0.1, 0.0, 0.2, 0.3, 0.4, 0.1, 0.2, 0.0, 0.1, 0.3]\n\n        \n        - The distance to the left wall is: [1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2]\n\n\n        - The distance to the right wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 12,
      "s_pos": [
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55,
        60
      ],
      "d_pos": [
        0.2,
        0.1,
        0.0,
        -0.1,
        0.1,
        0.2,
        -0.2,
        0.0,
        0.1,
        -0.1,
        0.0,
        0.2
      ],
      "s_speed": [
        5.5,
        5.6,
        5.7,
        5.6,
        5.5,
        5.4,
        5.5,
        5.6,
        5.7,
        5.6,
        5.5,
        5.4
      ],
      "d_speed": [
        0.3,
        0.2,
        0.1,
        0.0,
        0.2,
        0.3,
        0.4,
        0.1,
        0.2,
        0.0,
        0.1,
        0.3
      ],
      "d_left": [
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2
      ],
      "d_right": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 12,
      "s_pos": [
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55,
        60
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 4 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.1, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6.8, 7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.1, 0.2, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.3, 1.7, 1.6]\n\n\n        - The distance to the right wall is: [1.2, 1.4, 1.1, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 4,
      "s_pos": [
        10,
        15,
        20,
        25
      ],
      "d_pos": [
        0.1,
        0.2,
        0.1,
        0.2
      ],
      "s_speed": [
        6,
        6.5,
        6.8,
        7
      ],
      "d_speed": [
        0.2,
        0.1,
        0.2,
        0.1
      ],
      "d_left": [
        1.5,
        1.3,
        1.7,
        1.6
      ],
      "d_right": [
        1.2,
        1.4,
        1.1,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.1, 0.05, 0.1, 0.15, 0.1, 0.05, 0.1, 0.15, 0.1, 0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6.2, 6.8, 6.5, 6.7, 6.3, 6.9, 6.6, 6.4, 6.7, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.15, 0.1, 0.2, 0.15, 0.1, 0.2, 0.15, 0.1, 0.2, 0.15]\n\n        \n        - The distance to the left wall is: [1, 1.1, 1.2, 1.1, 1.2, 1.1, 1, 1.1, 1.2, 1.1, 1.2, 1.1]\n\n\n        - The distance to the right wall is: [0.9, 0.8, 0.7, 0.8, 0.7, 0.8, 0.9, 0.8, 0.7, 0.8, 0.7, 0.8]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 12,
      "s_pos": [
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55,
        60
      ],
      "d_pos": [
        0.1,
        0.15,
        0.1,
        0.05,
        0.1,
        0.15,
        0.1,
        0.05,
        0.1,
        0.15,
        0.1,
        0.05
      ],
      "s_speed": [
        6,
        6.5,
        6.2,
        6.8,
        6.5,
        6.7,
        6.3,
        6.9,
        6.6,
        6.4,
        6.7,
        6.5
      ],
      "d_speed": [
        0.1,
        0.2,
        0.15,
        0.1,
        0.2,
        0.15,
        0.1,
        0.2,
        0.15,
        0.1,
        0.2,
        0.15
      ],
      "d_left": [
        1,
        1.1,
        1.2,
        1.1,
        1.2,
        1.1,
        1,
        1.1,
        1.2,
        1.1,
        1.2,
        1.1
      ],
      "d_right": [
        0.9,
        0.8,
        0.7,
        0.8,
        0.7,
        0.8,
        0.9,
        0.8,
        0.7,
        0.8,
        0.7,
        0.8
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 6, 6, 5, 5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 5,
      "s_pos": [
        10,
        15,
        20,
        25,
        30
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        5,
        6,
        6,
        5,
        5
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.2, 1.2, 1.2]\n\n\n        - The distance to the right wall is: [1.2, 1.2, 1.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 3,
      "s_pos": [
        10,
        15,
        20
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6.5,
        7
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.2,
        1.2,
        1.2
      ],
      "d_right": [
        1.2,
        1.2,
        1.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [100, 100, 100, 100, 100, 100]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 6,
      "s_pos": [
        100,
        100,
        100,
        100,
        100,
        100
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15, 20, 25, 30, 35]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.35, -0.36, -0.37, -0.38, -0.39, -0.39, -0.39]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.35, 0.34, 0.33, 0.32, 0.31, 0.31, 0.31]\n\n\n        - The distance to the right wall is: [3.65, 3.66, 3.67, 3.68, 3.69, 3.69, 3.69]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 7,
      "s_pos": [
        5,
        10,
        15,
        20,
        25,
        30,
        35
      ],
      "d_pos": [
        -0.35,
        -0.36,
        -0.37,
        -0.38,
        -0.39,
        -0.39,
        -0.39
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.35,
        0.34,
        0.33,
        0.32,
        0.31,
        0.31,
        0.31
      ],
      "d_right": [
        3.65,
        3.66,
        3.67,
        3.68,
        3.69,
        3.69,
        3.69
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 9.8, 9.6, 9.4, 9.2, 9, 8.8, 8.6, 8.4]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [-0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3]\n\n\n        - The distance to the right wall is: [1, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 9,
      "s_pos": [
        10,
        9.8,
        9.6,
        9.4,
        9.2,
        9,
        8.8,
        8.6,
        8.4
      ],
      "d_pos": [
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2
      ],
      "s_speed": [
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2
      ],
      "d_speed": [
        -0.05,
        -0.05,
        -0.05,
        -0.05,
        -0.05,
        -0.05,
        -0.05,
        -0.05,
        -0.05
      ],
      "d_left": [
        1.5,
        1.6,
        1.7,
        1.8,
        1.9,
        2,
        2.1,
        2.2,
        2.3
      ],
      "d_right": [
        1,
        0.9,
        0.8,
        0.7,
        0.6,
        0.5,
        0.4,
        0.3,
        0.2
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 15,
      "s_pos": [
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 11, 12, 13, 14, 15, 16, 17]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.2, 0.1, 0.05, 0.0, 0.05, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [4.5, 5.0, 5.5, 5.0, 4.5, 5.0, 5.5, 5.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.3, 0.1, 0.0, 0.1, 0.2, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5]\n\n\n        - The distance to the right wall is: [1.0, 1.1, 0.9, 1.0, 1.1, 1.0, 0.9, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 8,
      "s_pos": [
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17
      ],
      "d_pos": [
        0.1,
        0.15,
        0.2,
        0.1,
        0.05,
        0.0,
        0.05,
        0.1
      ],
      "s_speed": [
        4.5,
        5.0,
        5.5,
        5.0,
        4.5,
        5.0,
        5.5,
        5.0
      ],
      "d_speed": [
        0.1,
        0.2,
        0.3,
        0.1,
        0.0,
        0.1,
        0.2,
        0.1
      ],
      "d_left": [
        1.5,
        1.4,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5
      ],
      "d_right": [
        1.0,
        1.1,
        0.9,
        1.0,
        1.1,
        1.0,
        0.9,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3, 4.5, 6, 7.5, 9]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.2, 0.3, -0.3, 0.2, -0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6, 5.5, 6, 6.5, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.4, 0.6, 0.5, 0.7, 0.4, 0.6, 0.5]\n\n        \n        - The distance to the left wall is: [1.5, 1.3, 1.6, 1.2, 1.4, 1.3, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.7, 1.4, 1.8, 1.6, 1.7, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 7,
      "s_pos": [
        0,
        1.5,
        3,
        4.5,
        6,
        7.5,
        9
      ],
      "d_pos": [
        0.1,
        -0.2,
        0.3,
        -0.3,
        0.2,
        -0.1,
        0.1
      ],
      "s_speed": [
        6,
        6.5,
        6,
        5.5,
        6,
        6.5,
        6
      ],
      "d_speed": [
        0.4,
        0.6,
        0.5,
        0.7,
        0.4,
        0.6,
        0.5
      ],
      "d_left": [
        1.5,
        1.3,
        1.6,
        1.2,
        1.4,
        1.3,
        1.5
      ],
      "d_right": [
        1.5,
        1.7,
        1.4,
        1.8,
        1.6,
        1.7,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n        \n        - The distance to the left wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n\n        - The distance to the right wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 15,
      "s_pos": [
        0,
        0.5,
        1.0,
        1.5,
        2.0,
        2.5,
        3.0,
        3.5,
        4.0,
        4.5,
        5.0,
        5.5,
        6.0,
        6.5,
        7.0
      ],
      "d_pos": [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "s_speed": [
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0
      ],
      "d_speed": [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "d_left": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "d_right": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, -0.1, 0, 0.1, -0.1, 0, 0.1, 0, -0.1, 0.1, 0, 0, -0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.5, 1.7, 1.5, 1.6, 1.5, 1.6, 1.5, 1.6, 1.5, 1.6, 1.5, 1.6, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.4, 1.5, 1.3, 1.5, 1.4, 1.5, 1.4, 1.5, 1.4, 1.5, 1.4, 1.5, 1.4, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 15,
      "s_pos": [
        0,
        0.5,
        1,
        1.5,
        2,
        2.5,
        3,
        3.5,
        4,
        4.5,
        5,
        5.5,
        6,
        6.5,
        7
      ],
      "d_pos": [
        0.1,
        0.1,
        -0.1,
        0,
        0.1,
        -0.1,
        0,
        0.1,
        0,
        -0.1,
        0.1,
        0,
        0,
        -0.1,
        0.1
      ],
      "s_speed": [
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.5,
        1.6,
        1.5,
        1.7,
        1.5,
        1.6,
        1.5,
        1.6,
        1.5,
        1.6,
        1.5,
        1.6,
        1.5,
        1.6,
        1.5
      ],
      "d_right": [
        1.5,
        1.4,
        1.5,
        1.3,
        1.5,
        1.4,
        1.5,
        1.4,
        1.5,
        1.4,
        1.5,
        1.4,
        1.5,
        1.4,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0.1, 0.0, -0.05, -0.1, 0.05, 0.0, 0.1, -0.05, 0.0, 0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6, 5.5, 6, 6.5, 6, 5.5, 6, 6.5, 6, 5.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.1, 0.15, 0.1, 0.2, 0.1, 0.15, 0.1, 0.2, 0.1, 0.15]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4]\n\n\n        - The distance to the right wall is: [1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 12,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55
      ],
      "d_pos": [
        0.1,
        0.05,
        0.1,
        0.0,
        -0.05,
        -0.1,
        0.05,
        0.0,
        0.1,
        -0.05,
        0.0,
        0.05
      ],
      "s_speed": [
        6,
        6.5,
        6,
        5.5,
        6,
        6.5,
        6,
        5.5,
        6,
        6.5,
        6,
        5.5
      ],
      "d_speed": [
        0.1,
        0.2,
        0.1,
        0.15,
        0.1,
        0.2,
        0.1,
        0.15,
        0.1,
        0.2,
        0.1,
        0.15
      ],
      "d_left": [
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4
      ],
      "d_right": [
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 9.5, 9, 8.5, 8, 7.5, 7, 6.5, 6, 5.5, 5, 4.5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2, -0.25, -0.3, -0.35]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15]\n\n        \n        - The distance to the left wall is: [0.8, 0.85, 0.9, 0.95, 1, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35]\n\n\n        - The distance to the right wall is: [0.8, 0.75, 0.7, 0.65, 0.6, 0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 12,
      "s_pos": [
        10,
        9.5,
        9,
        8.5,
        8,
        7.5,
        7,
        6.5,
        6,
        5.5,
        5,
        4.5
      ],
      "d_pos": [
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25,
        -0.3,
        -0.35
      ],
      "s_speed": [
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5
      ],
      "d_speed": [
        0.4,
        0.35,
        0.3,
        0.25,
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15
      ],
      "d_left": [
        0.8,
        0.85,
        0.9,
        0.95,
        1,
        1.05,
        1.1,
        1.15,
        1.2,
        1.25,
        1.3,
        1.35
      ],
      "d_right": [
        0.8,
        0.75,
        0.7,
        0.65,
        0.6,
        0.55,
        0.5,
        0.45,
        0.4,
        0.35,
        0.3,
        0.25
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 4.8, 4.6, 4.4, 4.2, 4.0, 3.8, 3.6, 3.4, 3.2, 3.0, 2.8, 2.6]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.25, 0.28, 0.3, 0.26, 0.22, 0.2, 0.18, 0.15, 0.1, 0.05, 0.02, 0.0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.15, 0.1, 0.05, -0.05, -0.1, -0.15, -0.2, -0.15, -0.1, -0.05, 0.0, 0.0]\n\n        \n        - The distance to the left wall is: [1.2, 1.15, 1.1, 1.0, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35, 1.4, 1.45]\n\n\n        - The distance to the right wall is: [0.8, 0.85, 0.9, 1.0, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7, 0.65, 0.6, 0.55]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 13,
      "s_pos": [
        5,
        4.8,
        4.6,
        4.4,
        4.2,
        4.0,
        3.8,
        3.6,
        3.4,
        3.2,
        3.0,
        2.8,
        2.6
      ],
      "d_pos": [
        0.2,
        0.25,
        0.28,
        0.3,
        0.26,
        0.22,
        0.2,
        0.18,
        0.15,
        0.1,
        0.05,
        0.02,
        0.0
      ],
      "s_speed": [
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6
      ],
      "d_speed": [
        0.1,
        0.15,
        0.1,
        0.05,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.15,
        -0.1,
        -0.05,
        0.0,
        0.0
      ],
      "d_left": [
        1.2,
        1.15,
        1.1,
        1.0,
        1.05,
        1.1,
        1.15,
        1.2,
        1.25,
        1.3,
        1.35,
        1.4,
        1.45
      ],
      "d_right": [
        0.8,
        0.85,
        0.9,
        1.0,
        0.95,
        0.9,
        0.85,
        0.8,
        0.75,
        0.7,
        0.65,
        0.6,
        0.55
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3, 4.5, 6, 7.5, 9, 10.5, 12, 13.5, 15, 16.5, 18]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, -0.05, 0.1, -0.1, 0.05, 0, -0.05, 0.05, -0.1, 0.1, 0.05, -0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 5.5, 6, 6.5, 7, 6.5, 6, 5.5, 5, 5.5, 6, 6.5, 7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.1, 0.2, 0.15, 0.1, 0.2, 0.1, 0.15, 0.2, 0.1, 0.2, 0.15]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6]\n\n\n        - The distance to the right wall is: [1.4, 1.5, 1.6, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 13,
      "s_pos": [
        0,
        1.5,
        3,
        4.5,
        6,
        7.5,
        9,
        10.5,
        12,
        13.5,
        15,
        16.5,
        18
      ],
      "d_pos": [
        0.1,
        0.05,
        -0.05,
        0.1,
        -0.1,
        0.05,
        0,
        -0.05,
        0.05,
        -0.1,
        0.1,
        0.05,
        -0.05
      ],
      "s_speed": [
        5,
        5.5,
        6,
        6.5,
        7,
        6.5,
        6,
        5.5,
        5,
        5.5,
        6,
        6.5,
        7
      ],
      "d_speed": [
        0.1,
        0.2,
        0.1,
        0.2,
        0.15,
        0.1,
        0.2,
        0.1,
        0.15,
        0.2,
        0.1,
        0.2,
        0.15
      ],
      "d_left": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6
      ],
      "d_right": [
        1.4,
        1.5,
        1.6,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 11, 12, 13, 14, 15, 16, 17]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\n\n\n        - The distance to the right wall is: [4.7, 4.7, 4.7, 4.7, 4.7, 4.7, 4.7, 4.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 8,
      "s_pos": [
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17
      ],
      "d_pos": [
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3
      ],
      "d_right": [
        4.7,
        4.7,
        4.7,
        4.7,
        4.7,
        4.7,
        4.7,
        4.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\n\n\n        - The distance to the right wall is: [1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 12,
      "s_pos": [
        30,
        30,
        30,
        30,
        30,
        30,
        30,
        30,
        30,
        30,
        30,
        30
      ],
      "d_pos": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8
      ],
      "d_right": [
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [100, 100, 100, 100, 100, 100]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 6,
      "s_pos": [
        100,
        100,
        100,
        100,
        100,
        100
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.35, -0.36, -0.37, -0.35, -0.34, -0.36, -0.38, -0.35]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.0, 6.2, 6.1, 6.0, 6.3, 6.1, 6.2, 6.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.15, 0.1, 0.2, 0.15, 0.1, 0.2]\n\n        \n        - The distance to the left wall is: [0.35, 0.36, 0.37, 0.35, 0.34, 0.36, 0.38, 0.35]\n\n\n        - The distance to the right wall is: [2.65, 2.64, 2.63, 2.65, 2.66, 2.64, 2.62, 2.65]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 8,
      "s_pos": [
        2.0,
        2.5,
        3.0,
        3.5,
        4.0,
        4.5,
        5.0,
        5.5
      ],
      "d_pos": [
        -0.35,
        -0.36,
        -0.37,
        -0.35,
        -0.34,
        -0.36,
        -0.38,
        -0.35
      ],
      "s_speed": [
        6.0,
        6.2,
        6.1,
        6.0,
        6.3,
        6.1,
        6.2,
        6.0
      ],
      "d_speed": [
        0.1,
        0.2,
        0.15,
        0.1,
        0.2,
        0.15,
        0.1,
        0.2
      ],
      "d_left": [
        0.35,
        0.36,
        0.37,
        0.35,
        0.34,
        0.36,
        0.38,
        0.35
      ],
      "d_right": [
        2.65,
        2.64,
        2.63,
        2.65,
        2.66,
        2.64,
        2.62,
        2.65
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3.1, 4.6, 6.2]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, -0.4, 0.3, -0.5, 0.4]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.5, 6.0, 5.8, 6.2, 5.9]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.7, 0.8, 0.9, 0.7, 0.8]\n\n        \n        - The distance to the left wall is: [1.2, 1.1, 1.3, 1.0, 1.1]\n\n\n        - The distance to the right wall is: [1.3, 1.4, 1.2, 1.5, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 5,
      "s_pos": [
        0,
        1.5,
        3.1,
        4.6,
        6.2
      ],
      "d_pos": [
        0.2,
        -0.4,
        0.3,
        -0.5,
        0.4
      ],
      "s_speed": [
        5.5,
        6.0,
        5.8,
        6.2,
        5.9
      ],
      "d_speed": [
        0.7,
        0.8,
        0.9,
        0.7,
        0.8
      ],
      "d_left": [
        1.2,
        1.1,
        1.3,
        1.0,
        1.1
      ],
      "d_right": [
        1.3,
        1.4,
        1.2,
        1.5,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, -0.05, -0.1, -0.05, 0, 0.05, 0.1, 0.05, 0, -0.05, -0.1, -0.05, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6.8, 7, 6.9, 6.7, 6.5, 6.3, 6.4, 6.6, 6.8, 7, 6.9, 6.8]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.15, 0.1, 0.05, 0.1, 0.15, 0.2, 0.25, 0.2, 0.15, 0.1, 0.05, 0.1, 0.15]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.7, 1.8, 1.7, 1.6, 1.5, 1.4, 1.5, 1.6, 1.7, 1.8, 1.7, 1.6]\n\n\n        - The distance to the right wall is: [1.2, 1.3, 1.4, 1.5, 1.4, 1.3, 1.2, 1.1, 1.2, 1.3, 1.4, 1.5, 1.4, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 14,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13
      ],
      "d_pos": [
        0.1,
        0.05,
        -0.05,
        -0.1,
        -0.05,
        0,
        0.05,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.05,
        0
      ],
      "s_speed": [
        6,
        6.5,
        6.8,
        7,
        6.9,
        6.7,
        6.5,
        6.3,
        6.4,
        6.6,
        6.8,
        7,
        6.9,
        6.8
      ],
      "d_speed": [
        0.2,
        0.15,
        0.1,
        0.05,
        0.1,
        0.15,
        0.2,
        0.25,
        0.2,
        0.15,
        0.1,
        0.05,
        0.1,
        0.15
      ],
      "d_left": [
        1.5,
        1.6,
        1.7,
        1.8,
        1.7,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.7,
        1.8,
        1.7,
        1.6
      ],
      "d_right": [
        1.2,
        1.3,
        1.4,
        1.5,
        1.4,
        1.3,
        1.2,
        1.1,
        1.2,
        1.3,
        1.4,
        1.5,
        1.4,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 15,
      "s_pos": [
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 15,
      "s_pos": [
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [20, 25, 30, 35, 40, 45, 50, 55]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0.02, -0.01, 0.04, 0.08, 0.1, 0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6.2, 6.8, 7, 6.5, 6.3, 6.8]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.15, 0.1, 0.05, 0.1, 0.14, 0.2, 0.15]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.1, 1.4, 1.5, 1.3, 1.2, 1.4]\n\n\n        - The distance to the right wall is: [1.5, 1.4, 1.6, 1.3, 1.2, 1.4, 1.5, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 8,
      "s_pos": [
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55
      ],
      "d_pos": [
        0.1,
        0.05,
        0.02,
        -0.01,
        0.04,
        0.08,
        0.1,
        0.05
      ],
      "s_speed": [
        6,
        6.5,
        6.2,
        6.8,
        7,
        6.5,
        6.3,
        6.8
      ],
      "d_speed": [
        0.2,
        0.15,
        0.1,
        0.05,
        0.1,
        0.14,
        0.2,
        0.15
      ],
      "d_left": [
        1.2,
        1.3,
        1.1,
        1.4,
        1.5,
        1.3,
        1.2,
        1.4
      ],
      "d_right": [
        1.5,
        1.4,
        1.6,
        1.3,
        1.2,
        1.4,
        1.5,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 2, 4]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.2, 1.2, 1.2]\n\n\n        - The distance to the right wall is: [1.2, 1.2, 1.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 3,
      "s_pos": [
        0,
        2,
        4
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0
      ],
      "d_left": [
        1.2,
        1.2,
        1.2
      ],
      "d_right": [
        1.2,
        1.2,
        1.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.2, 0.25, 0.3, 0.2, 0.1, 0.05, 0, -0.05, -0.1, -0.15]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.3, 1.2, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.7, 1.8, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 12,
      "s_pos": [
        50,
        49,
        48,
        47,
        46,
        45,
        44,
        43,
        42,
        41,
        40,
        39
      ],
      "d_pos": [
        0.1,
        0.15,
        0.2,
        0.25,
        0.3,
        0.2,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15
      ],
      "s_speed": [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.5,
        1.4,
        1.3,
        1.2,
        1.1,
        1.2,
        1.3,
        1.4,
        1.5,
        1.6,
        1.7,
        1.8
      ],
      "d_right": [
        1.5,
        1.6,
        1.7,
        1.8,
        1.9,
        1.8,
        1.7,
        1.6,
        1.5,
        1.4,
        1.3,
        1.2
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 0 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.5, 5.8, 6.0, 6.2, 6.5, 6.7, 6.8, 6.9, 7.0, 6.8, 6.7, 6.5, 6.3]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2]\n\n\n        - The distance to the right wall is: [1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 0,
      "data_samples": 13,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        5.5,
        5.8,
        6.0,
        6.2,
        6.5,
        6.7,
        6.8,
        6.9,
        7.0,
        6.8,
        6.7,
        6.5,
        6.3
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2
      ],
      "d_right": [
        1.3,
        1.3,
        1.3,
        1.3,
        1.3,
        1.3,
        1.3,
        1.3,
        1.3,
        1.3,
        1.3,
        1.3,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 50, 50, 50, 50, 50, 50, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n\n        - The distance to the right wall is: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 8,
      "s_pos": [
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "d_right": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3.1, 4.6, 6.2, 7.7, 9.3, 10.8, 12.4, 13.9, 15.5, 17.0, 18.6]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.0, -0.1, 0.0, 0.1, 0.0, -0.1, 0.0, 0.1, -0.1, 0.0, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 5.2, 5.1, 5.3, 5.2, 5.3, 5.1, 5.2, 5.3, 5.2, 5.3, 5.1, 5.2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.1, 0.2, 0.3, 0.1, 0.2, 0.3, 0.1, 0.2, 0.3, 0.1, 0.2]\n\n        \n        - The distance to the left wall is: [1, 1.2, 1.1, 1.2, 1.3, 1.1, 1.2, 1.3, 1.1, 1.2, 1.3, 1.1, 1.2]\n\n\n        - The distance to the right wall is: [1.5, 1.3, 1.4, 1.3, 1.2, 1.4, 1.3, 1.2, 1.4, 1.3, 1.2, 1.4, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 13,
      "s_pos": [
        0,
        1.5,
        3.1,
        4.6,
        6.2,
        7.7,
        9.3,
        10.8,
        12.4,
        13.9,
        15.5,
        17.0,
        18.6
      ],
      "d_pos": [
        0.1,
        0.2,
        0.0,
        -0.1,
        0.0,
        0.1,
        0.0,
        -0.1,
        0.0,
        0.1,
        -0.1,
        0.0,
        0.1
      ],
      "s_speed": [
        5,
        5.2,
        5.1,
        5.3,
        5.2,
        5.3,
        5.1,
        5.2,
        5.3,
        5.2,
        5.3,
        5.1,
        5.2
      ],
      "d_speed": [
        0.2,
        0.3,
        0.1,
        0.2,
        0.3,
        0.1,
        0.2,
        0.3,
        0.1,
        0.2,
        0.3,
        0.1,
        0.2
      ],
      "d_left": [
        1,
        1.2,
        1.1,
        1.2,
        1.3,
        1.1,
        1.2,
        1.3,
        1.1,
        1.2,
        1.3,
        1.1,
        1.2
      ],
      "d_right": [
        1.5,
        1.3,
        1.4,
        1.3,
        1.2,
        1.4,
        1.3,
        1.2,
        1.4,
        1.3,
        1.2,
        1.4,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 13 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.0, -0.1, 0.0, 0.1, 0.0, -0.1, 0.0, 0.1, 0.0, -0.1, 0.0, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, -0.1, 0.1, -0.1, 0.1, -0.1, 0.1, -0.1, 0.1, -0.1, 0.1, -0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.8, 0.9, 0.8, 0.9, 0.8, 0.9, 0.8, 0.9, 0.8, 0.9, 0.8, 0.9, 0.8]\n\n\n        - The distance to the right wall is: [1.2, 1.1, 1.2, 1.1, 1.2, 1.1, 1.2, 1.1, 1.2, 1.1, 1.2, 1.1, 1.2]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 13,
      "data_samples": 13,
      "s_pos": [
        10,
        9,
        8,
        7,
        6,
        5,
        4,
        3,
        2,
        1,
        0,
        -1,
        -2
      ],
      "d_pos": [
        0.1,
        0.0,
        -0.1,
        0.0,
        0.1,
        0.0,
        -0.1,
        0.0,
        0.1,
        0.0,
        -0.1,
        0.0,
        0.1
      ],
      "s_speed": [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      ],
      "d_speed": [
        0.1,
        -0.1,
        0.1,
        -0.1,
        0.1,
        -0.1,
        0.1,
        -0.1,
        0.1,
        -0.1,
        0.1,
        -0.1,
        0.1
      ],
      "d_left": [
        0.8,
        0.9,
        0.8,
        0.9,
        0.8,
        0.9,
        0.8,
        0.9,
        0.8,
        0.9,
        0.8,
        0.9,
        0.8
      ],
      "d_right": [
        1.2,
        1.1,
        1.2,
        1.1,
        1.2,
        1.1,
        1.2,
        1.1,
        1.2,
        1.1,
        1.2,
        1.1,
        1.2
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 49, 48, 47, 46]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.25, 0.3, 0.35, 0.4]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-2, -2, -2, -2, -2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1, 1.2, 1.3, 1.4, 1.5]\n\n\n        - The distance to the right wall is: [0.8, 0.6, 0.5, 0.4, 0.3]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 5,
      "s_pos": [
        50,
        49,
        48,
        47,
        46
      ],
      "d_pos": [
        0.2,
        0.25,
        0.3,
        0.35,
        0.4
      ],
      "s_speed": [
        -2,
        -2,
        -2,
        -2,
        -2
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1,
        1.2,
        1.3,
        1.4,
        1.5
      ],
      "d_right": [
        0.8,
        0.6,
        0.5,
        0.4,
        0.3
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 8,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.35, 0.3, 0.32, 0.33, 0.34]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.35, 0.35, 0.35, 0.35, 0.35]\n\n\n        - The distance to the right wall is: [3.65, 3.65, 3.65, 3.65, 3.65]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 5,
      "s_pos": [
        10,
        15,
        20,
        25,
        30
      ],
      "d_pos": [
        0.35,
        0.3,
        0.32,
        0.33,
        0.34
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.35,
        0.35,
        0.35,
        0.35,
        0.35
      ],
      "d_right": [
        3.65,
        3.65,
        3.65,
        3.65,
        3.65
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, -0.5, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.6, 0.6]\n\n        \n        - The distance to the left wall is: [1.5, 0.3, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 2.7, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 3,
      "s_pos": [
        10,
        15,
        20
      ],
      "d_pos": [
        0.5,
        -0.5,
        0.5
      ],
      "s_speed": [
        6,
        6,
        6
      ],
      "d_speed": [
        0.6,
        -0.6,
        0.6
      ],
      "d_left": [
        1.5,
        0.3,
        1.5
      ],
      "d_right": [
        1.5,
        2.7,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 2.5, 5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25, 27.5, 30, 32.5, 35]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, -0.05, -0.1, -0.05, 0, 0.05, 0.1, 0.05, -0.05, -0.1, -0.05, 0, 0.05, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.2, 0.1, 0, -0.1, -0.2, -0.1, 0, 0.1, 0.2, 0.1, 0, -0.1, -0.2]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 15,
      "s_pos": [
        0,
        2.5,
        5,
        7.5,
        10,
        12.5,
        15,
        17.5,
        20,
        22.5,
        25,
        27.5,
        30,
        32.5,
        35
      ],
      "d_pos": [
        0.1,
        0.05,
        -0.05,
        -0.1,
        -0.05,
        0,
        0.05,
        0.1,
        0.05,
        -0.05,
        -0.1,
        -0.05,
        0,
        0.05,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.2,
        0.2,
        0.1,
        0,
        -0.1,
        -0.2,
        -0.1,
        0,
        0.1,
        0.2,
        0.1,
        0,
        -0.1,
        -0.2
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.2, 0.15, 0.2, 0.1, 0.15, 0.2, 0.1, 0.15, 0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 5.5, 5.2, 5.7, 6, 5.8, 6.2, 5.5, 5.9, 6.1, 5.3, 5.6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.25, 0.3, 0.2, 0.25, 0.3, 0.2, 0.25, 0.3, 0.2, 0.25, 0.3]\n\n        \n        - The distance to the left wall is: [1, 1.2, 1.1, 1.3, 1.2, 1.4, 1.3, 1.5, 1.4, 1.3, 1.5, 1.4]\n\n\n        - The distance to the right wall is: [1.5, 1.3, 1.4, 1.2, 1.3, 1.1, 1.2, 1, 1.1, 1.2, 1, 1.1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 12,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55
      ],
      "d_pos": [
        0.1,
        0.1,
        0.2,
        0.15,
        0.2,
        0.1,
        0.15,
        0.2,
        0.1,
        0.15,
        0.2,
        0.1
      ],
      "s_speed": [
        5,
        5.5,
        5.2,
        5.7,
        6,
        5.8,
        6.2,
        5.5,
        5.9,
        6.1,
        5.3,
        5.6
      ],
      "d_speed": [
        0.2,
        0.25,
        0.3,
        0.2,
        0.25,
        0.3,
        0.2,
        0.25,
        0.3,
        0.2,
        0.25,
        0.3
      ],
      "d_left": [
        1,
        1.2,
        1.1,
        1.3,
        1.2,
        1.4,
        1.3,
        1.5,
        1.4,
        1.3,
        1.5,
        1.4
      ],
      "d_right": [
        1.5,
        1.3,
        1.4,
        1.2,
        1.3,
        1.1,
        1.2,
        1,
        1.1,
        1.2,
        1,
        1.1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 13,
      "s_pos": [
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10
      ],
      "d_pos": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 4 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 9, 8, 7]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.1, 0.0, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-2, -2, -2, -2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.5, 0.6, 0.7, 0.8]\n\n\n        - The distance to the right wall is: [0.7, 0.8, 0.9, 1.0]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: True\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 4,
      "s_pos": [
        10,
        9,
        8,
        7
      ],
      "d_pos": [
        0.2,
        0.1,
        0.0,
        -0.1
      ],
      "s_speed": [
        -2,
        -2,
        -2,
        -2
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.5,
        0.6,
        0.7,
        0.8
      ],
      "d_right": [
        0.7,
        0.8,
        0.9,
        1.0
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": true
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.25, 0.26, 0.27, 0.28, 0.29, 0.28, 0.27, 0.26, 0.25, 0.24]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35]\n\n\n        - The distance to the right wall is: [2.15, 2.15, 2.15, 2.15, 2.15, 2.15, 2.15, 2.15, 2.15, 2.15]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 10,
      "s_pos": [
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19
      ],
      "d_pos": [
        0.25,
        0.26,
        0.27,
        0.28,
        0.29,
        0.28,
        0.27,
        0.26,
        0.25,
        0.24
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.35,
        0.35,
        0.35,
        0.35,
        0.35,
        0.35,
        0.35,
        0.35,
        0.35,
        0.35
      ],
      "d_right": [
        2.15,
        2.15,
        2.15,
        2.15,
        2.15,
        2.15,
        2.15,
        2.15,
        2.15,
        2.15
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 6, 7, 8, 9, 10, 11, 12, 13]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.1, 0.0, -0.1, 0.0, 0.1, 0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [4, 5, 5, 6, 6, 5, 5, 6, 5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.1, 0.0, -0.1, 0.0, 0.1, 0.2, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.5, 1.4, 1.5, 1.4, 1.5, 1.6, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.4, 1.5, 1.6, 1.5, 1.6, 1.5, 1.4, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 9,
      "s_pos": [
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13
      ],
      "d_pos": [
        0.1,
        0.2,
        0.1,
        0.0,
        -0.1,
        0.0,
        0.1,
        0.2,
        0.1
      ],
      "s_speed": [
        4,
        5,
        5,
        6,
        6,
        5,
        5,
        6,
        5
      ],
      "d_speed": [
        0.1,
        0.2,
        0.1,
        0.0,
        -0.1,
        0.0,
        0.1,
        0.2,
        0.1
      ],
      "d_left": [
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5
      ],
      "d_right": [
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 4 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 9, 8, 7]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.1, 0.0, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-2, -2, -2, -2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.5, 0.6, 0.7, 0.8]\n\n\n        - The distance to the right wall is: [0.7, 0.8, 0.9, 1.0]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: True\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 4,
      "s_pos": [
        10,
        9,
        8,
        7
      ],
      "d_pos": [
        0.2,
        0.1,
        0.0,
        -0.1
      ],
      "s_speed": [
        -2,
        -2,
        -2,
        -2
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.5,
        0.6,
        0.7,
        0.8
      ],
      "d_right": [
        0.7,
        0.8,
        0.9,
        1.0
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": true
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.1, 0.0, -0.1, -0.2, -0.1, 0.0, 0.1, 0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.1, 0.0, -0.1, -0.2, -0.1, 0.0, 0.1, 0.2, 0.1]\n\n        \n        - The distance to the left wall is: [1.0, 1.1, 1.0, 1.0, 0.9, 0.8, 0.9, 1.0, 1.1, 1.2, 1.1]\n\n\n        - The distance to the right wall is: [1.1, 1.0, 1.1, 1.1, 1.2, 1.3, 1.2, 1.1, 1.0, 0.9, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 11,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "d_pos": [
        0.1,
        0.2,
        0.1,
        0.0,
        -0.1,
        -0.2,
        -0.1,
        0.0,
        0.1,
        0.2,
        0.1
      ],
      "s_speed": [
        4,
        5,
        6,
        5,
        6,
        5,
        6,
        5,
        6,
        5,
        6
      ],
      "d_speed": [
        0.1,
        0.2,
        0.1,
        0.0,
        -0.1,
        -0.2,
        -0.1,
        0.0,
        0.1,
        0.2,
        0.1
      ],
      "d_left": [
        1.0,
        1.1,
        1.0,
        1.0,
        0.9,
        0.8,
        0.9,
        1.0,
        1.1,
        1.2,
        1.1
      ],
      "d_right": [
        1.1,
        1.0,
        1.1,
        1.1,
        1.2,
        1.3,
        1.2,
        1.1,
        1.0,
        0.9,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0.1, 0.0, -0.05, -0.1, 0.05, 0.0, 0.1, -0.05, 0.0, 0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6, 5.5, 6, 6.5, 6, 5.5, 6, 6.5, 6, 5.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.1, 0.15, 0.1, 0.2, 0.1, 0.15, 0.1, 0.2, 0.1, 0.15]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4]\n\n\n        - The distance to the right wall is: [1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 12,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55
      ],
      "d_pos": [
        0.1,
        0.05,
        0.1,
        0.0,
        -0.05,
        -0.1,
        0.05,
        0.0,
        0.1,
        -0.05,
        0.0,
        0.05
      ],
      "s_speed": [
        6,
        6.5,
        6,
        5.5,
        6,
        6.5,
        6,
        5.5,
        6,
        6.5,
        6,
        5.5
      ],
      "d_speed": [
        0.1,
        0.2,
        0.1,
        0.15,
        0.1,
        0.2,
        0.1,
        0.15,
        0.1,
        0.2,
        0.1,
        0.15
      ],
      "d_left": [
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4
      ],
      "d_right": [
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [25, 24.5, 24, 23.5, 23, 22.5, 22, 21.5, 21, 20.5, 20, 19.5, 19, 18.5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.1, 0.0, -0.1, -0.2, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.2, 1.25]\n\n\n        - The distance to the right wall is: [1.4, 1.35, 1.3, 1.25, 1.2, 1.15, 1.1, 1.05, 1.0, 0.95, 0.9, 0.85, 0.8, 0.75]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 14,
      "s_pos": [
        25,
        24.5,
        24,
        23.5,
        23,
        22.5,
        22,
        21.5,
        21,
        20.5,
        20,
        19.5,
        19,
        18.5
      ],
      "d_pos": [
        0.2,
        0.1,
        0.0,
        -0.1,
        -0.2,
        -0.3,
        -0.2,
        -0.1,
        0.0,
        0.1,
        0.2,
        0.3,
        0.2,
        0.1
      ],
      "s_speed": [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.6,
        0.65,
        0.7,
        0.75,
        0.8,
        0.85,
        0.9,
        0.95,
        1.0,
        1.05,
        1.1,
        1.15,
        1.2,
        1.25
      ],
      "d_right": [
        1.4,
        1.35,
        1.3,
        1.25,
        1.2,
        1.15,
        1.1,
        1.05,
        1.0,
        0.95,
        0.9,
        0.85,
        0.8,
        0.75
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5.0, 4.7, 4.4, 4.1, 3.8, 3.5, 3.2, 2.9, 2.6, 2.3, 2.0, 1.7, 1.4, 1.1, 0.8]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.15, 0.1, 0.05, 0.0, -0.05, -0.1, -0.15, -0.2, -0.25, -0.3, -0.35, -0.4, -0.45, -0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.8, 0.75, 0.7, 0.65, 0.6, 0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1]\n\n\n        - The distance to the right wall is: [1.2, 1.25, 1.3, 1.35, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7, 1.75, 1.8, 1.85, 1.9]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 15,
      "s_pos": [
        5.0,
        4.7,
        4.4,
        4.1,
        3.8,
        3.5,
        3.2,
        2.9,
        2.6,
        2.3,
        2.0,
        1.7,
        1.4,
        1.1,
        0.8
      ],
      "d_pos": [
        0.2,
        0.15,
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25,
        -0.3,
        -0.35,
        -0.4,
        -0.45,
        -0.5
      ],
      "s_speed": [
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.8,
        0.75,
        0.7,
        0.65,
        0.6,
        0.55,
        0.5,
        0.45,
        0.4,
        0.35,
        0.3,
        0.25,
        0.2,
        0.15,
        0.1
      ],
      "d_right": [
        1.2,
        1.25,
        1.3,
        1.35,
        1.4,
        1.45,
        1.5,
        1.55,
        1.6,
        1.65,
        1.7,
        1.75,
        1.8,
        1.85,
        1.9
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.1, 0.2, -0.2, 0.1, -0.1, 0.2, -0.2, 0.1, -0.1, 0.2, -0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [4, 5, 6, 5, 6, 5, 4, 5, 6, 5, 4, 5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.4, 0.3, 0.4, 0.3, 0.2, 0.3, 0.4, 0.3, 0.2, 0.3]\n\n        \n        - The distance to the left wall is: [1.2, 1.1, 1.3, 1.0, 1.2, 1.1, 1.3, 1.0, 1.2, 1.1, 1.3, 1.0]\n\n\n        - The distance to the right wall is: [1.0, 1.2, 1.0, 1.3, 1.0, 1.2, 1.0, 1.3, 1.0, 1.2, 1.0, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 12,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55
      ],
      "d_pos": [
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.1,
        -0.1,
        0.2,
        -0.2
      ],
      "s_speed": [
        4,
        5,
        6,
        5,
        6,
        5,
        4,
        5,
        6,
        5,
        4,
        5
      ],
      "d_speed": [
        0.2,
        0.3,
        0.4,
        0.3,
        0.4,
        0.3,
        0.2,
        0.3,
        0.4,
        0.3,
        0.2,
        0.3
      ],
      "d_left": [
        1.2,
        1.1,
        1.3,
        1.0,
        1.2,
        1.1,
        1.3,
        1.0,
        1.2,
        1.1,
        1.3,
        1.0
      ],
      "d_right": [
        1.0,
        1.2,
        1.0,
        1.3,
        1.0,
        1.2,
        1.0,
        1.3,
        1.0,
        1.2,
        1.0,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 4 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0, -0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 5.5, 6, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.05, 0]\n\n        \n        - The distance to the left wall is: [0.8, 0.75, 0.7, 0.65]\n\n\n        - The distance to the right wall is: [0.9, 0.85, 0.8, 0.75]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 4,
      "s_pos": [
        10,
        15,
        20,
        25
      ],
      "d_pos": [
        0.1,
        0.05,
        0,
        -0.05
      ],
      "s_speed": [
        5,
        5.5,
        6,
        6.5
      ],
      "d_speed": [
        0.1,
        0.1,
        0.05,
        0
      ],
      "d_left": [
        0.8,
        0.75,
        0.7,
        0.65
      ],
      "d_right": [
        0.9,
        0.85,
        0.8,
        0.75
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.12, 0.08, 0.05, 0.1, 0.15, 0.1, 0.05, 0.08, 0.12, 0.1, 0.07, 0.05, 0.1, 0.12]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.1, 6.2, 6.1, 6, 5.9, 6, 6.1, 6.2, 6.1, 6, 5.9, 6, 6.1, 6.2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.15, 0.1, 0.05, 0.2, 0.25, 0.15, 0.1, 0.05, 0.1, 0.2, 0.15, 0.1, 0.05, 0.2]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.3, 1.5, 1.6, 1.5, 1.4, 1.3, 1.5, 1.5, 1.4, 1.3, 1.5, 1.6, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.7, 1.5, 1.4, 1.5, 1.6, 1.7, 1.5, 1.5, 1.6, 1.7, 1.5, 1.4, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 15,
      "s_pos": [
        0,
        0.5,
        1,
        1.5,
        2,
        2.5,
        3,
        3.5,
        4,
        4.5,
        5,
        5.5,
        6,
        6.5,
        7
      ],
      "d_pos": [
        0.1,
        0.12,
        0.08,
        0.05,
        0.1,
        0.15,
        0.1,
        0.05,
        0.08,
        0.12,
        0.1,
        0.07,
        0.05,
        0.1,
        0.12
      ],
      "s_speed": [
        6,
        6.1,
        6.2,
        6.1,
        6,
        5.9,
        6,
        6.1,
        6.2,
        6.1,
        6,
        5.9,
        6,
        6.1,
        6.2
      ],
      "d_speed": [
        0.2,
        0.15,
        0.1,
        0.05,
        0.2,
        0.25,
        0.15,
        0.1,
        0.05,
        0.1,
        0.2,
        0.15,
        0.1,
        0.05,
        0.2
      ],
      "d_left": [
        1.5,
        1.4,
        1.3,
        1.5,
        1.6,
        1.5,
        1.4,
        1.3,
        1.5,
        1.5,
        1.4,
        1.3,
        1.5,
        1.6,
        1.5
      ],
      "d_right": [
        1.5,
        1.6,
        1.7,
        1.5,
        1.4,
        1.5,
        1.6,
        1.7,
        1.5,
        1.5,
        1.6,
        1.7,
        1.5,
        1.4,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 11,
      "s_pos": [
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.2, 0.1, 0, -0.1, -0.05, 0, 0.05, 0.1, 0.15]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.2, 6.5, 6.3, 6.1, 6, 6.2, 6.4, 6.3, 6.5, 6.1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.25, 0.3, 0.15, 0.1, 0.05, 0.1, 0.15, 0.2, 0.25, 0.2]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.3, 1.5, 1.6, 1.7, 1.6, 1.5, 1.4, 1.3, 1.4]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.7, 1.5, 1.4, 1.3, 1.4, 1.5, 1.6, 1.7, 1.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 11,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50
      ],
      "d_pos": [
        0.1,
        0.15,
        0.2,
        0.1,
        0,
        -0.1,
        -0.05,
        0,
        0.05,
        0.1,
        0.15
      ],
      "s_speed": [
        6,
        6.2,
        6.5,
        6.3,
        6.1,
        6,
        6.2,
        6.4,
        6.3,
        6.5,
        6.1
      ],
      "d_speed": [
        0.2,
        0.25,
        0.3,
        0.15,
        0.1,
        0.05,
        0.1,
        0.15,
        0.2,
        0.25,
        0.2
      ],
      "d_left": [
        1.5,
        1.4,
        1.3,
        1.5,
        1.6,
        1.7,
        1.6,
        1.5,
        1.4,
        1.3,
        1.4
      ],
      "d_right": [
        1.5,
        1.6,
        1.7,
        1.5,
        1.4,
        1.3,
        1.4,
        1.5,
        1.6,
        1.7,
        1.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.4, -0.4, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.6, 0.7]\n\n        \n        - The distance to the left wall is: [0.6, 0.5, 0.4]\n\n\n        - The distance to the right wall is: [0.5, 0.4, 0.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 3,
      "s_pos": [
        0,
        1,
        2
      ],
      "d_pos": [
        0.4,
        -0.4,
        0.5
      ],
      "s_speed": [
        6,
        6,
        6
      ],
      "d_speed": [
        0.6,
        -0.6,
        0.7
      ],
      "d_left": [
        0.6,
        0.5,
        0.4
      ],
      "d_right": [
        0.5,
        0.4,
        0.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 9, 8, 7, 6, 5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.1, 0.1, -0.1, 0.1, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1, -1, -1, -1, -1, -1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.4, -0.4, 0.4, -0.4, 0.4, -0.4]\n\n        \n        - The distance to the left wall is: [0.8, 0.9, 1, 1.1, 1.2, 1.3]\n\n\n        - The distance to the right wall is: [1.2, 1.1, 1, 0.9, 0.8, 0.7]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 6,
      "s_pos": [
        10,
        9,
        8,
        7,
        6,
        5
      ],
      "d_pos": [
        0.1,
        -0.1,
        0.1,
        -0.1,
        0.1,
        -0.1
      ],
      "s_speed": [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      ],
      "d_speed": [
        0.4,
        -0.4,
        0.4,
        -0.4,
        0.4,
        -0.4
      ],
      "d_left": [
        0.8,
        0.9,
        1,
        1.1,
        1.2,
        1.3
      ],
      "d_right": [
        1.2,
        1.1,
        1,
        0.9,
        0.8,
        0.7
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30, 35, 40]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The distance to the left wall is: [2, 2, 2, 2, 2, 2, 2, 2, 2]\n\n\n        - The distance to the right wall is: [2, 2, 2, 2, 2, 2, 2, 2, 2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 9,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "d_left": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "d_right": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n        \n        - The distance to the left wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n\n        - The distance to the right wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 15,
      "s_pos": [
        0,
        0.5,
        1.0,
        1.5,
        2.0,
        2.5,
        3.0,
        3.5,
        4.0,
        4.5,
        5.0,
        5.5,
        6.0,
        6.5,
        7.0
      ],
      "d_pos": [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "s_speed": [
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0
      ],
      "d_speed": [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "d_left": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "d_right": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 11, 12, 13, 14, 15, 16, 17]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\n\n\n        - The distance to the right wall is: [4.7, 4.7, 4.7, 4.7, 4.7, 4.7, 4.7, 4.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 8,
      "s_pos": [
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17
      ],
      "d_pos": [
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3
      ],
      "d_right": [
        4.7,
        4.7,
        4.7,
        4.7,
        4.7,
        4.7,
        4.7,
        4.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 2.5, 5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25, 27.5, 30, 32.5, 35]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, -0.05, -0.1, -0.05, 0, 0.05, 0.1, 0.05, -0.05, -0.1, -0.05, 0, 0.05, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.2, 0.1, 0, -0.1, -0.2, -0.1, 0, 0.1, 0.2, 0.1, 0, -0.1, -0.2]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 15,
      "s_pos": [
        0,
        2.5,
        5,
        7.5,
        10,
        12.5,
        15,
        17.5,
        20,
        22.5,
        25,
        27.5,
        30,
        32.5,
        35
      ],
      "d_pos": [
        0.1,
        0.05,
        -0.05,
        -0.1,
        -0.05,
        0,
        0.05,
        0.1,
        0.05,
        -0.05,
        -0.1,
        -0.05,
        0,
        0.05,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.2,
        0.2,
        0.1,
        0,
        -0.1,
        -0.2,
        -0.1,
        0,
        0.1,
        0.2,
        0.1,
        0,
        -0.1,
        -0.2
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.2, 2.5, 4.0, 5.5, 7.1]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.25, 0.3, 0.15, 0.1, 0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [4.5, 5.0, 5.5, 6.0, 6.5, 7.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.3, 0.35, 0.4, 0.25, 0.2, 0.15]\n\n        \n        - The distance to the left wall is: [0.8, 0.85, 0.9, 0.95, 1.0, 1.05]\n\n\n        - The distance to the right wall is: [1.2, 1.15, 1.1, 1.05, 1.0, 0.95]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 6,
      "s_pos": [
        0,
        1.2,
        2.5,
        4.0,
        5.5,
        7.1
      ],
      "d_pos": [
        0.2,
        0.25,
        0.3,
        0.15,
        0.1,
        0.05
      ],
      "s_speed": [
        4.5,
        5.0,
        5.5,
        6.0,
        6.5,
        7.0
      ],
      "d_speed": [
        0.3,
        0.35,
        0.4,
        0.25,
        0.2,
        0.15
      ],
      "d_left": [
        0.8,
        0.85,
        0.9,
        0.95,
        1.0,
        1.05
      ],
      "d_right": [
        1.2,
        1.15,
        1.1,
        1.05,
        1.0,
        0.95
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 7,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.2, 0.1, 0.0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.1, 0.1, 0.1, 0.0]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.4, 1.3, 1.2]\n\n\n        - The distance to the right wall is: [1.1, 1.1, 1.0, 1.1, 1.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 5,
      "s_pos": [
        10,
        15,
        20,
        25,
        30
      ],
      "d_pos": [
        0.1,
        0.1,
        0.2,
        0.1,
        0.0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.2,
        0.1,
        0.1,
        0.1,
        0.0
      ],
      "d_left": [
        1.2,
        1.3,
        1.4,
        1.3,
        1.2
      ],
      "d_right": [
        1.1,
        1.1,
        1.0,
        1.1,
        1.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 50, 50, 50, 50, 50, 50, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n\n        - The distance to the right wall is: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 8,
      "s_pos": [
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "d_right": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.2, 0.3, -0.4, 0.2, -0.1, 0.4, -0.3, 0.2, -0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6, 5.5, 6, 6.5, 6, 5.5, 6, 6.5, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.7, 0.5, -0.6, 0.7, -0.5, 0.6, -0.7, 0.5, -0.6, 0.7]\n\n        \n        - The distance to the left wall is: [0.8, 0.7, 0.9, 0.6, 0.8, 0.7, 0.9, 0.6, 0.8, 0.7, 0.9]\n\n\n        - The distance to the right wall is: [0.7, 0.8, 0.6, 0.9, 0.7, 0.8, 0.6, 0.9, 0.7, 0.8, 0.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 11,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "d_pos": [
        0.1,
        -0.2,
        0.3,
        -0.4,
        0.2,
        -0.1,
        0.4,
        -0.3,
        0.2,
        -0.2,
        0.1
      ],
      "s_speed": [
        6,
        6.5,
        6,
        5.5,
        6,
        6.5,
        6,
        5.5,
        6,
        6.5,
        6
      ],
      "d_speed": [
        0.6,
        -0.7,
        0.5,
        -0.6,
        0.7,
        -0.5,
        0.6,
        -0.7,
        0.5,
        -0.6,
        0.7
      ],
      "d_left": [
        0.8,
        0.7,
        0.9,
        0.6,
        0.8,
        0.7,
        0.9,
        0.6,
        0.8,
        0.7,
        0.9
      ],
      "d_right": [
        0.7,
        0.8,
        0.6,
        0.9,
        0.7,
        0.8,
        0.6,
        0.9,
        0.7,
        0.8,
        0.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.2, 2.4, 3.6, 4.8, 6.0, 7.2]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.05, 0.1, 0.05, 0, -0.05, 0, 0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.1, 0, -0.1, 0, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.5, 1.6, 1.7, 1.6, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.5, 1.4, 1.3, 1.4, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 7,
      "s_pos": [
        0,
        1.2,
        2.4,
        3.6,
        4.8,
        6.0,
        7.2
      ],
      "d_pos": [
        0.05,
        0.1,
        0.05,
        0,
        -0.05,
        0,
        0.05
      ],
      "s_speed": [
        3.5,
        4.0,
        4.5,
        5.0,
        5.5,
        6.0,
        6.5
      ],
      "d_speed": [
        0.1,
        0.2,
        0.1,
        0,
        -0.1,
        0,
        0.1
      ],
      "d_left": [
        1.5,
        1.4,
        1.5,
        1.6,
        1.7,
        1.6,
        1.5
      ],
      "d_right": [
        1.5,
        1.6,
        1.5,
        1.4,
        1.3,
        1.4,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.3, -0.28, -0.27, -0.25, -0.24, -0.23, -0.22, -0.21, -0.2, -0.18, -0.17, -0.15, -0.14, -0.12]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.1, 6.2, 6.3, 6.1, 6, 6.2, 6.3, 6.1, 6, 6.2, 6.3, 6.1, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.05, 0.05, 0.1, 0.1, 0.05, 0.05, 0.1, 0.1, 0.05, 0.05, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.35, 0.36, 0.37, 0.38, 0.35, 0.36, 0.37, 0.38, 0.35, 0.36, 0.37, 0.38, 0.35, 0.36]\n\n\n        - The distance to the right wall is: [2.5, 2.6, 2.7, 2.8, 2.5, 2.6, 2.7, 2.8, 2.5, 2.6, 2.7, 2.8, 2.5, 2.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 14,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13
      ],
      "d_pos": [
        -0.3,
        -0.28,
        -0.27,
        -0.25,
        -0.24,
        -0.23,
        -0.22,
        -0.21,
        -0.2,
        -0.18,
        -0.17,
        -0.15,
        -0.14,
        -0.12
      ],
      "s_speed": [
        6,
        6.1,
        6.2,
        6.3,
        6.1,
        6,
        6.2,
        6.3,
        6.1,
        6,
        6.2,
        6.3,
        6.1,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.05,
        0.05,
        0.1,
        0.1,
        0.05,
        0.05,
        0.1,
        0.1,
        0.05,
        0.05,
        0.1,
        0.1
      ],
      "d_left": [
        0.35,
        0.36,
        0.37,
        0.38,
        0.35,
        0.36,
        0.37,
        0.38,
        0.35,
        0.36,
        0.37,
        0.38,
        0.35,
        0.36
      ],
      "d_right": [
        2.5,
        2.6,
        2.7,
        2.8,
        2.5,
        2.6,
        2.7,
        2.8,
        2.5,
        2.6,
        2.7,
        2.8,
        2.5,
        2.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3.1, 4.6, 6.2, 7.8, 9.3, 10.9, 12.4, 14.0]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0.2, -0.1, 0.05, -0.15, 0.1, 0.0, -0.05, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.2, 5.3, 5.5, 5.6, 5.4, 5.7, 5.5, 5.6, 5.7, 5.4]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.15, 0.2, 0.1, 0.05, 0.1, 0.15, 0.1, 0.05, 0.1]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.2, 1.3, 1.3, 1.2, 1.3, 1.2, 1.3, 1.2]\n\n\n        - The distance to the right wall is: [1.3, 1.2, 1.3, 1.2, 1.2, 1.3, 1.2, 1.3, 1.2, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 10,
      "s_pos": [
        0,
        1.5,
        3.1,
        4.6,
        6.2,
        7.8,
        9.3,
        10.9,
        12.4,
        14.0
      ],
      "d_pos": [
        0.1,
        0.05,
        0.2,
        -0.1,
        0.05,
        -0.15,
        0.1,
        0.0,
        -0.05,
        0.1
      ],
      "s_speed": [
        5.2,
        5.3,
        5.5,
        5.6,
        5.4,
        5.7,
        5.5,
        5.6,
        5.7,
        5.4
      ],
      "d_speed": [
        0.1,
        0.15,
        0.2,
        0.1,
        0.05,
        0.1,
        0.15,
        0.1,
        0.05,
        0.1
      ],
      "d_left": [
        1.2,
        1.3,
        1.2,
        1.3,
        1.3,
        1.2,
        1.3,
        1.2,
        1.3,
        1.2
      ],
      "d_right": [
        1.3,
        1.2,
        1.3,
        1.2,
        1.2,
        1.3,
        1.2,
        1.3,
        1.2,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 12, 19]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.5, 6.8, 7.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.25, 0.3]\n\n        \n        - The distance to the left wall is: [0.35, 0.3, 0.25]\n\n\n        - The distance to the right wall is: [2.0, 2.1, 2.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 3,
      "s_pos": [
        5,
        12,
        19
      ],
      "d_pos": [
        0.1,
        0.15,
        0.2
      ],
      "s_speed": [
        6.5,
        6.8,
        7.0
      ],
      "d_speed": [
        0.2,
        0.25,
        0.3
      ],
      "d_left": [
        0.35,
        0.3,
        0.25
      ],
      "d_right": [
        2.0,
        2.1,
        2.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3, 4.5, 6, 7.5, 9, 10.5, 12, 13.5, 15, 16.5, 18]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, -0.05, 0.1, -0.1, 0.05, 0, -0.05, 0.05, -0.1, 0.1, 0.05, -0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 5.5, 6, 6.5, 7, 6.5, 6, 5.5, 5, 5.5, 6, 6.5, 7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.1, 0.2, 0.15, 0.1, 0.2, 0.1, 0.15, 0.2, 0.1, 0.2, 0.15]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6]\n\n\n        - The distance to the right wall is: [1.4, 1.5, 1.6, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 13,
      "s_pos": [
        0,
        1.5,
        3,
        4.5,
        6,
        7.5,
        9,
        10.5,
        12,
        13.5,
        15,
        16.5,
        18
      ],
      "d_pos": [
        0.1,
        0.05,
        -0.05,
        0.1,
        -0.1,
        0.05,
        0,
        -0.05,
        0.05,
        -0.1,
        0.1,
        0.05,
        -0.05
      ],
      "s_speed": [
        5,
        5.5,
        6,
        6.5,
        7,
        6.5,
        6,
        5.5,
        5,
        5.5,
        6,
        6.5,
        7
      ],
      "d_speed": [
        0.1,
        0.2,
        0.1,
        0.2,
        0.15,
        0.1,
        0.2,
        0.1,
        0.15,
        0.2,
        0.1,
        0.2,
        0.15
      ],
      "d_left": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6
      ],
      "d_right": [
        1.4,
        1.5,
        1.6,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 11,
      "s_pos": [
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 3,
      "s_pos": [
        5,
        10,
        15
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.25, 0.3, 0.2, 0.1, 0, -0.1, -0.2, -0.15, -0.1, 0, 0.1, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.15, 0.2, 0.05, 0.1, 0.1, 0.2, 0.15, 0.1, 0.05, 0.1, 0.15, 0.2]\n\n        \n        - The distance to the left wall is: [0.35, 0.3, 0.25, 0.35, 0.4, 0.45, 0.5, 0.55, 0.5, 0.45, 0.4, 0.35, 0.3]\n\n\n        - The distance to the right wall is: [2.65, 2.7, 2.75, 2.65, 2.6, 2.55, 2.5, 2.45, 2.5, 2.55, 2.6, 2.65, 2.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 13,
      "s_pos": [
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34
      ],
      "d_pos": [
        0.2,
        0.25,
        0.3,
        0.2,
        0.1,
        0,
        -0.1,
        -0.2,
        -0.15,
        -0.1,
        0,
        0.1,
        0.2
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.15,
        0.2,
        0.05,
        0.1,
        0.1,
        0.2,
        0.15,
        0.1,
        0.05,
        0.1,
        0.15,
        0.2
      ],
      "d_left": [
        0.35,
        0.3,
        0.25,
        0.35,
        0.4,
        0.45,
        0.5,
        0.55,
        0.5,
        0.45,
        0.4,
        0.35,
        0.3
      ],
      "d_right": [
        2.65,
        2.7,
        2.75,
        2.65,
        2.6,
        2.55,
        2.5,
        2.45,
        2.5,
        2.55,
        2.6,
        2.65,
        2.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 10,
      "s_pos": [
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 4.8, 4.6, 4.4, 4.2, 4]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.1, 0.05, 0, -0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1, -1, -1, -1, -1, -1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.1, -0.1, -0.15, -0.2, -0.25]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.6, 1.7, 1.8, 1.9]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.4, 1.3, 1.2, 1.1]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 6,
      "s_pos": [
        5,
        4.8,
        4.6,
        4.4,
        4.2,
        4
      ],
      "d_pos": [
        0.1,
        0.15,
        0.1,
        0.05,
        0,
        -0.05
      ],
      "s_speed": [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      ],
      "d_speed": [
        0.2,
        0.1,
        -0.1,
        -0.15,
        -0.2,
        -0.25
      ],
      "d_left": [
        1.5,
        1.4,
        1.6,
        1.7,
        1.8,
        1.9
      ],
      "d_right": [
        1.5,
        1.6,
        1.4,
        1.3,
        1.2,
        1.1
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 10,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 49, 48, 47, 46, 45]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.25, 0.3, 0.28, 0.26, 0.24]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1, -1, -1, -1, -1, -1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.15, 0.2, 0.18, 0.16, 0.14]\n\n        \n        - The distance to the left wall is: [1.2, 1.1, 1.0, 1.0, 1.1, 1.2]\n\n\n        - The distance to the right wall is: [0.8, 0.9, 1.0, 1.0, 0.9, 0.8]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 6,
      "s_pos": [
        50,
        49,
        48,
        47,
        46,
        45
      ],
      "d_pos": [
        0.2,
        0.25,
        0.3,
        0.28,
        0.26,
        0.24
      ],
      "s_speed": [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      ],
      "d_speed": [
        0.1,
        0.15,
        0.2,
        0.18,
        0.16,
        0.14
      ],
      "d_left": [
        1.2,
        1.1,
        1.0,
        1.0,
        1.1,
        1.2
      ],
      "d_right": [
        0.8,
        0.9,
        1.0,
        1.0,
        0.9,
        0.8
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 10,
      "s_pos": [
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [15, 15, 15, 15, 15, 15, 15, 15]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2]\n\n\n        - The distance to the right wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 8,
      "s_pos": [
        15,
        15,
        15,
        15,
        15,
        15,
        15,
        15
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2
      ],
      "d_right": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.4, -0.4, 0.5, -0.5, 0.6, -0.6, 0.7, -0.7, 0.8]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.6, 0.7, -0.7, 0.8, -0.8, 0.9, -0.9, 1.0]\n\n        \n        - The distance to the left wall is: [1.2, 0.8, 1.3, 0.7, 1.4, 0.6, 1.5, 0.5, 1.6]\n\n\n        - The distance to the right wall is: [0.8, 1.2, 0.7, 1.3, 0.6, 1.4, 0.5, 1.5, 0.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 9,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "d_pos": [
        0.4,
        -0.4,
        0.5,
        -0.5,
        0.6,
        -0.6,
        0.7,
        -0.7,
        0.8
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.6,
        -0.6,
        0.7,
        -0.7,
        0.8,
        -0.8,
        0.9,
        -0.9,
        1.0
      ],
      "d_left": [
        1.2,
        0.8,
        1.3,
        0.7,
        1.4,
        0.6,
        1.5,
        0.5,
        1.6
      ],
      "d_right": [
        0.8,
        1.2,
        0.7,
        1.3,
        0.6,
        1.4,
        0.5,
        1.5,
        0.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.2, 0.2, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7, 6.5, 6, 5.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.1, 0.3, 0.2, 0.1, 0.2]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.4, 1.5, 1.6, 1.5]\n\n\n        - The distance to the right wall is: [1.2, 1.1, 1.3, 1.2, 1.1, 1.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 6,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35
      ],
      "d_pos": [
        0.1,
        0.1,
        0.2,
        0.2,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6.5,
        7,
        6.5,
        6,
        5.5
      ],
      "d_speed": [
        0.2,
        0.1,
        0.3,
        0.2,
        0.1,
        0.2
      ],
      "d_left": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.6,
        1.5
      ],
      "d_right": [
        1.2,
        1.1,
        1.3,
        1.2,
        1.1,
        1.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3, 4.5, 6, 7.5, 9, 10.5, 12, 13.5, 15, 16.5, 18]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.3, -0.29, -0.28, -0.3, -0.29, -0.28, -0.3, -0.29, -0.28, -0.3, -0.29, -0.28, -0.3]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The distance to the left wall is: [0.3, 0.31, 0.32, 0.3, 0.31, 0.32, 0.3, 0.31, 0.32, 0.3, 0.31, 0.32, 0.3]\n\n\n        - The distance to the right wall is: [2.7, 2.69, 2.68, 2.7, 2.69, 2.68, 2.7, 2.69, 2.68, 2.7, 2.69, 2.68, 2.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 13,
      "s_pos": [
        0,
        1.5,
        3,
        4.5,
        6,
        7.5,
        9,
        10.5,
        12,
        13.5,
        15,
        16.5,
        18
      ],
      "d_pos": [
        -0.3,
        -0.29,
        -0.28,
        -0.3,
        -0.29,
        -0.28,
        -0.3,
        -0.29,
        -0.28,
        -0.3,
        -0.29,
        -0.28,
        -0.3
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "d_left": [
        0.3,
        0.31,
        0.32,
        0.3,
        0.31,
        0.32,
        0.3,
        0.31,
        0.32,
        0.3,
        0.31,
        0.32,
        0.3
      ],
      "d_right": [
        2.7,
        2.69,
        2.68,
        2.7,
        2.69,
        2.68,
        2.7,
        2.69,
        2.68,
        2.7,
        2.69,
        2.68,
        2.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 15,
      "s_pos": [
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.35, 0.36, 0.37, 0.38, 0.39, 0.38, 0.37, 0.36, 0.35, 0.34, 0.33, 0.32]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6.7, 6.8, 7, 6.9, 6.8, 6.7, 6.5, 6.3, 6, 5.8]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.15, 0.15, 0.2, 0.2, 0.15, 0.15, 0.1, 0.1, 0.05, 0.05]\n\n        \n        - The distance to the left wall is: [0.35, 0.34, 0.33, 0.32, 0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38]\n\n\n        - The distance to the right wall is: [3.65, 3.66, 3.67, 3.68, 3.69, 3.68, 3.67, 3.66, 3.65, 3.64, 3.63, 3.62]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 12,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55,
        60,
        65
      ],
      "d_pos": [
        0.35,
        0.36,
        0.37,
        0.38,
        0.39,
        0.38,
        0.37,
        0.36,
        0.35,
        0.34,
        0.33,
        0.32
      ],
      "s_speed": [
        6,
        6.5,
        6.7,
        6.8,
        7,
        6.9,
        6.8,
        6.7,
        6.5,
        6.3,
        6,
        5.8
      ],
      "d_speed": [
        0.1,
        0.1,
        0.15,
        0.15,
        0.2,
        0.2,
        0.15,
        0.15,
        0.1,
        0.1,
        0.05,
        0.05
      ],
      "d_left": [
        0.35,
        0.34,
        0.33,
        0.32,
        0.31,
        0.32,
        0.33,
        0.34,
        0.35,
        0.36,
        0.37,
        0.38
      ],
      "d_right": [
        3.65,
        3.66,
        3.67,
        3.68,
        3.69,
        3.68,
        3.67,
        3.66,
        3.65,
        3.64,
        3.63,
        3.62
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.4, -0.4, 0.5, -0.5, 0.4, -0.4, 0.5, -0.5, 0.4, -0.4, 0.5, -0.5, 0.4, -0.4]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7, 6.5, 6, 6.5, 7, 6.5, 6, 6.5, 7, 6.5, 6, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.6, 0.7, -0.7, 0.6, -0.6, 0.7, -0.7, 0.6, -0.6, 0.7, -0.7, 0.6, -0.6]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.1, 1.2, 1.3, 1.2, 1.3, 1.1, 1.2, 1.3, 1.2, 1.3, 1.1, 1.2]\n\n\n        - The distance to the right wall is: [0.8, 0.7, 0.9, 0.8, 0.7, 0.8, 0.7, 0.9, 0.8, 0.7, 0.8, 0.7, 0.9, 0.8]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 14,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13
      ],
      "d_pos": [
        0.4,
        -0.4,
        0.5,
        -0.5,
        0.4,
        -0.4,
        0.5,
        -0.5,
        0.4,
        -0.4,
        0.5,
        -0.5,
        0.4,
        -0.4
      ],
      "s_speed": [
        6,
        6.5,
        7,
        6.5,
        6,
        6.5,
        7,
        6.5,
        6,
        6.5,
        7,
        6.5,
        6,
        6.5
      ],
      "d_speed": [
        0.6,
        -0.6,
        0.7,
        -0.7,
        0.6,
        -0.6,
        0.7,
        -0.7,
        0.6,
        -0.6,
        0.7,
        -0.7,
        0.6,
        -0.6
      ],
      "d_left": [
        1.2,
        1.3,
        1.1,
        1.2,
        1.3,
        1.2,
        1.3,
        1.1,
        1.2,
        1.3,
        1.2,
        1.3,
        1.1,
        1.2
      ],
      "d_right": [
        0.8,
        0.7,
        0.9,
        0.8,
        0.7,
        0.8,
        0.7,
        0.9,
        0.8,
        0.7,
        0.8,
        0.7,
        0.9,
        0.8
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 0 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.8, 3.5, 5.4, 7.2]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, -0.4, 0.3, -0.5, 0.4]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.2, 6.1, 6.3, 6.2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.7, 0.6, -0.8, 0.7]\n\n        \n        - The distance to the left wall is: [1.2, 1.1, 1.3, 1.0, 1.2]\n\n\n        - The distance to the right wall is: [0.8, 0.9, 0.7, 1.0, 0.8]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 0,
      "data_samples": 5,
      "s_pos": [
        0,
        1.8,
        3.5,
        5.4,
        7.2
      ],
      "d_pos": [
        0.2,
        -0.4,
        0.3,
        -0.5,
        0.4
      ],
      "s_speed": [
        6,
        6.2,
        6.1,
        6.3,
        6.2
      ],
      "d_speed": [
        0.6,
        -0.7,
        0.6,
        -0.8,
        0.7
      ],
      "d_left": [
        1.2,
        1.1,
        1.3,
        1.0,
        1.2
      ],
      "d_right": [
        0.8,
        0.9,
        0.7,
        1.0,
        0.8
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.35, 0.36, 0.34, 0.37, 0.33, 0.38, 0.36, 0.35, 0.34, 0.37, 0.35, 0.33, 0.36, 0.34, 0.35]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.5, 5.6, 5.5, 5.7, 5.5, 5.6, 5.5, 5.6, 5.5, 5.7, 5.5, 5.6, 5.5, 5.6, 5.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.3, 0.4, 0.2, 0.3, 0.1, 0.3, 0.2, 0.2, 0.3, 0.4, 0.3, 0.2, 0.1, 0.3, 0.2]\n\n        \n        - The distance to the left wall is: [0.35, 0.36, 0.34, 0.37, 0.33, 0.38, 0.36, 0.35, 0.34, 0.37, 0.35, 0.33, 0.36, 0.34, 0.35]\n\n\n        - The distance to the right wall is: [3.65, 3.64, 3.66, 3.63, 3.67, 3.62, 3.64, 3.65, 3.66, 3.63, 3.65, 3.67, 3.64, 3.66, 3.65]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 15,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14
      ],
      "d_pos": [
        0.35,
        0.36,
        0.34,
        0.37,
        0.33,
        0.38,
        0.36,
        0.35,
        0.34,
        0.37,
        0.35,
        0.33,
        0.36,
        0.34,
        0.35
      ],
      "s_speed": [
        5.5,
        5.6,
        5.5,
        5.7,
        5.5,
        5.6,
        5.5,
        5.6,
        5.5,
        5.7,
        5.5,
        5.6,
        5.5,
        5.6,
        5.5
      ],
      "d_speed": [
        0.3,
        0.4,
        0.2,
        0.3,
        0.1,
        0.3,
        0.2,
        0.2,
        0.3,
        0.4,
        0.3,
        0.2,
        0.1,
        0.3,
        0.2
      ],
      "d_left": [
        0.35,
        0.36,
        0.34,
        0.37,
        0.33,
        0.38,
        0.36,
        0.35,
        0.34,
        0.37,
        0.35,
        0.33,
        0.36,
        0.34,
        0.35
      ],
      "d_right": [
        3.65,
        3.64,
        3.66,
        3.63,
        3.67,
        3.62,
        3.64,
        3.65,
        3.66,
        3.63,
        3.65,
        3.67,
        3.64,
        3.66,
        3.65
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3.0, 4.5, 6.0, 7.5, 9.0, 10.5, 12.0, 13.5, 15.0, 16.5, 18.0]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0.0, -0.05, -0.1, -0.05, 0.0, 0.05, 0.1, 0.05, 0.0, -0.05, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.0, 6.2, 6.1, 5.9, 6.0, 6.1, 5.8, 6.0, 6.2, 6.1, 5.9, 6.0, 6.1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.15, 0.0, -0.15, -0.2, -0.15, 0.0, 0.15, 0.2, 0.15, 0.0, -0.15, -0.2]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 13,
      "s_pos": [
        0,
        1.5,
        3.0,
        4.5,
        6.0,
        7.5,
        9.0,
        10.5,
        12.0,
        13.5,
        15.0,
        16.5,
        18.0
      ],
      "d_pos": [
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1,
        -0.05,
        0.0,
        0.05,
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1
      ],
      "s_speed": [
        6.0,
        6.2,
        6.1,
        5.9,
        6.0,
        6.1,
        5.8,
        6.0,
        6.2,
        6.1,
        5.9,
        6.0,
        6.1
      ],
      "d_speed": [
        0.2,
        0.15,
        0.0,
        -0.15,
        -0.2,
        -0.15,
        0.0,
        0.15,
        0.2,
        0.15,
        0.0,
        -0.15,
        -0.2
      ],
      "d_left": [
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5
      ],
      "d_right": [
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.4, -0.4, 0.5, -0.5, 0.6, -0.6]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.7, -0.7, 0.8, -0.8, 0.9, -0.9]\n\n        \n        - The distance to the left wall is: [1, 1.5, 1, 1.5, 1, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1, 1.5, 1, 1.5, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 6,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35
      ],
      "d_pos": [
        0.4,
        -0.4,
        0.5,
        -0.5,
        0.6,
        -0.6
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.7,
        -0.7,
        0.8,
        -0.8,
        0.9,
        -0.9
      ],
      "d_left": [
        1,
        1.5,
        1,
        1.5,
        1,
        1.5
      ],
      "d_right": [
        1.5,
        1,
        1.5,
        1,
        1.5,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 0 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [100.5, 100.3, 100.1, 99.9, 99.7, 99.5, 99.3, 99.1, 98.9, 98.7, 98.5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.25, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2, -0.25]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.12, 0.1, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2, -0.25]\n\n        \n        - The distance to the left wall is: [2.0, 2.1, 2.2, 2.1, 2.0, 1.9, 1.8, 1.9, 2.0, 2.1, 2.2]\n\n\n        - The distance to the right wall is: [1.8, 1.7, 1.6, 1.7, 1.8, 1.9, 2.0, 1.9, 1.8, 1.7, 1.6]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 0,
      "data_samples": 11,
      "s_pos": [
        100.5,
        100.3,
        100.1,
        99.9,
        99.7,
        99.5,
        99.3,
        99.1,
        98.9,
        98.7,
        98.5
      ],
      "d_pos": [
        0.2,
        0.25,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25
      ],
      "s_speed": [
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5
      ],
      "d_speed": [
        0.12,
        0.1,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25
      ],
      "d_left": [
        2.0,
        2.1,
        2.2,
        2.1,
        2.0,
        1.9,
        1.8,
        1.9,
        2.0,
        2.1,
        2.2
      ],
      "d_right": [
        1.8,
        1.7,
        1.6,
        1.7,
        1.8,
        1.9,
        2.0,
        1.9,
        1.8,
        1.7,
        1.6
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 9.5, 9, 8.5, 8, 7.5, 7, 6.5, 6, 5.5, 5, 4.5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2, -0.25, -0.3, -0.35]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15]\n\n        \n        - The distance to the left wall is: [0.8, 0.85, 0.9, 0.95, 1, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35]\n\n\n        - The distance to the right wall is: [0.8, 0.75, 0.7, 0.65, 0.6, 0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 12,
      "s_pos": [
        10,
        9.5,
        9,
        8.5,
        8,
        7.5,
        7,
        6.5,
        6,
        5.5,
        5,
        4.5
      ],
      "d_pos": [
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25,
        -0.3,
        -0.35
      ],
      "s_speed": [
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5
      ],
      "d_speed": [
        0.4,
        0.35,
        0.3,
        0.25,
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15
      ],
      "d_left": [
        0.8,
        0.85,
        0.9,
        0.95,
        1,
        1.05,
        1.1,
        1.15,
        1.2,
        1.25,
        1.3,
        1.35
      ],
      "d_right": [
        0.8,
        0.75,
        0.7,
        0.65,
        0.6,
        0.55,
        0.5,
        0.45,
        0.4,
        0.35,
        0.3,
        0.25
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 11,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3.1, 4.6, 6.2, 7.7, 9.3, 10.8, 12.4, 13.9, 15.5, 17.0, 18.6]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.0, -0.1, 0.0, 0.1, 0.0, -0.1, 0.0, 0.1, -0.1, 0.0, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 5.2, 5.1, 5.3, 5.2, 5.3, 5.1, 5.2, 5.3, 5.2, 5.3, 5.1, 5.2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.1, 0.2, 0.3, 0.1, 0.2, 0.3, 0.1, 0.2, 0.3, 0.1, 0.2]\n\n        \n        - The distance to the left wall is: [1, 1.2, 1.1, 1.2, 1.3, 1.1, 1.2, 1.3, 1.1, 1.2, 1.3, 1.1, 1.2]\n\n\n        - The distance to the right wall is: [1.5, 1.3, 1.4, 1.3, 1.2, 1.4, 1.3, 1.2, 1.4, 1.3, 1.2, 1.4, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 13,
      "s_pos": [
        0,
        1.5,
        3.1,
        4.6,
        6.2,
        7.7,
        9.3,
        10.8,
        12.4,
        13.9,
        15.5,
        17.0,
        18.6
      ],
      "d_pos": [
        0.1,
        0.2,
        0.0,
        -0.1,
        0.0,
        0.1,
        0.0,
        -0.1,
        0.0,
        0.1,
        -0.1,
        0.0,
        0.1
      ],
      "s_speed": [
        5,
        5.2,
        5.1,
        5.3,
        5.2,
        5.3,
        5.1,
        5.2,
        5.3,
        5.2,
        5.3,
        5.1,
        5.2
      ],
      "d_speed": [
        0.2,
        0.3,
        0.1,
        0.2,
        0.3,
        0.1,
        0.2,
        0.3,
        0.1,
        0.2,
        0.3,
        0.1,
        0.2
      ],
      "d_left": [
        1,
        1.2,
        1.1,
        1.2,
        1.3,
        1.1,
        1.2,
        1.3,
        1.1,
        1.2,
        1.3,
        1.1,
        1.2
      ],
      "d_right": [
        1.5,
        1.3,
        1.4,
        1.3,
        1.2,
        1.4,
        1.3,
        1.2,
        1.4,
        1.3,
        1.2,
        1.4,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 12, 14, 16, 18, 20]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, -0.6, 0.4, -0.5, 0.6, -0.4]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, 0.7, 0.5, 0.6, 0.7, 0.5]\n\n        \n        - The distance to the left wall is: [1.5, 1.3, 1.4, 1.5, 1.3, 1.4]\n\n\n        - The distance to the right wall is: [1.3, 1.5, 1.3, 1.4, 1.5, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 6,
      "s_pos": [
        10,
        12,
        14,
        16,
        18,
        20
      ],
      "d_pos": [
        0.5,
        -0.6,
        0.4,
        -0.5,
        0.6,
        -0.4
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.6,
        0.7,
        0.5,
        0.6,
        0.7,
        0.5
      ],
      "d_left": [
        1.5,
        1.3,
        1.4,
        1.5,
        1.3,
        1.4
      ],
      "d_right": [
        1.3,
        1.5,
        1.3,
        1.4,
        1.5,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 0 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.2, 2.4, 3.6, 4.8, 6]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.2, 0.18, 0.16, 0.12]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 0,
      "data_samples": 6,
      "s_pos": [
        0,
        1.2,
        2.4,
        3.6,
        4.8,
        6
      ],
      "d_pos": [
        0.1,
        0.15,
        0.2,
        0.18,
        0.16,
        0.12
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 12, 14, 16, 18]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.2, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 5,
      "s_pos": [
        10,
        12,
        14,
        16,
        18
      ],
      "d_pos": [
        0.1,
        0.1,
        0.2,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.3, -0.28, -0.27, -0.25, -0.24, -0.23, -0.22, -0.21, -0.2, -0.18, -0.17, -0.15, -0.14, -0.12]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.1, 6.2, 6.3, 6.1, 6, 6.2, 6.3, 6.1, 6, 6.2, 6.3, 6.1, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.05, 0.05, 0.1, 0.1, 0.05, 0.05, 0.1, 0.1, 0.05, 0.05, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.35, 0.36, 0.37, 0.38, 0.35, 0.36, 0.37, 0.38, 0.35, 0.36, 0.37, 0.38, 0.35, 0.36]\n\n\n        - The distance to the right wall is: [2.5, 2.6, 2.7, 2.8, 2.5, 2.6, 2.7, 2.8, 2.5, 2.6, 2.7, 2.8, 2.5, 2.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 14,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13
      ],
      "d_pos": [
        -0.3,
        -0.28,
        -0.27,
        -0.25,
        -0.24,
        -0.23,
        -0.22,
        -0.21,
        -0.2,
        -0.18,
        -0.17,
        -0.15,
        -0.14,
        -0.12
      ],
      "s_speed": [
        6,
        6.1,
        6.2,
        6.3,
        6.1,
        6,
        6.2,
        6.3,
        6.1,
        6,
        6.2,
        6.3,
        6.1,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.05,
        0.05,
        0.1,
        0.1,
        0.05,
        0.05,
        0.1,
        0.1,
        0.05,
        0.05,
        0.1,
        0.1
      ],
      "d_left": [
        0.35,
        0.36,
        0.37,
        0.38,
        0.35,
        0.36,
        0.37,
        0.38,
        0.35,
        0.36,
        0.37,
        0.38,
        0.35,
        0.36
      ],
      "d_right": [
        2.5,
        2.6,
        2.7,
        2.8,
        2.5,
        2.6,
        2.7,
        2.8,
        2.5,
        2.6,
        2.7,
        2.8,
        2.5,
        2.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n        \n        - The distance to the left wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n\n        - The distance to the right wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 15,
      "s_pos": [
        0,
        0.5,
        1.0,
        1.5,
        2.0,
        2.5,
        3.0,
        3.5,
        4.0,
        4.5,
        5.0,
        5.5,
        6.0,
        6.5,
        7.0
      ],
      "d_pos": [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "s_speed": [
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0
      ],
      "d_speed": [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "d_left": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "d_right": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35, 40]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.1, 0.2, -0.2, 0.1, -0.1, 0.0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [4, 5, 6, 5, 6, 5, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.3, 0.4, 0.2, 0.3, 0.2, 0.4, 0.3]\n\n        \n        - The distance to the left wall is: [0.8, 1.0, 0.9, 1.1, 1.0, 1.2, 1.1]\n\n\n        - The distance to the right wall is: [1.2, 1.0, 1.1, 0.9, 1.0, 0.8, 0.9]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 7,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35,
        40
      ],
      "d_pos": [
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.1,
        -0.1,
        0.0
      ],
      "s_speed": [
        4,
        5,
        6,
        5,
        6,
        5,
        6
      ],
      "d_speed": [
        0.3,
        0.4,
        0.2,
        0.3,
        0.2,
        0.4,
        0.3
      ],
      "d_left": [
        0.8,
        1.0,
        0.9,
        1.1,
        1.0,
        1.2,
        1.1
      ],
      "d_right": [
        1.2,
        1.0,
        1.1,
        0.9,
        1.0,
        0.8,
        0.9
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [25.0, 24.6, 24.2, 23.8, 23.4, 23.0, 22.6, 22.2, 21.8, 21.4, 21.0, 20.6, 20.2, 19.8]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.3, 0.4, 0.3, 0.2, 0.3, 0.4, 0.3, 0.2, 0.3, 0.4, 0.3, 0.2, 0.3]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5]\n\n        \n        - The distance to the left wall is: [0.6, 0.5, 0.4, 0.5, 0.6, 0.5, 0.4, 0.5, 0.6, 0.5, 0.4, 0.5, 0.6, 0.5]\n\n\n        - The distance to the right wall is: [1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 14,
      "s_pos": [
        25.0,
        24.6,
        24.2,
        23.8,
        23.4,
        23.0,
        22.6,
        22.2,
        21.8,
        21.4,
        21.0,
        20.6,
        20.2,
        19.8
      ],
      "d_pos": [
        0.2,
        0.3,
        0.4,
        0.3,
        0.2,
        0.3,
        0.4,
        0.3,
        0.2,
        0.3,
        0.4,
        0.3,
        0.2,
        0.3
      ],
      "s_speed": [
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0
      ],
      "d_speed": [
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5
      ],
      "d_left": [
        0.6,
        0.5,
        0.4,
        0.5,
        0.6,
        0.5,
        0.4,
        0.5,
        0.6,
        0.5,
        0.4,
        0.5,
        0.6,
        0.5
      ],
      "d_right": [
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.5, 5.6, 5.7, 5.5, 5.8, 5.9, 6.0, 5.8, 6.1, 6.2, 5.9, 6.0, 6.1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n        \n        - The distance to the left wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n\n        - The distance to the right wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 13,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "d_pos": [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "s_speed": [
        5.5,
        5.6,
        5.7,
        5.5,
        5.8,
        5.9,
        6.0,
        5.8,
        6.1,
        6.2,
        5.9,
        6.0,
        6.1
      ],
      "d_speed": [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "d_left": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "d_right": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15, 20, 25, 30, 35, 40]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, -0.3, 0.4, -0.5, 0.3, -0.4, 0.5, -0.3]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.6, 0.7, -0.7, 0.6, -0.7, 0.7, -0.6]\n\n        \n        - The distance to the left wall is: [0.6, 0.5, 0.7, 0.4, 0.6, 0.5, 0.7, 0.4]\n\n\n        - The distance to the right wall is: [0.6, 0.5, 0.7, 0.4, 0.6, 0.5, 0.7, 0.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 8,
      "s_pos": [
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40
      ],
      "d_pos": [
        0.2,
        -0.3,
        0.4,
        -0.5,
        0.3,
        -0.4,
        0.5,
        -0.3
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.6,
        -0.6,
        0.7,
        -0.7,
        0.6,
        -0.7,
        0.7,
        -0.6
      ],
      "d_left": [
        0.6,
        0.5,
        0.7,
        0.4,
        0.6,
        0.5,
        0.7,
        0.4
      ],
      "d_right": [
        0.6,
        0.5,
        0.7,
        0.4,
        0.6,
        0.5,
        0.7,
        0.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.7, 1.4, 2.1, 2.8, 3.5, 4.2, 4.9, 5.6, 6.3]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.05, 0.02, -0.01, 0.03, -0.02, 0.01, 0.04, -0.03, 0.01, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6.8, 7, 6.9, 6.7, 6.5, 6.3, 6.1, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.05, 0.07, 0.02, 0.03, 0.08, 0.05, 0.06, 0.04, 0.03]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.4, 1.5, 1.4, 1.6, 1.5, 1.6, 1.7, 1.5]\n\n\n        - The distance to the right wall is: [1.4, 1.3, 1.5, 1.4, 1.5, 1.3, 1.4, 1.3, 1.2, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 10,
      "s_pos": [
        0,
        0.7,
        1.4,
        2.1,
        2.8,
        3.5,
        4.2,
        4.9,
        5.6,
        6.3
      ],
      "d_pos": [
        0.05,
        0.02,
        -0.01,
        0.03,
        -0.02,
        0.01,
        0.04,
        -0.03,
        0.01,
        0
      ],
      "s_speed": [
        6,
        6.5,
        6.8,
        7,
        6.9,
        6.7,
        6.5,
        6.3,
        6.1,
        6
      ],
      "d_speed": [
        0.1,
        0.05,
        0.07,
        0.02,
        0.03,
        0.08,
        0.05,
        0.06,
        0.04,
        0.03
      ],
      "d_left": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.4,
        1.6,
        1.5,
        1.6,
        1.7,
        1.5
      ],
      "d_right": [
        1.4,
        1.3,
        1.5,
        1.4,
        1.5,
        1.3,
        1.4,
        1.3,
        1.2,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.3, 0.6, 0.9, 1.2, 1.5, 1.8, 2.1, 2.4, 2.7, 3.0, 3.3, 3.6, 3.9, 4.2]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.3, -0.3, 0.3, -0.3, 0.3, -0.3, 0.3, -0.3, 0.3, -0.3, 0.3, -0.3, 0.3, -0.3, 0.3]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.6, 0.6, -0.6, 0.6, -0.6, 0.6, -0.6, 0.6, -0.6, 0.6, -0.6, 0.6, -0.6, 0.6]\n\n        \n        - The distance to the left wall is: [0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5]\n\n\n        - The distance to the right wall is: [0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 15,
      "s_pos": [
        0,
        0.3,
        0.6,
        0.9,
        1.2,
        1.5,
        1.8,
        2.1,
        2.4,
        2.7,
        3.0,
        3.3,
        3.6,
        3.9,
        4.2
      ],
      "d_pos": [
        0.3,
        -0.3,
        0.3,
        -0.3,
        0.3,
        -0.3,
        0.3,
        -0.3,
        0.3,
        -0.3,
        0.3,
        -0.3,
        0.3,
        -0.3,
        0.3
      ],
      "s_speed": [
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ],
      "d_speed": [
        0.6,
        -0.6,
        0.6,
        -0.6,
        0.6,
        -0.6,
        0.6,
        -0.6,
        0.6,
        -0.6,
        0.6,
        -0.6,
        0.6,
        -0.6,
        0.6
      ],
      "d_left": [
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5
      ],
      "d_right": [
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [15, 15, 15, 15, 15, 15, 15]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 7,
      "s_pos": [
        15,
        15,
        15,
        15,
        15,
        15,
        15
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15, 20, 25, 30, 35, 40]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.35, -0.36, -0.37, -0.35, -0.34, -0.33, -0.32, -0.31]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.2, 6.1, 6.3, 6.5, 6.4, 6.6, 6.7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.25, 0.22, 0.28, 0.24, 0.26, 0.27]\n\n        \n        - The distance to the left wall is: [0.3, 0.29, 0.28, 0.3, 0.31, 0.32, 0.33, 0.34]\n\n\n        - The distance to the right wall is: [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 8,
      "s_pos": [
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40
      ],
      "d_pos": [
        -0.35,
        -0.36,
        -0.37,
        -0.35,
        -0.34,
        -0.33,
        -0.32,
        -0.31
      ],
      "s_speed": [
        6,
        6.2,
        6.1,
        6.3,
        6.5,
        6.4,
        6.6,
        6.7
      ],
      "d_speed": [
        0.2,
        0.3,
        0.25,
        0.22,
        0.28,
        0.24,
        0.26,
        0.27
      ],
      "d_left": [
        0.3,
        0.29,
        0.28,
        0.3,
        0.31,
        0.32,
        0.33,
        0.34
      ],
      "d_right": [
        2.5,
        2.5,
        2.5,
        2.5,
        2.5,
        2.5,
        2.5,
        2.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.05, 0.1, 0.2, 0.25, 0.3, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7, 6.8, 6.9, 6, 6.5, 7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.15, 0.1, 0.05, 0.1, 0.2, 0.15]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.6, 1.5, 1.4, 1.3, 1.2, 1.3]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.4, 1.5, 1.6, 1.7, 1.8, 1.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 8,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "d_pos": [
        0.1,
        0.15,
        0.05,
        0.1,
        0.2,
        0.25,
        0.3,
        0.2
      ],
      "s_speed": [
        6,
        6.5,
        7,
        6.8,
        6.9,
        6,
        6.5,
        7
      ],
      "d_speed": [
        0.1,
        0.2,
        0.15,
        0.1,
        0.05,
        0.1,
        0.2,
        0.15
      ],
      "d_left": [
        1.5,
        1.4,
        1.6,
        1.5,
        1.4,
        1.3,
        1.2,
        1.3
      ],
      "d_right": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.6,
        1.7,
        1.8,
        1.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 11,
      "s_pos": [
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 12, 14, 16, 18, 20, 22, 24, 26]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.05, -0.1, -0.05, 0.2, 0.1, -0.05, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.2, 6.1, 6, 6.3, 6.1, 6.2, 6, 6.1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.1, 0.2, 0.15, 0.25, 0.2, 0.1, 0.05]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 9,
      "s_pos": [
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26
      ],
      "d_pos": [
        0.1,
        0.15,
        0.05,
        -0.1,
        -0.05,
        0.2,
        0.1,
        -0.05,
        0
      ],
      "s_speed": [
        6,
        6.2,
        6.1,
        6,
        6.3,
        6.1,
        6.2,
        6,
        6.1
      ],
      "d_speed": [
        0.2,
        0.3,
        0.1,
        0.2,
        0.15,
        0.25,
        0.2,
        0.1,
        0.05
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 9.5, 9, 8.5, 8, 7.5, 7, 6.5, 6, 5.5, 5, 4.5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2, -0.25, -0.3, -0.35]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15]\n\n        \n        - The distance to the left wall is: [0.8, 0.85, 0.9, 0.95, 1, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35]\n\n\n        - The distance to the right wall is: [0.8, 0.75, 0.7, 0.65, 0.6, 0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 12,
      "s_pos": [
        10,
        9.5,
        9,
        8.5,
        8,
        7.5,
        7,
        6.5,
        6,
        5.5,
        5,
        4.5
      ],
      "d_pos": [
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25,
        -0.3,
        -0.35
      ],
      "s_speed": [
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5
      ],
      "d_speed": [
        0.4,
        0.35,
        0.3,
        0.25,
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15
      ],
      "d_left": [
        0.8,
        0.85,
        0.9,
        0.95,
        1,
        1.05,
        1.1,
        1.15,
        1.2,
        1.25,
        1.3,
        1.35
      ],
      "d_right": [
        0.8,
        0.75,
        0.7,
        0.65,
        0.6,
        0.55,
        0.5,
        0.45,
        0.4,
        0.35,
        0.3,
        0.25
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35, 40, 45]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 8,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15, 20, 25, 30]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 6, 5, 6, 5, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [2, 2, 2, 2, 2, 2]\n\n\n        - The distance to the right wall is: [2, 2, 2, 2, 2, 2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 6,
      "s_pos": [
        5,
        10,
        15,
        20,
        25,
        30
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        5,
        6,
        5,
        6,
        5,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "d_right": [
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 10,
      "s_pos": [
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\n\n\n        - The distance to the right wall is: [1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 10,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "d_pos": [
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3
      ],
      "d_right": [
        1.7,
        1.7,
        1.7,
        1.7,
        1.7,
        1.7,
        1.7,
        1.7,
        1.7,
        1.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 12, 14, 16, 18]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.2, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 5,
      "s_pos": [
        10,
        12,
        14,
        16,
        18
      ],
      "d_pos": [
        0.1,
        0.1,
        0.2,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 10,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 10, 10, 10, 10, 10, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\n\n\n        - The distance to the right wall is: [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 7,
      "s_pos": [
        10,
        10,
        10,
        10,
        10,
        10,
        10
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8
      ],
      "d_right": [
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5.0, 4.7, 4.4, 4.1, 3.8, 3.5, 3.2, 2.9, 2.6, 2.3, 2.0, 1.7, 1.4, 1.1, 0.8]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.15, 0.1, 0.05, 0.0, -0.05, -0.1, -0.15, -0.2, -0.25, -0.3, -0.35, -0.4, -0.45, -0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.8, 0.75, 0.7, 0.65, 0.6, 0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1]\n\n\n        - The distance to the right wall is: [1.2, 1.25, 1.3, 1.35, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7, 1.75, 1.8, 1.85, 1.9]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 15,
      "s_pos": [
        5.0,
        4.7,
        4.4,
        4.1,
        3.8,
        3.5,
        3.2,
        2.9,
        2.6,
        2.3,
        2.0,
        1.7,
        1.4,
        1.1,
        0.8
      ],
      "d_pos": [
        0.2,
        0.15,
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25,
        -0.3,
        -0.35,
        -0.4,
        -0.45,
        -0.5
      ],
      "s_speed": [
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.8,
        0.75,
        0.7,
        0.65,
        0.6,
        0.55,
        0.5,
        0.45,
        0.4,
        0.35,
        0.3,
        0.25,
        0.2,
        0.15,
        0.1
      ],
      "d_right": [
        1.2,
        1.25,
        1.3,
        1.35,
        1.4,
        1.45,
        1.5,
        1.55,
        1.6,
        1.65,
        1.7,
        1.75,
        1.8,
        1.85,
        1.9
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.0, -0.1, 0.0, 0.1, 0.0, -0.1, 0.0, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.2, 6.1, 6.3, 6.4, 6.2, 6.1, 6.3, 6.4]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.1, 0.2, 0.1, 0.2, 0.1, 0.2, 0.1, 0.2]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.5, 1.4, 1.5, 1.4, 1.5, 1.4, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.5, 1.6, 1.5, 1.6, 1.5, 1.6, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 9,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "d_pos": [
        0.1,
        0.0,
        -0.1,
        0.0,
        0.1,
        0.0,
        -0.1,
        0.0,
        0.1
      ],
      "s_speed": [
        6,
        6.2,
        6.1,
        6.3,
        6.4,
        6.2,
        6.1,
        6.3,
        6.4
      ],
      "d_speed": [
        0.2,
        0.1,
        0.2,
        0.1,
        0.2,
        0.1,
        0.2,
        0.1,
        0.2
      ],
      "d_left": [
        1.5,
        1.4,
        1.5,
        1.4,
        1.5,
        1.4,
        1.5,
        1.4,
        1.5
      ],
      "d_right": [
        1.5,
        1.6,
        1.5,
        1.6,
        1.5,
        1.6,
        1.5,
        1.6,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.3, 0.6, 0.9, 1.2, 1.5, 1.8, 2.1, 2.4, 2.7, 3.0, 3.3, 3.6, 3.9, 4.2]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.3, -0.3, 0.3, -0.3, 0.3, -0.3, 0.3, -0.3, 0.3, -0.3, 0.3, -0.3, 0.3, -0.3, 0.3]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.6, 0.6, -0.6, 0.6, -0.6, 0.6, -0.6, 0.6, -0.6, 0.6, -0.6, 0.6, -0.6, 0.6]\n\n        \n        - The distance to the left wall is: [0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5]\n\n\n        - The distance to the right wall is: [0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 15,
      "s_pos": [
        0,
        0.3,
        0.6,
        0.9,
        1.2,
        1.5,
        1.8,
        2.1,
        2.4,
        2.7,
        3.0,
        3.3,
        3.6,
        3.9,
        4.2
      ],
      "d_pos": [
        0.3,
        -0.3,
        0.3,
        -0.3,
        0.3,
        -0.3,
        0.3,
        -0.3,
        0.3,
        -0.3,
        0.3,
        -0.3,
        0.3,
        -0.3,
        0.3
      ],
      "s_speed": [
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ],
      "d_speed": [
        0.6,
        -0.6,
        0.6,
        -0.6,
        0.6,
        -0.6,
        0.6,
        -0.6,
        0.6,
        -0.6,
        0.6,
        -0.6,
        0.6,
        -0.6,
        0.6
      ],
      "d_left": [
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5
      ],
      "d_right": [
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, -0.1, 0, 0.1, -0.1, 0, 0.1, 0, -0.1, 0.1, 0, 0, -0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.5, 1.7, 1.5, 1.6, 1.5, 1.6, 1.5, 1.6, 1.5, 1.6, 1.5, 1.6, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.4, 1.5, 1.3, 1.5, 1.4, 1.5, 1.4, 1.5, 1.4, 1.5, 1.4, 1.5, 1.4, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 15,
      "s_pos": [
        0,
        0.5,
        1,
        1.5,
        2,
        2.5,
        3,
        3.5,
        4,
        4.5,
        5,
        5.5,
        6,
        6.5,
        7
      ],
      "d_pos": [
        0.1,
        0.1,
        -0.1,
        0,
        0.1,
        -0.1,
        0,
        0.1,
        0,
        -0.1,
        0.1,
        0,
        0,
        -0.1,
        0.1
      ],
      "s_speed": [
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.5,
        1.6,
        1.5,
        1.7,
        1.5,
        1.6,
        1.5,
        1.6,
        1.5,
        1.6,
        1.5,
        1.6,
        1.5,
        1.6,
        1.5
      ],
      "d_right": [
        1.5,
        1.4,
        1.5,
        1.3,
        1.5,
        1.4,
        1.5,
        1.4,
        1.5,
        1.4,
        1.5,
        1.4,
        1.5,
        1.4,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 2, 4]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.2, 1.2, 1.2]\n\n\n        - The distance to the right wall is: [1.2, 1.2, 1.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 3,
      "s_pos": [
        0,
        2,
        4
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0
      ],
      "d_left": [
        1.2,
        1.2,
        1.2
      ],
      "d_right": [
        1.2,
        1.2,
        1.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35, 40]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.4, -0.35, 0.45, -0.4, 0.5, -0.45, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6, 5.5, 6, 6.5, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.7, 0.65, -0.75, 0.7, -0.65, 0.6]\n\n        \n        - The distance to the left wall is: [0.5, 0.3, 0.6, 0.4, 0.5, 0.3, 0.6]\n\n\n        - The distance to the right wall is: [0.5, 0.6, 0.4, 0.6, 0.5, 0.7, 0.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 7,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35,
        40
      ],
      "d_pos": [
        0.4,
        -0.35,
        0.45,
        -0.4,
        0.5,
        -0.45,
        0.5
      ],
      "s_speed": [
        6,
        6.5,
        6,
        5.5,
        6,
        6.5,
        6
      ],
      "d_speed": [
        0.6,
        -0.7,
        0.65,
        -0.75,
        0.7,
        -0.65,
        0.6
      ],
      "d_left": [
        0.5,
        0.3,
        0.6,
        0.4,
        0.5,
        0.3,
        0.6
      ],
      "d_right": [
        0.5,
        0.6,
        0.4,
        0.6,
        0.5,
        0.7,
        0.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 4 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 21, 27, 34]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.4, -0.5, 0.6, -0.7, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, 0.7, 0.8, 0.7, 0.6]\n\n        \n        - The distance to the left wall is: [1.2, 1.1, 1.3, 1.1, 1.4]\n\n\n        - The distance to the right wall is: [0.8, 0.9, 0.7, 0.9, 0.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 4,
      "s_pos": [
        10,
        15,
        21,
        27,
        34
      ],
      "d_pos": [
        0.4,
        -0.5,
        0.6,
        -0.7,
        0.5
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.6,
        0.7,
        0.8,
        0.7,
        0.6
      ],
      "d_left": [
        1.2,
        1.1,
        1.3,
        1.1,
        1.4
      ],
      "d_right": [
        0.8,
        0.9,
        0.7,
        0.9,
        0.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0.0, -0.05, -0.1, -0.15, -0.1, -0.05, 0.0, 0.05, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.5, 5.6, 5.5, 5.7, 5.6, 5.5, 5.6, 5.5, 5.7, 5.6, 5.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.0, 0.05, 0.0, -0.05, 0.0, 0.05, 0.0, -0.05, 0.0, 0.05, 0.0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 11,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "d_pos": [
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1,
        -0.15,
        -0.1,
        -0.05,
        0.0,
        0.05,
        0.1
      ],
      "s_speed": [
        5.5,
        5.6,
        5.5,
        5.7,
        5.6,
        5.5,
        5.6,
        5.5,
        5.7,
        5.6,
        5.5
      ],
      "d_speed": [
        0.0,
        0.05,
        0.0,
        -0.05,
        0.0,
        0.05,
        0.0,
        -0.05,
        0.0,
        0.05,
        0.0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.15, 0.1, 0.05, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.5, 6.0, 6.5, 6.0, 5.5, 6.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.2, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.4, 1.3, 1.2, 1.3]\n\n\n        - The distance to the right wall is: [0.8, 0.7, 0.6, 0.7, 0.8, 0.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 6,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35
      ],
      "d_pos": [
        0.1,
        0.1,
        0.15,
        0.1,
        0.05,
        0.1
      ],
      "s_speed": [
        5.5,
        6.0,
        6.5,
        6.0,
        5.5,
        6.0
      ],
      "d_speed": [
        0.1,
        0.1,
        0.2,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.2,
        1.3,
        1.4,
        1.3,
        1.2,
        1.3
      ],
      "d_right": [
        0.8,
        0.7,
        0.6,
        0.7,
        0.8,
        0.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.8, 3.6]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.3, 0.3, 0.3]\n\n        \n        - The distance to the left wall is: [1.2, 1.1, 1.0]\n\n\n        - The distance to the right wall is: [1.0, 1.1, 1.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 3,
      "s_pos": [
        0,
        1.8,
        3.6
      ],
      "d_pos": [
        0.1,
        0.15,
        0.2
      ],
      "s_speed": [
        6,
        6,
        6
      ],
      "d_speed": [
        0.3,
        0.3,
        0.3
      ],
      "d_left": [
        1.2,
        1.1,
        1.0
      ],
      "d_right": [
        1.0,
        1.1,
        1.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 14,
      "s_pos": [
        0,
        0.5,
        1,
        1.5,
        2,
        2.5,
        3,
        3.5,
        4,
        4.5,
        5,
        5.5,
        6,
        6.5
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 0 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.8, 3.5, 5.4, 7.2]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, -0.4, 0.3, -0.5, 0.4]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.2, 6.1, 6.3, 6.2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.7, 0.6, -0.8, 0.7]\n\n        \n        - The distance to the left wall is: [1.2, 1.1, 1.3, 1.0, 1.2]\n\n\n        - The distance to the right wall is: [0.8, 0.9, 0.7, 1.0, 0.8]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 0,
      "data_samples": 5,
      "s_pos": [
        0,
        1.8,
        3.5,
        5.4,
        7.2
      ],
      "d_pos": [
        0.2,
        -0.4,
        0.3,
        -0.5,
        0.4
      ],
      "s_speed": [
        6,
        6.2,
        6.1,
        6.3,
        6.2
      ],
      "d_speed": [
        0.6,
        -0.7,
        0.6,
        -0.8,
        0.7
      ],
      "d_left": [
        1.2,
        1.1,
        1.3,
        1.0,
        1.2
      ],
      "d_right": [
        0.8,
        0.9,
        0.7,
        1.0,
        0.8
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0.02, 0.01, -0.01, 0, 0.03, -0.02, 0.01, -0.01, 0.02, 0, -0.02, 0.01, 0, -0.01]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.5, 6.7, 6.6, 6.4, 6.5, 6.8, 6.6, 6.7, 6.5, 6.6, 6.7, 6.5, 6.6, 6.7, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.12, 0.11, 0.09, 0.1, 0.13, 0.11, 0.12, 0.1, 0.11, 0.12, 0.1, 0.11, 0.12, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 15,
      "s_pos": [
        0,
        0.5,
        1.0,
        1.5,
        2.0,
        2.5,
        3.0,
        3.5,
        4.0,
        4.5,
        5.0,
        5.5,
        6.0,
        6.5,
        7.0
      ],
      "d_pos": [
        0,
        0.02,
        0.01,
        -0.01,
        0,
        0.03,
        -0.02,
        0.01,
        -0.01,
        0.02,
        0,
        -0.02,
        0.01,
        0,
        -0.01
      ],
      "s_speed": [
        6.5,
        6.7,
        6.6,
        6.4,
        6.5,
        6.8,
        6.6,
        6.7,
        6.5,
        6.6,
        6.7,
        6.5,
        6.6,
        6.7,
        6.5
      ],
      "d_speed": [
        0.1,
        0.12,
        0.11,
        0.09,
        0.1,
        0.13,
        0.11,
        0.12,
        0.1,
        0.11,
        0.12,
        0.1,
        0.11,
        0.12,
        0.1
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.35, -0.36, -0.37, -0.35, -0.34, -0.36, -0.38, -0.35]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.0, 6.2, 6.1, 6.0, 6.3, 6.1, 6.2, 6.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.15, 0.1, 0.2, 0.15, 0.1, 0.2]\n\n        \n        - The distance to the left wall is: [0.35, 0.36, 0.37, 0.35, 0.34, 0.36, 0.38, 0.35]\n\n\n        - The distance to the right wall is: [2.65, 2.64, 2.63, 2.65, 2.66, 2.64, 2.62, 2.65]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 8,
      "s_pos": [
        2.0,
        2.5,
        3.0,
        3.5,
        4.0,
        4.5,
        5.0,
        5.5
      ],
      "d_pos": [
        -0.35,
        -0.36,
        -0.37,
        -0.35,
        -0.34,
        -0.36,
        -0.38,
        -0.35
      ],
      "s_speed": [
        6.0,
        6.2,
        6.1,
        6.0,
        6.3,
        6.1,
        6.2,
        6.0
      ],
      "d_speed": [
        0.1,
        0.2,
        0.15,
        0.1,
        0.2,
        0.15,
        0.1,
        0.2
      ],
      "d_left": [
        0.35,
        0.36,
        0.37,
        0.35,
        0.34,
        0.36,
        0.38,
        0.35
      ],
      "d_right": [
        2.65,
        2.64,
        2.63,
        2.65,
        2.66,
        2.64,
        2.62,
        2.65
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 21, 27, 34]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, -0.1, 0.1, -0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 6, 6, 7, 7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.4, 0.2, 0.3]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.5, 1.4, 1.6]\n\n\n        - The distance to the right wall is: [1.6, 1.5, 1.6, 1.7, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 5,
      "s_pos": [
        10,
        15,
        21,
        27,
        34
      ],
      "d_pos": [
        0.1,
        0.05,
        -0.1,
        0.1,
        -0.05
      ],
      "s_speed": [
        5,
        6,
        6,
        7,
        7
      ],
      "d_speed": [
        0.2,
        0.3,
        0.4,
        0.2,
        0.3
      ],
      "d_left": [
        1.5,
        1.6,
        1.5,
        1.4,
        1.6
      ],
      "d_right": [
        1.6,
        1.5,
        1.6,
        1.7,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0.0, -0.05, -0.1, -0.05, 0.0, 0.05, 0.1, 0.05, 0.0, -0.05, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.5, 6.6, 6.5, 6.4, 6.5, 6.6, 6.5, 6.4, 6.5, 6.6, 6.5, 6.4, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.0, 0.05, 0.1, 0.05, 0.0, -0.05, -0.1, -0.05, 0.0, 0.05, 0.1, 0.05, 0.0]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.2, 1.3, 1.2, 1.3, 1.2, 1.3, 1.2, 1.3, 1.2, 1.3, 1.2]\n\n\n        - The distance to the right wall is: [0.8, 0.7, 0.8, 0.7, 0.8, 0.7, 0.8, 0.7, 0.8, 0.7, 0.8, 0.7, 0.8]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 13,
      "s_pos": [
        0,
        0.5,
        1.0,
        1.5,
        2.0,
        2.5,
        3.0,
        3.5,
        4.0,
        4.5,
        5.0,
        5.5,
        6.0
      ],
      "d_pos": [
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1,
        -0.05,
        0.0,
        0.05,
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1
      ],
      "s_speed": [
        6.5,
        6.6,
        6.5,
        6.4,
        6.5,
        6.6,
        6.5,
        6.4,
        6.5,
        6.6,
        6.5,
        6.4,
        6.5
      ],
      "d_speed": [
        0.0,
        0.05,
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1,
        -0.05,
        0.0,
        0.05,
        0.1,
        0.05,
        0.0
      ],
      "d_left": [
        1.2,
        1.3,
        1.2,
        1.3,
        1.2,
        1.3,
        1.2,
        1.3,
        1.2,
        1.3,
        1.2,
        1.3,
        1.2
      ],
      "d_right": [
        0.8,
        0.7,
        0.8,
        0.7,
        0.8,
        0.7,
        0.8,
        0.7,
        0.8,
        0.7,
        0.8,
        0.7,
        0.8
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.35, 0.36, 0.37, 0.35, 0.34, 0.33, 0.35, 0.36, 0.37, 0.35, 0.34, 0.33]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.5, 5.5, 5.6, 5.6, 5.7, 5.7, 5.6, 5.6, 5.5, 5.5, 5.6, 5.6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\n\n\n        - The distance to the right wall is: [1.7, 1.6, 1.6, 1.7, 1.7, 1.7, 1.7, 1.6, 1.6, 1.7, 1.7, 1.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 12,
      "s_pos": [
        1,
        1.5,
        2,
        2.5,
        3,
        3.5,
        4,
        4.5,
        5,
        5.5,
        6,
        6.5
      ],
      "d_pos": [
        0.35,
        0.36,
        0.37,
        0.35,
        0.34,
        0.33,
        0.35,
        0.36,
        0.37,
        0.35,
        0.34,
        0.33
      ],
      "s_speed": [
        5.5,
        5.5,
        5.6,
        5.6,
        5.7,
        5.7,
        5.6,
        5.6,
        5.5,
        5.5,
        5.6,
        5.6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3
      ],
      "d_right": [
        1.7,
        1.6,
        1.6,
        1.7,
        1.7,
        1.7,
        1.7,
        1.6,
        1.6,
        1.7,
        1.7,
        1.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.1, 2.3, 3.5, 4.7, 5.9]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, -0.5, 0.4, -0.4, 0.6, -0.6]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.5, 6.8, 6.9, 6.7, 6.6, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.6, 0.5, -0.5, 0.7, -0.7]\n\n        \n        - The distance to the left wall is: [0.8, 0.9, 0.7, 0.9, 0.8, 0.9]\n\n\n        - The distance to the right wall is: [1.2, 1.1, 1.3, 1.1, 1.2, 1.1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 6,
      "s_pos": [
        0,
        1.1,
        2.3,
        3.5,
        4.7,
        5.9
      ],
      "d_pos": [
        0.5,
        -0.5,
        0.4,
        -0.4,
        0.6,
        -0.6
      ],
      "s_speed": [
        6.5,
        6.8,
        6.9,
        6.7,
        6.6,
        6.5
      ],
      "d_speed": [
        0.6,
        -0.6,
        0.5,
        -0.5,
        0.7,
        -0.7
      ],
      "d_left": [
        0.8,
        0.9,
        0.7,
        0.9,
        0.8,
        0.9
      ],
      "d_right": [
        1.2,
        1.1,
        1.3,
        1.1,
        1.2,
        1.1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 11,
      "s_pos": [
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.2, 0.2, 0.2, 0.1, 0.1, 0.1, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.4, 1.4, 1.5, 1.5, 1.5, 1.5, 1.4, 1.4]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.6, 1.6, 1.5, 1.5, 1.5, 1.5, 1.6, 1.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 11,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.2,
        0.2,
        0.2,
        0.1,
        0.1,
        0.1,
        0.2,
        0.2
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.2,
        0.2,
        0.1,
        0.1,
        0.1,
        0.2,
        0.2,
        0.1,
        0.1
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.4,
        1.4,
        1.5,
        1.5,
        1.5,
        1.5,
        1.4,
        1.4
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.6,
        1.6,
        1.5,
        1.5,
        1.5,
        1.5,
        1.6,
        1.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.35, 0.36, 0.34, 0.37, 0.33, 0.38, 0.36, 0.35, 0.34, 0.37, 0.35, 0.33, 0.36, 0.34, 0.35]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.5, 5.6, 5.5, 5.7, 5.5, 5.6, 5.5, 5.6, 5.5, 5.7, 5.5, 5.6, 5.5, 5.6, 5.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.3, 0.4, 0.2, 0.3, 0.1, 0.3, 0.2, 0.2, 0.3, 0.4, 0.3, 0.2, 0.1, 0.3, 0.2]\n\n        \n        - The distance to the left wall is: [0.35, 0.36, 0.34, 0.37, 0.33, 0.38, 0.36, 0.35, 0.34, 0.37, 0.35, 0.33, 0.36, 0.34, 0.35]\n\n\n        - The distance to the right wall is: [3.65, 3.64, 3.66, 3.63, 3.67, 3.62, 3.64, 3.65, 3.66, 3.63, 3.65, 3.67, 3.64, 3.66, 3.65]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 15,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14
      ],
      "d_pos": [
        0.35,
        0.36,
        0.34,
        0.37,
        0.33,
        0.38,
        0.36,
        0.35,
        0.34,
        0.37,
        0.35,
        0.33,
        0.36,
        0.34,
        0.35
      ],
      "s_speed": [
        5.5,
        5.6,
        5.5,
        5.7,
        5.5,
        5.6,
        5.5,
        5.6,
        5.5,
        5.7,
        5.5,
        5.6,
        5.5,
        5.6,
        5.5
      ],
      "d_speed": [
        0.3,
        0.4,
        0.2,
        0.3,
        0.1,
        0.3,
        0.2,
        0.2,
        0.3,
        0.4,
        0.3,
        0.2,
        0.1,
        0.3,
        0.2
      ],
      "d_left": [
        0.35,
        0.36,
        0.34,
        0.37,
        0.33,
        0.38,
        0.36,
        0.35,
        0.34,
        0.37,
        0.35,
        0.33,
        0.36,
        0.34,
        0.35
      ],
      "d_right": [
        3.65,
        3.64,
        3.66,
        3.63,
        3.67,
        3.62,
        3.64,
        3.65,
        3.66,
        3.63,
        3.65,
        3.67,
        3.64,
        3.66,
        3.65
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, -0.1, 0, 0.1, -0.1, 0, 0.1, 0, -0.1, 0.1, 0, 0, -0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.5, 1.7, 1.5, 1.6, 1.5, 1.6, 1.5, 1.6, 1.5, 1.6, 1.5, 1.6, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.4, 1.5, 1.3, 1.5, 1.4, 1.5, 1.4, 1.5, 1.4, 1.5, 1.4, 1.5, 1.4, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 15,
      "s_pos": [
        0,
        0.5,
        1,
        1.5,
        2,
        2.5,
        3,
        3.5,
        4,
        4.5,
        5,
        5.5,
        6,
        6.5,
        7
      ],
      "d_pos": [
        0.1,
        0.1,
        -0.1,
        0,
        0.1,
        -0.1,
        0,
        0.1,
        0,
        -0.1,
        0.1,
        0,
        0,
        -0.1,
        0.1
      ],
      "s_speed": [
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5,
        6.5
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.5,
        1.6,
        1.5,
        1.7,
        1.5,
        1.6,
        1.5,
        1.6,
        1.5,
        1.6,
        1.5,
        1.6,
        1.5,
        1.6,
        1.5
      ],
      "d_right": [
        1.5,
        1.4,
        1.5,
        1.3,
        1.5,
        1.4,
        1.5,
        1.4,
        1.5,
        1.4,
        1.5,
        1.4,
        1.5,
        1.4,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 14,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.1, 0.0, -0.1, 0.1, 0.2, -0.2, 0.0, 0.1, -0.1, 0.0, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.5, 5.6, 5.7, 5.6, 5.5, 5.4, 5.5, 5.6, 5.7, 5.6, 5.5, 5.4]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.3, 0.2, 0.1, 0.0, 0.2, 0.3, 0.4, 0.1, 0.2, 0.0, 0.1, 0.3]\n\n        \n        - The distance to the left wall is: [1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2]\n\n\n        - The distance to the right wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 12,
      "s_pos": [
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55,
        60
      ],
      "d_pos": [
        0.2,
        0.1,
        0.0,
        -0.1,
        0.1,
        0.2,
        -0.2,
        0.0,
        0.1,
        -0.1,
        0.0,
        0.2
      ],
      "s_speed": [
        5.5,
        5.6,
        5.7,
        5.6,
        5.5,
        5.4,
        5.5,
        5.6,
        5.7,
        5.6,
        5.5,
        5.4
      ],
      "d_speed": [
        0.3,
        0.2,
        0.1,
        0.0,
        0.2,
        0.3,
        0.4,
        0.1,
        0.2,
        0.0,
        0.1,
        0.3
      ],
      "d_left": [
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2
      ],
      "d_right": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.2, 0.2, 0.1, 0, -0.1, -0.1, 0, 0.1, 0.1, 0.2, 0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1, 1.2, 1, 1.1, 1.2, 1.3, 1.1, 1, 1.2, 1.1, 1, 1.2, 1.1, 1]\n\n\n        - The distance to the right wall is: [1.5, 1.3, 1.5, 1.4, 1.3, 1.2, 1.4, 1.5, 1.3, 1.4, 1.5, 1.3, 1.4, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 14,
      "s_pos": [
        0,
        3,
        6,
        9,
        12,
        15,
        18,
        21,
        24,
        27,
        30,
        33,
        36,
        39
      ],
      "d_pos": [
        0.1,
        0.1,
        0.2,
        0.2,
        0.1,
        0,
        -0.1,
        -0.1,
        0,
        0.1,
        0.1,
        0.2,
        0.2,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1,
        1.2,
        1,
        1.1,
        1.2,
        1.3,
        1.1,
        1,
        1.2,
        1.1,
        1,
        1.2,
        1.1,
        1
      ],
      "d_right": [
        1.5,
        1.3,
        1.5,
        1.4,
        1.3,
        1.2,
        1.4,
        1.5,
        1.3,
        1.4,
        1.5,
        1.3,
        1.4,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3.1, 4.6, 6.2, 7.7, 9.3, 10.8, 12.4, 13.9, 15.5, 17.0, 18.6]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.0, -0.1, 0.0, 0.1, 0.0, -0.1, 0.0, 0.1, -0.1, 0.0, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 5.2, 5.1, 5.3, 5.2, 5.3, 5.1, 5.2, 5.3, 5.2, 5.3, 5.1, 5.2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.1, 0.2, 0.3, 0.1, 0.2, 0.3, 0.1, 0.2, 0.3, 0.1, 0.2]\n\n        \n        - The distance to the left wall is: [1, 1.2, 1.1, 1.2, 1.3, 1.1, 1.2, 1.3, 1.1, 1.2, 1.3, 1.1, 1.2]\n\n\n        - The distance to the right wall is: [1.5, 1.3, 1.4, 1.3, 1.2, 1.4, 1.3, 1.2, 1.4, 1.3, 1.2, 1.4, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 13,
      "s_pos": [
        0,
        1.5,
        3.1,
        4.6,
        6.2,
        7.7,
        9.3,
        10.8,
        12.4,
        13.9,
        15.5,
        17.0,
        18.6
      ],
      "d_pos": [
        0.1,
        0.2,
        0.0,
        -0.1,
        0.0,
        0.1,
        0.0,
        -0.1,
        0.0,
        0.1,
        -0.1,
        0.0,
        0.1
      ],
      "s_speed": [
        5,
        5.2,
        5.1,
        5.3,
        5.2,
        5.3,
        5.1,
        5.2,
        5.3,
        5.2,
        5.3,
        5.1,
        5.2
      ],
      "d_speed": [
        0.2,
        0.3,
        0.1,
        0.2,
        0.3,
        0.1,
        0.2,
        0.3,
        0.1,
        0.2,
        0.3,
        0.1,
        0.2
      ],
      "d_left": [
        1,
        1.2,
        1.1,
        1.2,
        1.3,
        1.1,
        1.2,
        1.3,
        1.1,
        1.2,
        1.3,
        1.1,
        1.2
      ],
      "d_right": [
        1.5,
        1.3,
        1.4,
        1.3,
        1.2,
        1.4,
        1.3,
        1.2,
        1.4,
        1.3,
        1.2,
        1.4,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0, -0.05, -0.1, -0.05, 0, 0.05, 0.1, 0.05, 0, -0.05, -0.1, -0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7, 6.9, 6.8, 6.7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0, -0.1, -0.1, 0, 0.1, 0.1, 0, -0.1, -0.1, 0, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.4, 1.5, 1.6, 1.5, 1.4, 1.3, 1.2, 1.3, 1.4, 1.5, 1.6, 1.5]\n\n\n        - The distance to the right wall is: [1.8, 1.7, 1.6, 1.5, 1.4, 1.5, 1.6, 1.7, 1.8, 1.7, 1.6, 1.5, 1.4, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 14,
      "s_pos": [
        5,
        5.5,
        6,
        6.5,
        7,
        7.5,
        8,
        8.5,
        9,
        9.5,
        10,
        10.5,
        11,
        11.5
      ],
      "d_pos": [
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.05,
        0,
        0.05,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.05
      ],
      "s_speed": [
        6,
        6.1,
        6.2,
        6.3,
        6.4,
        6.5,
        6.6,
        6.7,
        6.8,
        6.9,
        7,
        6.9,
        6.8,
        6.7
      ],
      "d_speed": [
        0.1,
        0.1,
        0,
        -0.1,
        -0.1,
        0,
        0.1,
        0.1,
        0,
        -0.1,
        -0.1,
        0,
        0.1,
        0.1
      ],
      "d_left": [
        1.2,
        1.3,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.3,
        1.2,
        1.3,
        1.4,
        1.5,
        1.6,
        1.5
      ],
      "d_right": [
        1.8,
        1.7,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.7,
        1.8,
        1.7,
        1.6,
        1.5,
        1.4,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 12, 14, 16, 18]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.2, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 5,
      "s_pos": [
        10,
        12,
        14,
        16,
        18
      ],
      "d_pos": [
        0.1,
        0.1,
        0.2,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3, 4.5, 6, 7.5, 9]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.1, 0.2, -0.2, 0.1, -0.1, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 5.2, 5.1, 5.3, 5.4, 5.2, 5.1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.3, 0.4, 0.2, 0.3, 0.4, 0.3, 0.2]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.4, 1.5, 1.6, 1.4, 1.5]\n\n\n        - The distance to the right wall is: [1.4, 1.3, 1.5, 1.4, 1.3, 1.5, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 7,
      "s_pos": [
        0,
        1.5,
        3,
        4.5,
        6,
        7.5,
        9
      ],
      "d_pos": [
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.1,
        -0.1,
        0.2
      ],
      "s_speed": [
        5,
        5.2,
        5.1,
        5.3,
        5.4,
        5.2,
        5.1
      ],
      "d_speed": [
        0.3,
        0.4,
        0.2,
        0.3,
        0.4,
        0.3,
        0.2
      ],
      "d_left": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.6,
        1.4,
        1.5
      ],
      "d_right": [
        1.4,
        1.3,
        1.5,
        1.4,
        1.3,
        1.5,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [1, 6, 11, 16, 21, 26, 31, 36]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, -0.1, -0.1, 0.1, 0.1, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.2, 0.2, 0.3, 0.3, 0.2, 0.2, 0.3]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.4, 1.4, 1.5, 1.5, 1.4]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.4, 1.4, 1.5, 1.5, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 8,
      "s_pos": [
        1,
        6,
        11,
        16,
        21,
        26,
        31,
        36
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        -0.1,
        -0.1,
        0.1,
        0.1,
        -0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.2,
        0.2,
        0.2,
        0.3,
        0.3,
        0.2,
        0.2,
        0.3
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.4,
        1.4,
        1.5,
        1.5,
        1.4
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.4,
        1.4,
        1.5,
        1.5,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 12, 14, 16, 18, 20]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, -0.5, 0.6, -0.6, 0.5, -0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, 0.6, 0.7, 0.7, 0.6, 0.6]\n\n        \n        - The distance to the left wall is: [0.8, 0.9, 0.7, 0.9, 0.8, 0.9]\n\n\n        - The distance to the right wall is: [0.8, 0.9, 0.7, 0.9, 0.8, 0.9]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 6,
      "s_pos": [
        10,
        12,
        14,
        16,
        18,
        20
      ],
      "d_pos": [
        0.5,
        -0.5,
        0.6,
        -0.6,
        0.5,
        -0.5
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.6,
        0.6,
        0.7,
        0.7,
        0.6,
        0.6
      ],
      "d_left": [
        0.8,
        0.9,
        0.7,
        0.9,
        0.8,
        0.9
      ],
      "d_right": [
        0.8,
        0.9,
        0.7,
        0.9,
        0.8,
        0.9
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.1, 0.3, 0.2, 0.1, 0.3, 0.2, 0.1, 0.2, 0.1, 0.3, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6, 6.5, 6, 6.5, 6, 6.5, 6, 6.5, 6, 6.5, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.2, 0.4, 0.3, 0.2, 0.4, 0.3, 0.2, 0.3, 0.2, 0.4, 0.3]\n\n        \n        - The distance to the left wall is: [2, 2.1, 2, 2.1, 2, 2.1, 2, 2.1, 2, 2.1, 2, 2.1, 2]\n\n\n        - The distance to the right wall is: [1.9, 1.8, 1.9, 1.8, 1.9, 1.8, 1.9, 1.8, 1.9, 1.8, 1.9, 1.8, 1.9]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 13,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55,
        60
      ],
      "d_pos": [
        0.1,
        0.2,
        0.1,
        0.3,
        0.2,
        0.1,
        0.3,
        0.2,
        0.1,
        0.2,
        0.1,
        0.3,
        0.2
      ],
      "s_speed": [
        6,
        6.5,
        6,
        6.5,
        6,
        6.5,
        6,
        6.5,
        6,
        6.5,
        6,
        6.5,
        6
      ],
      "d_speed": [
        0.2,
        0.3,
        0.2,
        0.4,
        0.3,
        0.2,
        0.4,
        0.3,
        0.2,
        0.3,
        0.2,
        0.4,
        0.3
      ],
      "d_left": [
        2,
        2.1,
        2,
        2.1,
        2,
        2.1,
        2,
        2.1,
        2,
        2.1,
        2,
        2.1,
        2
      ],
      "d_right": [
        1.9,
        1.8,
        1.9,
        1.8,
        1.9,
        1.8,
        1.9,
        1.8,
        1.9,
        1.8,
        1.9,
        1.8,
        1.9
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.2, 1.1, 1.3, 1.2, 1.2, 1.1, 1.3]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.4, 1.5, 1.5, 1.6, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 7,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.2,
        1.1,
        1.3,
        1.2,
        1.2,
        1.1,
        1.3
      ],
      "d_right": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.5,
        1.6,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.15, 0.1, 0.05, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.25, 0.2, 0.15, 0.2]\n\n        \n        - The distance to the left wall is: [0.3, 0.35, 0.3, 0.25, 0.3, 0.35]\n\n\n        - The distance to the right wall is: [3.7, 3.65, 3.7, 3.75, 3.7, 3.65]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 6,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35
      ],
      "d_pos": [
        0.1,
        0.2,
        0.15,
        0.1,
        0.05,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.2,
        0.3,
        0.25,
        0.2,
        0.15,
        0.2
      ],
      "d_left": [
        0.3,
        0.35,
        0.3,
        0.25,
        0.3,
        0.35
      ],
      "d_right": [
        3.7,
        3.65,
        3.7,
        3.75,
        3.7,
        3.65
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 10, 10, 10, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, 0.5, 0.5, 0.5, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.3, 0.3, 0.3, 0.3, 0.3]\n\n\n        - The distance to the right wall is: [0.3, 0.3, 0.3, 0.3, 0.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 5,
      "s_pos": [
        10,
        10,
        10,
        10,
        10
      ],
      "d_pos": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.3,
        0.3,
        0.3,
        0.3,
        0.3
      ],
      "d_right": [
        0.3,
        0.3,
        0.3,
        0.3,
        0.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10.5, 10.4, 10.3, 10.2, 10.1, 10.0, 9.9, 9.8, 9.7, 9.6, 9.5, 9.4]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.2, 0.15, -0.1, 0.2, -0.15, 0.1, -0.2, 0.15, -0.1, 0.2, -0.15]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.3, -0.3, 0.3, -0.3, 0.3, -0.3, 0.3, -0.3, 0.3, -0.3, 0.3, -0.3]\n\n        \n        - The distance to the left wall is: [0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6]\n\n\n        - The distance to the right wall is: [0.5, 0.4, 0.5, 0.4, 0.5, 0.4, 0.5, 0.4, 0.5, 0.4, 0.5, 0.4]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 12,
      "s_pos": [
        10.5,
        10.4,
        10.3,
        10.2,
        10.1,
        10.0,
        9.9,
        9.8,
        9.7,
        9.6,
        9.5,
        9.4
      ],
      "d_pos": [
        0.1,
        -0.2,
        0.15,
        -0.1,
        0.2,
        -0.15,
        0.1,
        -0.2,
        0.15,
        -0.1,
        0.2,
        -0.15
      ],
      "s_speed": [
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0
      ],
      "d_speed": [
        0.3,
        -0.3,
        0.3,
        -0.3,
        0.3,
        -0.3,
        0.3,
        -0.3,
        0.3,
        -0.3,
        0.3,
        -0.3
      ],
      "d_left": [
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6
      ],
      "d_right": [
        0.5,
        0.4,
        0.5,
        0.4,
        0.5,
        0.4,
        0.5,
        0.4,
        0.5,
        0.4,
        0.5,
        0.4
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5.0, 4.9, 4.8, 4.7, 4.6, 4.5, 4.4, 4.3, 4.2, 4.1, 4.0, 3.9, 3.8, 3.7, 3.6]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.2, 0.25, 0.3, 0.28, 0.25, 0.2, 0.15, 0.1, 0.05, 0.0, -0.05, -0.1, -0.15]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.05, 0.1, 0.15, 0.2, 0.25, 0.2, 0.15, 0.1, 0.05, 0.0, -0.05, -0.1, -0.15, -0.2, -0.25]\n\n        \n        - The distance to the left wall is: [1.5, 1.45, 1.4, 1.35, 1.3, 1.28, 1.25, 1.2, 1.15, 1.1, 1.05, 1.0, 0.95, 0.9, 0.85]\n\n\n        - The distance to the right wall is: [2.5, 2.55, 2.6, 2.65, 2.7, 2.72, 2.75, 2.8, 2.85, 2.9, 2.95, 3.0, 3.05, 3.1, 3.15]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 15,
      "s_pos": [
        5.0,
        4.9,
        4.8,
        4.7,
        4.6,
        4.5,
        4.4,
        4.3,
        4.2,
        4.1,
        4.0,
        3.9,
        3.8,
        3.7,
        3.6
      ],
      "d_pos": [
        0.1,
        0.15,
        0.2,
        0.25,
        0.3,
        0.28,
        0.25,
        0.2,
        0.15,
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1,
        -0.15
      ],
      "s_speed": [
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2
      ],
      "d_speed": [
        0.05,
        0.1,
        0.15,
        0.2,
        0.25,
        0.2,
        0.15,
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25
      ],
      "d_left": [
        1.5,
        1.45,
        1.4,
        1.35,
        1.3,
        1.28,
        1.25,
        1.2,
        1.15,
        1.1,
        1.05,
        1.0,
        0.95,
        0.9,
        0.85
      ],
      "d_right": [
        2.5,
        2.55,
        2.6,
        2.65,
        2.7,
        2.72,
        2.75,
        2.8,
        2.85,
        2.9,
        2.95,
        3.0,
        3.05,
        3.1,
        3.15
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.2, 0.2, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7, 6.5, 6, 5.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.1, 0.3, 0.2, 0.1, 0.2]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.4, 1.5, 1.6, 1.5]\n\n\n        - The distance to the right wall is: [1.2, 1.1, 1.3, 1.2, 1.1, 1.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 6,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35
      ],
      "d_pos": [
        0.1,
        0.1,
        0.2,
        0.2,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6.5,
        7,
        6.5,
        6,
        5.5
      ],
      "d_speed": [
        0.2,
        0.1,
        0.3,
        0.2,
        0.1,
        0.2
      ],
      "d_left": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.6,
        1.5
      ],
      "d_right": [
        1.2,
        1.1,
        1.3,
        1.2,
        1.1,
        1.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [100, 100, 100, 100, 100, 100, 100, 100, 100, 100]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 10,
      "s_pos": [
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.1, 0.3, 0.2, 0.1, 0.3, 0.2, 0.1, 0.2, 0.1, 0.3, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6, 6.5, 6, 6.5, 6, 6.5, 6, 6.5, 6, 6.5, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.2, 0.4, 0.3, 0.2, 0.4, 0.3, 0.2, 0.3, 0.2, 0.4, 0.3]\n\n        \n        - The distance to the left wall is: [2, 2.1, 2, 2.1, 2, 2.1, 2, 2.1, 2, 2.1, 2, 2.1, 2]\n\n\n        - The distance to the right wall is: [1.9, 1.8, 1.9, 1.8, 1.9, 1.8, 1.9, 1.8, 1.9, 1.8, 1.9, 1.8, 1.9]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 13,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55,
        60
      ],
      "d_pos": [
        0.1,
        0.2,
        0.1,
        0.3,
        0.2,
        0.1,
        0.3,
        0.2,
        0.1,
        0.2,
        0.1,
        0.3,
        0.2
      ],
      "s_speed": [
        6,
        6.5,
        6,
        6.5,
        6,
        6.5,
        6,
        6.5,
        6,
        6.5,
        6,
        6.5,
        6
      ],
      "d_speed": [
        0.2,
        0.3,
        0.2,
        0.4,
        0.3,
        0.2,
        0.4,
        0.3,
        0.2,
        0.3,
        0.2,
        0.4,
        0.3
      ],
      "d_left": [
        2,
        2.1,
        2,
        2.1,
        2,
        2.1,
        2,
        2.1,
        2,
        2.1,
        2,
        2.1,
        2
      ],
      "d_right": [
        1.9,
        1.8,
        1.9,
        1.8,
        1.9,
        1.8,
        1.9,
        1.8,
        1.9,
        1.8,
        1.9,
        1.8,
        1.9
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 7,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3, 4.5, 6, 7.5, 9]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.2, 0.3, -0.3, 0.2, -0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6, 5.5, 6, 6.5, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.4, 0.6, 0.5, 0.7, 0.4, 0.6, 0.5]\n\n        \n        - The distance to the left wall is: [1.5, 1.3, 1.6, 1.2, 1.4, 1.3, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.7, 1.4, 1.8, 1.6, 1.7, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 7,
      "s_pos": [
        0,
        1.5,
        3,
        4.5,
        6,
        7.5,
        9
      ],
      "d_pos": [
        0.1,
        -0.2,
        0.3,
        -0.3,
        0.2,
        -0.1,
        0.1
      ],
      "s_speed": [
        6,
        6.5,
        6,
        5.5,
        6,
        6.5,
        6
      ],
      "d_speed": [
        0.4,
        0.6,
        0.5,
        0.7,
        0.4,
        0.6,
        0.5
      ],
      "d_left": [
        1.5,
        1.3,
        1.6,
        1.2,
        1.4,
        1.3,
        1.5
      ],
      "d_right": [
        1.5,
        1.7,
        1.4,
        1.8,
        1.6,
        1.7,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 9.8, 9.6, 9.4, 9.2, 9, 8.8, 8.6, 8.4]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [-0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3]\n\n\n        - The distance to the right wall is: [1, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 9,
      "s_pos": [
        10,
        9.8,
        9.6,
        9.4,
        9.2,
        9,
        8.8,
        8.6,
        8.4
      ],
      "d_pos": [
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2
      ],
      "s_speed": [
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2
      ],
      "d_speed": [
        -0.05,
        -0.05,
        -0.05,
        -0.05,
        -0.05,
        -0.05,
        -0.05,
        -0.05,
        -0.05
      ],
      "d_left": [
        1.5,
        1.6,
        1.7,
        1.8,
        1.9,
        2,
        2.1,
        2.2,
        2.3
      ],
      "d_right": [
        1,
        0.9,
        0.8,
        0.7,
        0.6,
        0.5,
        0.4,
        0.3,
        0.2
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1, 1.1, 1.1, 1, 1, 1.1, 1.1, 1, 1, 1.1]\n\n\n        - The distance to the right wall is: [1.2, 1.1, 1.1, 1.2, 1.2, 1.1, 1.1, 1.2, 1.2, 1.1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 10,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1,
        1.1,
        1.1,
        1,
        1,
        1.1,
        1.1,
        1,
        1,
        1.1
      ],
      "d_right": [
        1.2,
        1.1,
        1.1,
        1.2,
        1.2,
        1.1,
        1.1,
        1.2,
        1.2,
        1.1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, -0.5, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.6, 0.6]\n\n        \n        - The distance to the left wall is: [1.5, 0.3, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 2.7, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 3,
      "s_pos": [
        10,
        15,
        20
      ],
      "d_pos": [
        0.5,
        -0.5,
        0.5
      ],
      "s_speed": [
        6,
        6,
        6
      ],
      "d_speed": [
        0.6,
        -0.6,
        0.6
      ],
      "d_left": [
        1.5,
        0.3,
        1.5
      ],
      "d_right": [
        1.5,
        2.7,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 11.0, 12.1]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0.0, -0.05, -0.1, -0.05, 0.0, 0.05, 0.1, 0.05, 0.0, -0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.5, 6.6, 6.7, 6.8, 6.9, 7.0, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.0, -0.1, -0.1, -0.1, 0.0, 0.1, 0.1, 0.1, 0.0, -0.1]\n\n        \n        - The distance to the left wall is: [1.2, 1.1, 1.3, 1.2, 1.1, 1.3, 1.2, 1.1, 1.3, 1.2, 1.1, 1.3]\n\n\n        - The distance to the right wall is: [0.8, 0.9, 0.7, 0.8, 0.9, 0.7, 0.8, 0.9, 0.7, 0.8, 0.9, 0.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 12,
      "s_pos": [
        0,
        1.1,
        2.2,
        3.3,
        4.4,
        5.5,
        6.6,
        7.7,
        8.8,
        9.9,
        11.0,
        12.1
      ],
      "d_pos": [
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1,
        -0.05,
        0.0,
        0.05,
        0.1,
        0.05,
        0.0,
        -0.05
      ],
      "s_speed": [
        6.5,
        6.6,
        6.7,
        6.8,
        6.9,
        7.0,
        7.1,
        7.2,
        7.3,
        7.4,
        7.5,
        7.6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.0,
        -0.1,
        -0.1,
        -0.1,
        0.0,
        0.1,
        0.1,
        0.1,
        0.0,
        -0.1
      ],
      "d_left": [
        1.2,
        1.1,
        1.3,
        1.2,
        1.1,
        1.3,
        1.2,
        1.1,
        1.3,
        1.2,
        1.1,
        1.3
      ],
      "d_right": [
        0.8,
        0.9,
        0.7,
        0.8,
        0.9,
        0.7,
        0.8,
        0.9,
        0.7,
        0.8,
        0.9,
        0.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.35, -0.36, -0.37, -0.38, -0.39, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.5, 5.6, 5.7, 5.6, 5.5, 5.4, 5.3, 5.4, 5.5, 5.6, 5.7, 5.6, 5.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.2, 0.2, 0.3, 0.3, 0.2, 0.1, 0.1, 0.2, 0.3, 0.3, 0.2, 0.1]\n\n        \n        - The distance to the left wall is: [0.35, 0.34, 0.33, 0.32, 0.31, 0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38]\n\n\n        - The distance to the right wall is: [4.65, 4.66, 4.67, 4.68, 4.69, 4.69, 4.68, 4.67, 4.66, 4.65, 4.64, 4.63, 4.62]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 13,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "d_pos": [
        -0.35,
        -0.36,
        -0.37,
        -0.38,
        -0.39,
        -0.39,
        -0.38,
        -0.37,
        -0.36,
        -0.35,
        -0.34,
        -0.33,
        -0.32
      ],
      "s_speed": [
        5.5,
        5.6,
        5.7,
        5.6,
        5.5,
        5.4,
        5.3,
        5.4,
        5.5,
        5.6,
        5.7,
        5.6,
        5.5
      ],
      "d_speed": [
        0.2,
        0.2,
        0.2,
        0.3,
        0.3,
        0.2,
        0.1,
        0.1,
        0.2,
        0.3,
        0.3,
        0.2,
        0.1
      ],
      "d_left": [
        0.35,
        0.34,
        0.33,
        0.32,
        0.31,
        0.31,
        0.32,
        0.33,
        0.34,
        0.35,
        0.36,
        0.37,
        0.38
      ],
      "d_right": [
        4.65,
        4.66,
        4.67,
        4.68,
        4.69,
        4.69,
        4.68,
        4.67,
        4.66,
        4.65,
        4.64,
        4.63,
        4.62
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 0 seconds in 4 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 2, 4, 6, 8]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 0,
      "data_samples": 4,
      "s_pos": [
        0,
        2,
        4,
        6,
        8
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3.0, 4.5, 6.0, 7.5, 9.0, 10.5, 12.0, 13.5, 15.0, 16.5, 18.0]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0.0, -0.05, -0.1, -0.05, 0.0, 0.05, 0.1, 0.05, 0.0, -0.05, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.0, 6.2, 6.1, 5.9, 6.0, 6.1, 5.8, 6.0, 6.2, 6.1, 5.9, 6.0, 6.1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.15, 0.0, -0.15, -0.2, -0.15, 0.0, 0.15, 0.2, 0.15, 0.0, -0.15, -0.2]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 13,
      "s_pos": [
        0,
        1.5,
        3.0,
        4.5,
        6.0,
        7.5,
        9.0,
        10.5,
        12.0,
        13.5,
        15.0,
        16.5,
        18.0
      ],
      "d_pos": [
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1,
        -0.05,
        0.0,
        0.05,
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1
      ],
      "s_speed": [
        6.0,
        6.2,
        6.1,
        5.9,
        6.0,
        6.1,
        5.8,
        6.0,
        6.2,
        6.1,
        5.9,
        6.0,
        6.1
      ],
      "d_speed": [
        0.2,
        0.15,
        0.0,
        -0.15,
        -0.2,
        -0.15,
        0.0,
        0.15,
        0.2,
        0.15,
        0.0,
        -0.15,
        -0.2
      ],
      "d_left": [
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5
      ],
      "d_right": [
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.4, 0.5, -0.6, 0.4, -0.5, 0.6, -0.4, 0.5, -0.6, 0.4, -0.5, 0.6, -0.4, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, 0.7, 0.8, 0.5, 0.6, 0.7, 0.8, 0.5, 0.6, 0.7, 0.8, 0.5, 0.6, 0.7]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.6, 1.4, 1.5, 1.6, 1.4, 1.5, 1.6, 1.4, 1.5, 1.6, 1.4, 1.5]\n\n\n        - The distance to the right wall is: [1.2, 1.3, 1.1, 1.3, 1.2, 1.1, 1.3, 1.2, 1.1, 1.3, 1.2, 1.1, 1.3, 1.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 14,
      "s_pos": [
        10,
        15,
        21,
        27,
        33,
        39,
        45,
        51,
        57,
        63,
        69,
        75,
        81,
        87
      ],
      "d_pos": [
        -0.4,
        0.5,
        -0.6,
        0.4,
        -0.5,
        0.6,
        -0.4,
        0.5,
        -0.6,
        0.4,
        -0.5,
        0.6,
        -0.4,
        0.5
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.6,
        0.7,
        0.8,
        0.5,
        0.6,
        0.7,
        0.8,
        0.5,
        0.6,
        0.7,
        0.8,
        0.5,
        0.6,
        0.7
      ],
      "d_left": [
        1.5,
        1.4,
        1.6,
        1.4,
        1.5,
        1.6,
        1.4,
        1.5,
        1.6,
        1.4,
        1.5,
        1.6,
        1.4,
        1.5
      ],
      "d_right": [
        1.2,
        1.3,
        1.1,
        1.3,
        1.2,
        1.1,
        1.3,
        1.2,
        1.1,
        1.3,
        1.2,
        1.1,
        1.3,
        1.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.5]\n\n\n        - The distance to the right wall is: [1.4, 1.5, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 3,
      "s_pos": [
        10,
        15,
        20
      ],
      "d_pos": [
        0.1,
        0.2,
        0.1
      ],
      "s_speed": [
        6,
        6.5,
        7
      ],
      "d_speed": [
        0.1,
        0.2,
        0.1
      ],
      "d_left": [
        1.5,
        1.6,
        1.5
      ],
      "d_right": [
        1.4,
        1.5,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.2, 1.1, 1.3, 1.2, 1.2, 1.1, 1.3]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.4, 1.5, 1.5, 1.6, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 7,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.2,
        1.1,
        1.3,
        1.2,
        1.2,
        1.1,
        1.3
      ],
      "d_right": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.5,
        1.6,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 11, 12, 13, 14, 15, 16]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\n\n\n        - The distance to the right wall is: [5, 5, 5, 5, 5, 5, 5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 7,
      "s_pos": [
        10,
        11,
        12,
        13,
        14,
        15,
        16
      ],
      "d_pos": [
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3
      ],
      "d_right": [
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 15,
      "s_pos": [
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50
      ],
      "d_pos": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 9.8, 9.6, 9.4, 9.2, 9, 8.8, 8.6, 8.4, 8.2, 8, 7.8, 7.6, 7.4]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.2, 0.25, 0.3, 0.25, 0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.4, 1.5, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1, 0.9, 0.8, 0.7]\n\n\n        - The distance to the right wall is: [0.8, 0.7, 0.6, 0.5, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 14,
      "s_pos": [
        10,
        9.8,
        9.6,
        9.4,
        9.2,
        9,
        8.8,
        8.6,
        8.4,
        8.2,
        8,
        7.8,
        7.6,
        7.4
      ],
      "d_pos": [
        0.1,
        0.15,
        0.2,
        0.25,
        0.3,
        0.25,
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15
      ],
      "s_speed": [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1
      ],
      "d_left": [
        1.2,
        1.3,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.3,
        1.2,
        1.1,
        1,
        0.9,
        0.8,
        0.7
      ],
      "d_right": [
        0.8,
        0.7,
        0.6,
        0.5,
        0.4,
        0.5,
        0.6,
        0.7,
        0.8,
        0.9,
        1,
        1.1,
        1.2,
        1.3
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.2, 1.2, 1.2]\n\n\n        - The distance to the right wall is: [1.2, 1.2, 1.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 3,
      "s_pos": [
        10,
        15,
        20
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6.5,
        7
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.2,
        1.2,
        1.2
      ],
      "d_right": [
        1.2,
        1.2,
        1.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3, 4.5, 6, 7.5, 9]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.1, 0.2, -0.2, 0.1, -0.1, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 5.2, 5.1, 5.3, 5.4, 5.2, 5.1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.3, 0.4, 0.2, 0.3, 0.4, 0.3, 0.2]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.4, 1.5, 1.6, 1.4, 1.5]\n\n\n        - The distance to the right wall is: [1.4, 1.3, 1.5, 1.4, 1.3, 1.5, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 7,
      "s_pos": [
        0,
        1.5,
        3,
        4.5,
        6,
        7.5,
        9
      ],
      "d_pos": [
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.1,
        -0.1,
        0.2
      ],
      "s_speed": [
        5,
        5.2,
        5.1,
        5.3,
        5.4,
        5.2,
        5.1
      ],
      "d_speed": [
        0.3,
        0.4,
        0.2,
        0.3,
        0.4,
        0.3,
        0.2
      ],
      "d_left": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.6,
        1.4,
        1.5
      ],
      "d_right": [
        1.4,
        1.3,
        1.5,
        1.4,
        1.3,
        1.5,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 9.5, 9, 8.5, 8, 7.5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.1, 0, -0.1, -0.2, -0.3]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-2.5, -2.5, -2.5, -2.5, -2.5, -2.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\n\n        \n        - The distance to the left wall is: [0.8, 0.9, 1, 1.1, 1.2, 1.3]\n\n\n        - The distance to the right wall is: [1.2, 1.1, 1, 0.9, 0.8, 0.7]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 6,
      "s_pos": [
        10,
        9.5,
        9,
        8.5,
        8,
        7.5
      ],
      "d_pos": [
        0.2,
        0.1,
        0,
        -0.1,
        -0.2,
        -0.3
      ],
      "s_speed": [
        -2.5,
        -2.5,
        -2.5,
        -2.5,
        -2.5,
        -2.5
      ],
      "d_speed": [
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3
      ],
      "d_left": [
        0.8,
        0.9,
        1,
        1.1,
        1.2,
        1.3
      ],
      "d_right": [
        1.2,
        1.1,
        1,
        0.9,
        0.8,
        0.7
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 0 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 48, 46, 44, 42, 40, 38, 36, 34, 32]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, 0.4, 0.3, 0.2, 0.1, 0, -0.1, -0.2, -0.3, -0.4]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-2, -2, -2, -2, -2, -2, -2, -2, -2, -2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\n\n\n        - The distance to the right wall is: [1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 0,
      "data_samples": 10,
      "s_pos": [
        50,
        48,
        46,
        44,
        42,
        40,
        38,
        36,
        34,
        32
      ],
      "d_pos": [
        0.5,
        0.4,
        0.3,
        0.2,
        0.1,
        0,
        -0.1,
        -0.2,
        -0.3,
        -0.4
      ],
      "s_speed": [
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6
      ],
      "d_right": [
        1.4,
        1.4,
        1.4,
        1.4,
        1.4,
        1.4,
        1.4,
        1.4,
        1.4,
        1.4
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.12, 0.08, 0.05, 0.1, 0.15, 0.1, 0.05, 0.08, 0.12, 0.1, 0.07, 0.05, 0.1, 0.12]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.1, 6.2, 6.1, 6, 5.9, 6, 6.1, 6.2, 6.1, 6, 5.9, 6, 6.1, 6.2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.15, 0.1, 0.05, 0.2, 0.25, 0.15, 0.1, 0.05, 0.1, 0.2, 0.15, 0.1, 0.05, 0.2]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.3, 1.5, 1.6, 1.5, 1.4, 1.3, 1.5, 1.5, 1.4, 1.3, 1.5, 1.6, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.7, 1.5, 1.4, 1.5, 1.6, 1.7, 1.5, 1.5, 1.6, 1.7, 1.5, 1.4, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 15,
      "s_pos": [
        0,
        0.5,
        1,
        1.5,
        2,
        2.5,
        3,
        3.5,
        4,
        4.5,
        5,
        5.5,
        6,
        6.5,
        7
      ],
      "d_pos": [
        0.1,
        0.12,
        0.08,
        0.05,
        0.1,
        0.15,
        0.1,
        0.05,
        0.08,
        0.12,
        0.1,
        0.07,
        0.05,
        0.1,
        0.12
      ],
      "s_speed": [
        6,
        6.1,
        6.2,
        6.1,
        6,
        5.9,
        6,
        6.1,
        6.2,
        6.1,
        6,
        5.9,
        6,
        6.1,
        6.2
      ],
      "d_speed": [
        0.2,
        0.15,
        0.1,
        0.05,
        0.2,
        0.25,
        0.15,
        0.1,
        0.05,
        0.1,
        0.2,
        0.15,
        0.1,
        0.05,
        0.2
      ],
      "d_left": [
        1.5,
        1.4,
        1.3,
        1.5,
        1.6,
        1.5,
        1.4,
        1.3,
        1.5,
        1.5,
        1.4,
        1.3,
        1.5,
        1.6,
        1.5
      ],
      "d_right": [
        1.5,
        1.6,
        1.7,
        1.5,
        1.4,
        1.5,
        1.6,
        1.7,
        1.5,
        1.5,
        1.6,
        1.7,
        1.5,
        1.4,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [100, 100, 100, 100, 100, 100]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 6,
      "s_pos": [
        100,
        100,
        100,
        100,
        100,
        100
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0.0, 0.7, 1.4, 2.1, 2.8, 3.5, 4.2, 4.9, 5.6]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.0, -0.1, -0.05, 0.05, 0.1, 0.0, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.0, -0.1, -0.05, 0.05, 0.1, 0.0, -0.1]\n\n        \n        - The distance to the left wall is: [1.0, 1.1, 1.0, 0.9, 1.0, 1.1, 1.0, 1.1, 0.9]\n\n\n        - The distance to the right wall is: [1.0, 0.9, 1.0, 1.1, 1.0, 0.9, 1.0, 0.9, 1.1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 9,
      "s_pos": [
        0.0,
        0.7,
        1.4,
        2.1,
        2.8,
        3.5,
        4.2,
        4.9,
        5.6
      ],
      "d_pos": [
        0.1,
        0.1,
        0.0,
        -0.1,
        -0.05,
        0.05,
        0.1,
        0.0,
        -0.1
      ],
      "s_speed": [
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0
      ],
      "d_speed": [
        0.1,
        0.1,
        0.0,
        -0.1,
        -0.05,
        0.05,
        0.1,
        0.0,
        -0.1
      ],
      "d_left": [
        1.0,
        1.1,
        1.0,
        0.9,
        1.0,
        1.1,
        1.0,
        1.1,
        0.9
      ],
      "d_right": [
        1.0,
        0.9,
        1.0,
        1.1,
        1.0,
        0.9,
        1.0,
        0.9,
        1.1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.1, 0.2, -0.2, 0.1, -0.1, 0.2, -0.2, 0.1, -0.1, 0.2, -0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [4, 5, 6, 5, 6, 5, 4, 5, 6, 5, 4, 5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.4, 0.3, 0.4, 0.3, 0.2, 0.3, 0.4, 0.3, 0.2, 0.3]\n\n        \n        - The distance to the left wall is: [1.2, 1.1, 1.3, 1.0, 1.2, 1.1, 1.3, 1.0, 1.2, 1.1, 1.3, 1.0]\n\n\n        - The distance to the right wall is: [1.0, 1.2, 1.0, 1.3, 1.0, 1.2, 1.0, 1.3, 1.0, 1.2, 1.0, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 12,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55
      ],
      "d_pos": [
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.1,
        -0.1,
        0.2,
        -0.2
      ],
      "s_speed": [
        4,
        5,
        6,
        5,
        6,
        5,
        4,
        5,
        6,
        5,
        4,
        5
      ],
      "d_speed": [
        0.2,
        0.3,
        0.4,
        0.3,
        0.4,
        0.3,
        0.2,
        0.3,
        0.4,
        0.3,
        0.2,
        0.3
      ],
      "d_left": [
        1.2,
        1.1,
        1.3,
        1.0,
        1.2,
        1.1,
        1.3,
        1.0,
        1.2,
        1.1,
        1.3,
        1.0
      ],
      "d_right": [
        1.0,
        1.2,
        1.0,
        1.3,
        1.0,
        1.2,
        1.0,
        1.3,
        1.0,
        1.2,
        1.0,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 14,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3.1, 4.6, 6.2, 7.8, 9.3, 10.9, 12.4, 14.0]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0.2, -0.1, 0.05, -0.15, 0.1, 0.0, -0.05, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.2, 5.3, 5.5, 5.6, 5.4, 5.7, 5.5, 5.6, 5.7, 5.4]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.15, 0.2, 0.1, 0.05, 0.1, 0.15, 0.1, 0.05, 0.1]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.2, 1.3, 1.3, 1.2, 1.3, 1.2, 1.3, 1.2]\n\n\n        - The distance to the right wall is: [1.3, 1.2, 1.3, 1.2, 1.2, 1.3, 1.2, 1.3, 1.2, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 10,
      "s_pos": [
        0,
        1.5,
        3.1,
        4.6,
        6.2,
        7.8,
        9.3,
        10.9,
        12.4,
        14.0
      ],
      "d_pos": [
        0.1,
        0.05,
        0.2,
        -0.1,
        0.05,
        -0.15,
        0.1,
        0.0,
        -0.05,
        0.1
      ],
      "s_speed": [
        5.2,
        5.3,
        5.5,
        5.6,
        5.4,
        5.7,
        5.5,
        5.6,
        5.7,
        5.4
      ],
      "d_speed": [
        0.1,
        0.15,
        0.2,
        0.1,
        0.05,
        0.1,
        0.15,
        0.1,
        0.05,
        0.1
      ],
      "d_left": [
        1.2,
        1.3,
        1.2,
        1.3,
        1.3,
        1.2,
        1.3,
        1.2,
        1.3,
        1.2
      ],
      "d_right": [
        1.3,
        1.2,
        1.3,
        1.2,
        1.2,
        1.3,
        1.2,
        1.3,
        1.2,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\n\n\n        - The distance to the right wall is: [1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 12,
      "s_pos": [
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100
      ],
      "d_pos": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8
      ],
      "d_right": [
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 0 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 48, 46, 44, 42, 40, 38, 36, 34, 32]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, 0.4, 0.3, 0.2, 0.1, 0, -0.1, -0.2, -0.3, -0.4]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-2, -2, -2, -2, -2, -2, -2, -2, -2, -2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\n\n\n        - The distance to the right wall is: [1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 0,
      "data_samples": 10,
      "s_pos": [
        50,
        48,
        46,
        44,
        42,
        40,
        38,
        36,
        34,
        32
      ],
      "d_pos": [
        0.5,
        0.4,
        0.3,
        0.2,
        0.1,
        0,
        -0.1,
        -0.2,
        -0.3,
        -0.4
      ],
      "s_speed": [
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6
      ],
      "d_right": [
        1.4,
        1.4,
        1.4,
        1.4,
        1.4,
        1.4,
        1.4,
        1.4,
        1.4,
        1.4
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 0 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 48, 46, 44, 42, 40, 38, 36, 34, 32]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, 0.4, 0.3, 0.2, 0.1, 0, -0.1, -0.2, -0.3, -0.4]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-2, -2, -2, -2, -2, -2, -2, -2, -2, -2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\n\n\n        - The distance to the right wall is: [1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 0,
      "data_samples": 10,
      "s_pos": [
        50,
        48,
        46,
        44,
        42,
        40,
        38,
        36,
        34,
        32
      ],
      "d_pos": [
        0.5,
        0.4,
        0.3,
        0.2,
        0.1,
        0,
        -0.1,
        -0.2,
        -0.3,
        -0.4
      ],
      "s_speed": [
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6
      ],
      "d_right": [
        1.4,
        1.4,
        1.4,
        1.4,
        1.4,
        1.4,
        1.4,
        1.4,
        1.4,
        1.4
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 11, 12, 13, 14, 15, 16]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\n\n\n        - The distance to the right wall is: [5, 5, 5, 5, 5, 5, 5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 7,
      "s_pos": [
        10,
        11,
        12,
        13,
        14,
        15,
        16
      ],
      "d_pos": [
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3
      ],
      "d_right": [
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 2.5, 5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25, 27.5, 30, 32.5, 35]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, -0.05, -0.1, -0.05, 0, 0.05, 0.1, 0.05, -0.05, -0.1, -0.05, 0, 0.05, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.2, 0.1, 0, -0.1, -0.2, -0.1, 0, 0.1, 0.2, 0.1, 0, -0.1, -0.2]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 15,
      "s_pos": [
        0,
        2.5,
        5,
        7.5,
        10,
        12.5,
        15,
        17.5,
        20,
        22.5,
        25,
        27.5,
        30,
        32.5,
        35
      ],
      "d_pos": [
        0.1,
        0.05,
        -0.05,
        -0.1,
        -0.05,
        0,
        0.05,
        0.1,
        0.05,
        -0.05,
        -0.1,
        -0.05,
        0,
        0.05,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.2,
        0.2,
        0.1,
        0,
        -0.1,
        -0.2,
        -0.1,
        0,
        0.1,
        0.2,
        0.1,
        0,
        -0.1,
        -0.2
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n\n        - The distance to the right wall is: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 14,
      "s_pos": [
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "d_right": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.35, 0.3, 0.32, 0.33, 0.34]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.35, 0.35, 0.35, 0.35, 0.35]\n\n\n        - The distance to the right wall is: [3.65, 3.65, 3.65, 3.65, 3.65]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 5,
      "s_pos": [
        10,
        15,
        20,
        25,
        30
      ],
      "d_pos": [
        0.35,
        0.3,
        0.32,
        0.33,
        0.34
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.35,
        0.35,
        0.35,
        0.35,
        0.35
      ],
      "d_right": [
        3.65,
        3.65,
        3.65,
        3.65,
        3.65
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.1, 0.2, -0.2, 0.15, -0.15, 0.25, -0.25, 0.3, -0.3, 0.2, -0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7, 6.8, 6.5, 6.2, 6.8, 7, 6.5, 6.2, 6.8, 7, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.4, 0.6, 0.5, 0.7, 0.5, 0.6, 0.5, 0.7, 0.5, 0.6, 0.5, 0.7, 0.6]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.6, 1.3, 1.5, 1.4, 1.6, 1.3, 1.5, 1.4, 1.6, 1.3, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.4, 1.7, 1.5, 1.6, 1.4, 1.7, 1.5, 1.6, 1.4, 1.7, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 13,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "d_pos": [
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.15,
        -0.15,
        0.25,
        -0.25,
        0.3,
        -0.3,
        0.2,
        -0.2,
        0.1
      ],
      "s_speed": [
        6,
        6.5,
        7,
        6.8,
        6.5,
        6.2,
        6.8,
        7,
        6.5,
        6.2,
        6.8,
        7,
        6.5
      ],
      "d_speed": [
        0.4,
        0.6,
        0.5,
        0.7,
        0.5,
        0.6,
        0.5,
        0.7,
        0.5,
        0.6,
        0.5,
        0.7,
        0.6
      ],
      "d_left": [
        1.5,
        1.4,
        1.6,
        1.3,
        1.5,
        1.4,
        1.6,
        1.3,
        1.5,
        1.4,
        1.6,
        1.3,
        1.5
      ],
      "d_right": [
        1.5,
        1.6,
        1.4,
        1.7,
        1.5,
        1.6,
        1.4,
        1.7,
        1.5,
        1.6,
        1.4,
        1.7,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35, 40, 45, 50, 55]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, -0.5, 0.4, -0.4, 0.3, -0.3, 0.2, -0.2, 0.1, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7, 6.8, 6.2, 6.5, 7, 6.6, 6.3, 6.4]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.6, 0.5, -0.5, 0.4, -0.4, 0.3, -0.3, 0.2, -0.2]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.6, 1.5, 1.4, 1.5, 1.6, 1.4, 1.5, 1.6]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.4, 1.5, 1.6, 1.5, 1.4, 1.6, 1.5, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 10,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55
      ],
      "d_pos": [
        0.5,
        -0.5,
        0.4,
        -0.4,
        0.3,
        -0.3,
        0.2,
        -0.2,
        0.1,
        -0.1
      ],
      "s_speed": [
        6,
        6.5,
        7,
        6.8,
        6.2,
        6.5,
        7,
        6.6,
        6.3,
        6.4
      ],
      "d_speed": [
        0.6,
        -0.6,
        0.5,
        -0.5,
        0.4,
        -0.4,
        0.3,
        -0.3,
        0.2,
        -0.2
      ],
      "d_left": [
        1.5,
        1.4,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.4,
        1.5,
        1.6
      ],
      "d_right": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.6,
        1.5,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15, 20, 25, 30, 35, 40]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, -0.3, 0.4, -0.5, 0.3, -0.4, 0.5, -0.3]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.6, 0.7, -0.7, 0.6, -0.7, 0.7, -0.6]\n\n        \n        - The distance to the left wall is: [0.6, 0.5, 0.7, 0.4, 0.6, 0.5, 0.7, 0.4]\n\n\n        - The distance to the right wall is: [0.6, 0.5, 0.7, 0.4, 0.6, 0.5, 0.7, 0.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 8,
      "s_pos": [
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40
      ],
      "d_pos": [
        0.2,
        -0.3,
        0.4,
        -0.5,
        0.3,
        -0.4,
        0.5,
        -0.3
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.6,
        -0.6,
        0.7,
        -0.7,
        0.6,
        -0.7,
        0.7,
        -0.6
      ],
      "d_left": [
        0.6,
        0.5,
        0.7,
        0.4,
        0.6,
        0.5,
        0.7,
        0.4
      ],
      "d_right": [
        0.6,
        0.5,
        0.7,
        0.4,
        0.6,
        0.5,
        0.7,
        0.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.2, 0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 6,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.2,
        0.2,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\n\n\n        - The distance to the right wall is: [1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 12,
      "s_pos": [
        30,
        30,
        30,
        30,
        30,
        30,
        30,
        30,
        30,
        30,
        30,
        30
      ],
      "d_pos": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8
      ],
      "d_right": [
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15, 20, 25, 30, 35]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.35, -0.36, -0.37, -0.38, -0.39, -0.39, -0.39]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.35, 0.34, 0.33, 0.32, 0.31, 0.31, 0.31]\n\n\n        - The distance to the right wall is: [3.65, 3.66, 3.67, 3.68, 3.69, 3.69, 3.69]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 7,
      "s_pos": [
        5,
        10,
        15,
        20,
        25,
        30,
        35
      ],
      "d_pos": [
        -0.35,
        -0.36,
        -0.37,
        -0.38,
        -0.39,
        -0.39,
        -0.39
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.35,
        0.34,
        0.33,
        0.32,
        0.31,
        0.31,
        0.31
      ],
      "d_right": [
        3.65,
        3.66,
        3.67,
        3.68,
        3.69,
        3.69,
        3.69
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 10,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35, 40, 45, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.05, 0.1, 0.2, 0.1, 0.05, 0.1, 0.15]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7, 6.8, 6.7, 6.9, 7, 6.8, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.25, 0.15, 0.2, 0.3, 0.2, 0.15, 0.2, 0.25]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.6, 1.5, 1.4, 1.6, 1.5, 1.4, 1.6]\n\n\n        - The distance to the right wall is: [1.0, 1.1, 0.9, 1.0, 1.1, 0.9, 1.0, 1.1, 0.9]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 9,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50
      ],
      "d_pos": [
        0.1,
        0.15,
        0.05,
        0.1,
        0.2,
        0.1,
        0.05,
        0.1,
        0.15
      ],
      "s_speed": [
        6,
        6.5,
        7,
        6.8,
        6.7,
        6.9,
        7,
        6.8,
        6.5
      ],
      "d_speed": [
        0.2,
        0.25,
        0.15,
        0.2,
        0.3,
        0.2,
        0.15,
        0.2,
        0.25
      ],
      "d_left": [
        1.5,
        1.4,
        1.6,
        1.5,
        1.4,
        1.6,
        1.5,
        1.4,
        1.6
      ],
      "d_right": [
        1.0,
        1.1,
        0.9,
        1.0,
        1.1,
        0.9,
        1.0,
        1.1,
        0.9
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\n\n\n        - The distance to the right wall is: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 12,
      "s_pos": [
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50
      ],
      "d_pos": [
        0.4,
        0.4,
        0.4,
        0.4,
        0.4,
        0.4,
        0.4,
        0.4,
        0.4,
        0.4,
        0.4,
        0.4
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8
      ],
      "d_right": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\n\n\n        - The distance to the right wall is: [1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 10,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "d_pos": [
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3
      ],
      "d_right": [
        1.7,
        1.7,
        1.7,
        1.7,
        1.7,
        1.7,
        1.7,
        1.7,
        1.7,
        1.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3.1, 4.6, 6.2]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, -0.4, 0.3, -0.5, 0.4]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.5, 6.0, 5.8, 6.2, 5.9]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.7, 0.8, 0.9, 0.7, 0.8]\n\n        \n        - The distance to the left wall is: [1.2, 1.1, 1.3, 1.0, 1.1]\n\n\n        - The distance to the right wall is: [1.3, 1.4, 1.2, 1.5, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 5,
      "s_pos": [
        0,
        1.5,
        3.1,
        4.6,
        6.2
      ],
      "d_pos": [
        0.2,
        -0.4,
        0.3,
        -0.5,
        0.4
      ],
      "s_speed": [
        5.5,
        6.0,
        5.8,
        6.2,
        5.9
      ],
      "d_speed": [
        0.7,
        0.8,
        0.9,
        0.7,
        0.8
      ],
      "d_left": [
        1.2,
        1.1,
        1.3,
        1.0,
        1.1
      ],
      "d_right": [
        1.3,
        1.4,
        1.2,
        1.5,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 0 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.15, 0.2, 0.1, 0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.5, 6.7, 6.6, 6.8, 6.5, 6.6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.15, 0.2, 0.1, 0.05]\n\n        \n        - The distance to the left wall is: [1.2, 1.1, 1.3, 1.2, 1.3, 1.2]\n\n\n        - The distance to the right wall is: [1.1, 1.2, 1.1, 1.1, 1.2, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 0,
      "data_samples": 6,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "d_pos": [
        0.1,
        0.2,
        0.15,
        0.2,
        0.1,
        0.05
      ],
      "s_speed": [
        6.5,
        6.7,
        6.6,
        6.8,
        6.5,
        6.6
      ],
      "d_speed": [
        0.1,
        0.2,
        0.15,
        0.2,
        0.1,
        0.05
      ],
      "d_left": [
        1.2,
        1.1,
        1.3,
        1.2,
        1.3,
        1.2
      ],
      "d_right": [
        1.1,
        1.2,
        1.1,
        1.1,
        1.2,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.2, 2.5, 4.0, 5.5, 7.1]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.25, 0.3, 0.15, 0.1, 0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [4.5, 5.0, 5.5, 6.0, 6.5, 7.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.3, 0.35, 0.4, 0.25, 0.2, 0.15]\n\n        \n        - The distance to the left wall is: [0.8, 0.85, 0.9, 0.95, 1.0, 1.05]\n\n\n        - The distance to the right wall is: [1.2, 1.15, 1.1, 1.05, 1.0, 0.95]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 6,
      "s_pos": [
        0,
        1.2,
        2.5,
        4.0,
        5.5,
        7.1
      ],
      "d_pos": [
        0.2,
        0.25,
        0.3,
        0.15,
        0.1,
        0.05
      ],
      "s_speed": [
        4.5,
        5.0,
        5.5,
        6.0,
        6.5,
        7.0
      ],
      "d_speed": [
        0.3,
        0.35,
        0.4,
        0.25,
        0.2,
        0.15
      ],
      "d_left": [
        0.8,
        0.85,
        0.9,
        0.95,
        1.0,
        1.05
      ],
      "d_right": [
        1.2,
        1.15,
        1.1,
        1.05,
        1.0,
        0.95
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 49, 48, 47, 46, 45]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.25, 0.3, 0.28, 0.26, 0.24]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1, -1, -1, -1, -1, -1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.15, 0.2, 0.18, 0.16, 0.14]\n\n        \n        - The distance to the left wall is: [1.2, 1.1, 1.0, 1.0, 1.1, 1.2]\n\n\n        - The distance to the right wall is: [0.8, 0.9, 1.0, 1.0, 0.9, 0.8]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 6,
      "s_pos": [
        50,
        49,
        48,
        47,
        46,
        45
      ],
      "d_pos": [
        0.2,
        0.25,
        0.3,
        0.28,
        0.26,
        0.24
      ],
      "s_speed": [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      ],
      "d_speed": [
        0.1,
        0.15,
        0.2,
        0.18,
        0.16,
        0.14
      ],
      "d_left": [
        1.2,
        1.1,
        1.0,
        1.0,
        1.1,
        1.2
      ],
      "d_right": [
        0.8,
        0.9,
        1.0,
        1.0,
        0.9,
        0.8
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [25.0, 24.6, 24.2, 23.8, 23.4, 23.0, 22.6, 22.2, 21.8, 21.4, 21.0, 20.6, 20.2, 19.8]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.3, 0.4, 0.3, 0.2, 0.3, 0.4, 0.3, 0.2, 0.3, 0.4, 0.3, 0.2, 0.3]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5]\n\n        \n        - The distance to the left wall is: [0.6, 0.5, 0.4, 0.5, 0.6, 0.5, 0.4, 0.5, 0.6, 0.5, 0.4, 0.5, 0.6, 0.5]\n\n\n        - The distance to the right wall is: [1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 14,
      "s_pos": [
        25.0,
        24.6,
        24.2,
        23.8,
        23.4,
        23.0,
        22.6,
        22.2,
        21.8,
        21.4,
        21.0,
        20.6,
        20.2,
        19.8
      ],
      "d_pos": [
        0.2,
        0.3,
        0.4,
        0.3,
        0.2,
        0.3,
        0.4,
        0.3,
        0.2,
        0.3,
        0.4,
        0.3,
        0.2,
        0.3
      ],
      "s_speed": [
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0
      ],
      "d_speed": [
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5
      ],
      "d_left": [
        0.6,
        0.5,
        0.4,
        0.5,
        0.6,
        0.5,
        0.4,
        0.5,
        0.6,
        0.5,
        0.4,
        0.5,
        0.6,
        0.5
      ],
      "d_right": [
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 4 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.2, 0.2, 0.2]\n\n        \n        - The distance to the left wall is: [2, 2, 2, 2]\n\n\n        - The distance to the right wall is: [2, 2, 2, 2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 4,
      "s_pos": [
        10,
        15,
        20,
        25
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "d_left": [
        2,
        2,
        2,
        2
      ],
      "d_right": [
        2,
        2,
        2,
        2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\n\n\n        - The distance to the right wall is: [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 12,
      "s_pos": [
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8
      ],
      "d_right": [
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6,
        0.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.7, 1.4, 2.1, 2.8, 3.5, 4.2, 4.9, 5.6, 6.3]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.05, 0.02, -0.01, 0.03, -0.02, 0.01, 0.04, -0.03, 0.01, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6.8, 7, 6.9, 6.7, 6.5, 6.3, 6.1, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.05, 0.07, 0.02, 0.03, 0.08, 0.05, 0.06, 0.04, 0.03]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.4, 1.5, 1.4, 1.6, 1.5, 1.6, 1.7, 1.5]\n\n\n        - The distance to the right wall is: [1.4, 1.3, 1.5, 1.4, 1.5, 1.3, 1.4, 1.3, 1.2, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 10,
      "s_pos": [
        0,
        0.7,
        1.4,
        2.1,
        2.8,
        3.5,
        4.2,
        4.9,
        5.6,
        6.3
      ],
      "d_pos": [
        0.05,
        0.02,
        -0.01,
        0.03,
        -0.02,
        0.01,
        0.04,
        -0.03,
        0.01,
        0
      ],
      "s_speed": [
        6,
        6.5,
        6.8,
        7,
        6.9,
        6.7,
        6.5,
        6.3,
        6.1,
        6
      ],
      "d_speed": [
        0.1,
        0.05,
        0.07,
        0.02,
        0.03,
        0.08,
        0.05,
        0.06,
        0.04,
        0.03
      ],
      "d_left": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.4,
        1.6,
        1.5,
        1.6,
        1.7,
        1.5
      ],
      "d_right": [
        1.4,
        1.3,
        1.5,
        1.4,
        1.5,
        1.3,
        1.4,
        1.3,
        1.2,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 9.8, 9.6, 9.4, 9.2, 9, 8.8, 8.6, 8.4]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [-0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3]\n\n\n        - The distance to the right wall is: [1, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 9,
      "s_pos": [
        10,
        9.8,
        9.6,
        9.4,
        9.2,
        9,
        8.8,
        8.6,
        8.4
      ],
      "d_pos": [
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2
      ],
      "s_speed": [
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2
      ],
      "d_speed": [
        -0.05,
        -0.05,
        -0.05,
        -0.05,
        -0.05,
        -0.05,
        -0.05,
        -0.05,
        -0.05
      ],
      "d_left": [
        1.5,
        1.6,
        1.7,
        1.8,
        1.9,
        2,
        2.1,
        2.2,
        2.3
      ],
      "d_right": [
        1,
        0.9,
        0.8,
        0.7,
        0.6,
        0.5,
        0.4,
        0.3,
        0.2
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 49.5, 49, 48.5, 48, 47.5, 47, 46.5, 46, 45.5, 45]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2, -0.25]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.05, 0, -0.05, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 11,
      "s_pos": [
        50,
        49.5,
        49,
        48.5,
        48,
        47.5,
        47,
        46.5,
        46,
        45.5,
        45
      ],
      "d_pos": [
        0.1,
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25
      ],
      "s_speed": [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      ],
      "d_speed": [
        0.1,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 0 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.5, 5.8, 6.0, 6.2, 6.5, 6.7, 6.8, 6.9, 7.0, 6.8, 6.7, 6.5, 6.3]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2]\n\n\n        - The distance to the right wall is: [1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 0,
      "data_samples": 13,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        5.5,
        5.8,
        6.0,
        6.2,
        6.5,
        6.7,
        6.8,
        6.9,
        7.0,
        6.8,
        6.7,
        6.5,
        6.3
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2
      ],
      "d_right": [
        1.3,
        1.3,
        1.3,
        1.3,
        1.3,
        1.3,
        1.3,
        1.3,
        1.3,
        1.3,
        1.3,
        1.3,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.05, 0.1, 0.2, 0.25, 0.3, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7, 6.8, 6.9, 6, 6.5, 7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.15, 0.1, 0.05, 0.1, 0.2, 0.15]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.6, 1.5, 1.4, 1.3, 1.2, 1.3]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.4, 1.5, 1.6, 1.7, 1.8, 1.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 8,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "d_pos": [
        0.1,
        0.15,
        0.05,
        0.1,
        0.2,
        0.25,
        0.3,
        0.2
      ],
      "s_speed": [
        6,
        6.5,
        7,
        6.8,
        6.9,
        6,
        6.5,
        7
      ],
      "d_speed": [
        0.1,
        0.2,
        0.15,
        0.1,
        0.05,
        0.1,
        0.2,
        0.15
      ],
      "d_left": [
        1.5,
        1.4,
        1.6,
        1.5,
        1.4,
        1.3,
        1.2,
        1.3
      ],
      "d_right": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.6,
        1.7,
        1.8,
        1.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 4 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.35, 0.35, 0.36, 0.36]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.35, 0.35, 0.36, 0.36]\n\n\n        - The distance to the right wall is: [3.65, 3.65, 3.64, 3.64]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 4,
      "s_pos": [
        10,
        15,
        20,
        25
      ],
      "d_pos": [
        0.35,
        0.35,
        0.36,
        0.36
      ],
      "s_speed": [
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.35,
        0.35,
        0.36,
        0.36
      ],
      "d_right": [
        3.65,
        3.65,
        3.64,
        3.64
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.2, 0.2, 0.1, 0, -0.1, -0.1, 0, 0.1, 0.1, 0.2, 0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1, 1.2, 1, 1.1, 1.2, 1.3, 1.1, 1, 1.2, 1.1, 1, 1.2, 1.1, 1]\n\n\n        - The distance to the right wall is: [1.5, 1.3, 1.5, 1.4, 1.3, 1.2, 1.4, 1.5, 1.3, 1.4, 1.5, 1.3, 1.4, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 14,
      "s_pos": [
        0,
        3,
        6,
        9,
        12,
        15,
        18,
        21,
        24,
        27,
        30,
        33,
        36,
        39
      ],
      "d_pos": [
        0.1,
        0.1,
        0.2,
        0.2,
        0.1,
        0,
        -0.1,
        -0.1,
        0,
        0.1,
        0.1,
        0.2,
        0.2,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1,
        1.2,
        1,
        1.1,
        1.2,
        1.3,
        1.1,
        1,
        1.2,
        1.1,
        1,
        1.2,
        1.1,
        1
      ],
      "d_right": [
        1.5,
        1.3,
        1.5,
        1.4,
        1.3,
        1.2,
        1.4,
        1.5,
        1.3,
        1.4,
        1.5,
        1.3,
        1.4,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, -0.1, 0.1, 0.0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7, 6.8, 6.9]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.3, 0.1, 0.0]\n\n        \n        - The distance to the left wall is: [2, 2.1, 2, 1.9, 2]\n\n\n        - The distance to the right wall is: [1.8, 1.9, 1.8, 1.7, 1.8]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 5,
      "s_pos": [
        10,
        15,
        20,
        25,
        30
      ],
      "d_pos": [
        0.1,
        0.2,
        -0.1,
        0.1,
        0.0
      ],
      "s_speed": [
        6,
        6.5,
        7,
        6.8,
        6.9
      ],
      "d_speed": [
        0.1,
        0.2,
        0.3,
        0.1,
        0.0
      ],
      "d_left": [
        2,
        2.1,
        2,
        1.9,
        2
      ],
      "d_right": [
        1.8,
        1.9,
        1.8,
        1.7,
        1.8
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.2, 0.25, 0.3, 0.2, 0.1, 0.05, 0, -0.05, -0.1, -0.15]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.3, 1.2, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.7, 1.8, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 12,
      "s_pos": [
        50,
        49,
        48,
        47,
        46,
        45,
        44,
        43,
        42,
        41,
        40,
        39
      ],
      "d_pos": [
        0.1,
        0.15,
        0.2,
        0.25,
        0.3,
        0.2,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15
      ],
      "s_speed": [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.5,
        1.4,
        1.3,
        1.2,
        1.1,
        1.2,
        1.3,
        1.4,
        1.5,
        1.6,
        1.7,
        1.8
      ],
      "d_right": [
        1.5,
        1.6,
        1.7,
        1.8,
        1.9,
        1.8,
        1.7,
        1.6,
        1.5,
        1.4,
        1.3,
        1.2
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35, 40]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.1, 0.2, -0.2, 0.1, -0.1, 0.0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [4, 5, 6, 5, 6, 5, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.3, 0.4, 0.2, 0.3, 0.2, 0.4, 0.3]\n\n        \n        - The distance to the left wall is: [0.8, 1.0, 0.9, 1.1, 1.0, 1.2, 1.1]\n\n\n        - The distance to the right wall is: [1.2, 1.0, 1.1, 0.9, 1.0, 0.8, 0.9]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 7,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35,
        40
      ],
      "d_pos": [
        0.1,
        -0.1,
        0.2,
        -0.2,
        0.1,
        -0.1,
        0.0
      ],
      "s_speed": [
        4,
        5,
        6,
        5,
        6,
        5,
        6
      ],
      "d_speed": [
        0.3,
        0.4,
        0.2,
        0.3,
        0.2,
        0.4,
        0.3
      ],
      "d_left": [
        0.8,
        1.0,
        0.9,
        1.1,
        1.0,
        1.2,
        1.1
      ],
      "d_right": [
        1.2,
        1.0,
        1.1,
        0.9,
        1.0,
        0.8,
        0.9
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 12, 14, 16, 18, 20, 22, 24]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6, 5.5, 6, 6, 6.5, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.1, 0.3, 0.2, 0.1, 0.2, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.3, 1.6, 1.5, 1.4, 1.5, 1.4]\n\n\n        - The distance to the right wall is: [1.3, 1.5, 1.4, 1.3, 1.5, 1.4, 1.3, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 8,
      "s_pos": [
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24
      ],
      "d_pos": [
        0.1,
        0.1,
        0.2,
        0.2,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6.5,
        6,
        5.5,
        6,
        6,
        6.5,
        6
      ],
      "d_speed": [
        0.2,
        0.1,
        0.3,
        0.2,
        0.1,
        0.2,
        0.1,
        0.1
      ],
      "d_left": [
        1.5,
        1.4,
        1.3,
        1.6,
        1.5,
        1.4,
        1.5,
        1.4
      ],
      "d_right": [
        1.3,
        1.5,
        1.4,
        1.3,
        1.5,
        1.4,
        1.3,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\n\n\n        - The distance to the right wall is: [4.7, 4.7, 4.7, 4.7, 4.7, 4.7, 4.7, 4.7, 4.7, 4.7, 4.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 11,
      "s_pos": [
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20
      ],
      "d_pos": [
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3
      ],
      "d_right": [
        4.7,
        4.7,
        4.7,
        4.7,
        4.7,
        4.7,
        4.7,
        4.7,
        4.7,
        4.7,
        4.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3.0, 4.5, 6.0, 7.5, 9.0, 10.5, 12.0, 13.5, 15.0, 16.5, 18.0]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0.0, -0.05, -0.1, -0.05, 0.0, 0.05, 0.1, 0.05, 0.0, -0.05, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.0, 6.2, 6.1, 5.9, 6.0, 6.1, 5.8, 6.0, 6.2, 6.1, 5.9, 6.0, 6.1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.15, 0.0, -0.15, -0.2, -0.15, 0.0, 0.15, 0.2, 0.15, 0.0, -0.15, -0.2]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 13,
      "s_pos": [
        0,
        1.5,
        3.0,
        4.5,
        6.0,
        7.5,
        9.0,
        10.5,
        12.0,
        13.5,
        15.0,
        16.5,
        18.0
      ],
      "d_pos": [
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1,
        -0.05,
        0.0,
        0.05,
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1
      ],
      "s_speed": [
        6.0,
        6.2,
        6.1,
        5.9,
        6.0,
        6.1,
        5.8,
        6.0,
        6.2,
        6.1,
        5.9,
        6.0,
        6.1
      ],
      "d_speed": [
        0.2,
        0.15,
        0.0,
        -0.15,
        -0.2,
        -0.15,
        0.0,
        0.15,
        0.2,
        0.15,
        0.0,
        -0.15,
        -0.2
      ],
      "d_left": [
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5
      ],
      "d_right": [
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 4.8, 4.6, 4.4, 4.2, 4]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.1, 0.05, 0, -0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1, -1, -1, -1, -1, -1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.1, -0.1, -0.15, -0.2, -0.25]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.6, 1.7, 1.8, 1.9]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.4, 1.3, 1.2, 1.1]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 6,
      "s_pos": [
        5,
        4.8,
        4.6,
        4.4,
        4.2,
        4
      ],
      "d_pos": [
        0.1,
        0.15,
        0.1,
        0.05,
        0,
        -0.05
      ],
      "s_speed": [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      ],
      "d_speed": [
        0.2,
        0.1,
        -0.1,
        -0.15,
        -0.2,
        -0.25
      ],
      "d_left": [
        1.5,
        1.4,
        1.6,
        1.7,
        1.8,
        1.9
      ],
      "d_right": [
        1.5,
        1.6,
        1.4,
        1.3,
        1.2,
        1.1
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.4, -0.4, 0.5, -0.5, 0.6, -0.6, 0.7, -0.7, 0.8]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7, 6.5, 6, 5.5, 6, 6.5, 7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.6, 0.7, -0.7, 0.8, -0.8, 0.9, -0.9, 1.0]\n\n        \n        - The distance to the left wall is: [1.2, 0.8, 1.3, 0.7, 1.4, 0.6, 1.5, 0.5, 1.6]\n\n\n        - The distance to the right wall is: [0.8, 1.2, 0.7, 1.3, 0.6, 1.4, 0.5, 1.5, 0.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 9,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "d_pos": [
        0.4,
        -0.4,
        0.5,
        -0.5,
        0.6,
        -0.6,
        0.7,
        -0.7,
        0.8
      ],
      "s_speed": [
        6,
        6.5,
        7,
        6.5,
        6,
        5.5,
        6,
        6.5,
        7
      ],
      "d_speed": [
        0.6,
        -0.6,
        0.7,
        -0.7,
        0.8,
        -0.8,
        0.9,
        -0.9,
        1.0
      ],
      "d_left": [
        1.2,
        0.8,
        1.3,
        0.7,
        1.4,
        0.6,
        1.5,
        0.5,
        1.6
      ],
      "d_right": [
        0.8,
        1.2,
        0.7,
        1.3,
        0.6,
        1.4,
        0.5,
        1.5,
        0.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.2, 0.3, -0.4, 0.2, -0.1, 0.4, -0.3, 0.2, -0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6, 5.5, 6, 6.5, 6, 5.5, 6, 6.5, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.7, 0.5, -0.6, 0.7, -0.5, 0.6, -0.7, 0.5, -0.6, 0.7]\n\n        \n        - The distance to the left wall is: [0.8, 0.7, 0.9, 0.6, 0.8, 0.7, 0.9, 0.6, 0.8, 0.7, 0.9]\n\n\n        - The distance to the right wall is: [0.7, 0.8, 0.6, 0.9, 0.7, 0.8, 0.6, 0.9, 0.7, 0.8, 0.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 11,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "d_pos": [
        0.1,
        -0.2,
        0.3,
        -0.4,
        0.2,
        -0.1,
        0.4,
        -0.3,
        0.2,
        -0.2,
        0.1
      ],
      "s_speed": [
        6,
        6.5,
        6,
        5.5,
        6,
        6.5,
        6,
        5.5,
        6,
        6.5,
        6
      ],
      "d_speed": [
        0.6,
        -0.7,
        0.5,
        -0.6,
        0.7,
        -0.5,
        0.6,
        -0.7,
        0.5,
        -0.6,
        0.7
      ],
      "d_left": [
        0.8,
        0.7,
        0.9,
        0.6,
        0.8,
        0.7,
        0.9,
        0.6,
        0.8,
        0.7,
        0.9
      ],
      "d_right": [
        0.7,
        0.8,
        0.6,
        0.9,
        0.7,
        0.8,
        0.6,
        0.9,
        0.7,
        0.8,
        0.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 10, 10, 10, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, 0.5, 0.5, 0.5, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.6, 0.6, 0.6, 0.6, 0.6]\n\n\n        - The distance to the right wall is: [1.4, 1.4, 1.4, 1.4, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 5,
      "s_pos": [
        10,
        10,
        10,
        10,
        10
      ],
      "d_pos": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.6,
        0.6,
        0.6,
        0.6,
        0.6
      ],
      "d_right": [
        1.4,
        1.4,
        1.4,
        1.4,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 6, 6, 5, 5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 5,
      "s_pos": [
        10,
        15,
        20,
        25,
        30
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        5,
        6,
        6,
        5,
        5
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 10, 10, 10, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, 0.5, 0.5, 0.5, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.6, 0.6, 0.6, 0.6, 0.6]\n\n\n        - The distance to the right wall is: [1.4, 1.4, 1.4, 1.4, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 5,
      "s_pos": [
        10,
        10,
        10,
        10,
        10
      ],
      "d_pos": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.6,
        0.6,
        0.6,
        0.6,
        0.6
      ],
      "d_right": [
        1.4,
        1.4,
        1.4,
        1.4,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35, 40, 45, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.05, 0.1, 0.2, 0.1, 0.05, 0.1, 0.15]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7, 6.8, 6.7, 6.9, 7, 6.8, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.25, 0.15, 0.2, 0.3, 0.2, 0.15, 0.2, 0.25]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.6, 1.5, 1.4, 1.6, 1.5, 1.4, 1.6]\n\n\n        - The distance to the right wall is: [1.0, 1.1, 0.9, 1.0, 1.1, 0.9, 1.0, 1.1, 0.9]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 9,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50
      ],
      "d_pos": [
        0.1,
        0.15,
        0.05,
        0.1,
        0.2,
        0.1,
        0.05,
        0.1,
        0.15
      ],
      "s_speed": [
        6,
        6.5,
        7,
        6.8,
        6.7,
        6.9,
        7,
        6.8,
        6.5
      ],
      "d_speed": [
        0.2,
        0.25,
        0.15,
        0.2,
        0.3,
        0.2,
        0.15,
        0.2,
        0.25
      ],
      "d_left": [
        1.5,
        1.4,
        1.6,
        1.5,
        1.4,
        1.6,
        1.5,
        1.4,
        1.6
      ],
      "d_right": [
        1.0,
        1.1,
        0.9,
        1.0,
        1.1,
        0.9,
        1.0,
        1.1,
        0.9
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [1, 2, 3, 4, 5, 6]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.1, 0.0, -0.1, -0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 6,
      "s_pos": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "d_pos": [
        0.1,
        0.2,
        0.1,
        0.0,
        -0.1,
        -0.2
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\n\n\n        - The distance to the right wall is: [1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 12,
      "s_pos": [
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100
      ],
      "d_pos": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8
      ],
      "d_right": [
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, -0.05, -0.1, -0.05, 0, 0.05, 0.1, 0.05, 0, -0.05, -0.1, -0.05, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6.8, 7, 6.9, 6.7, 6.5, 6.3, 6.4, 6.6, 6.8, 7, 6.9, 6.8]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.15, 0.1, 0.05, 0.1, 0.15, 0.2, 0.25, 0.2, 0.15, 0.1, 0.05, 0.1, 0.15]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.7, 1.8, 1.7, 1.6, 1.5, 1.4, 1.5, 1.6, 1.7, 1.8, 1.7, 1.6]\n\n\n        - The distance to the right wall is: [1.2, 1.3, 1.4, 1.5, 1.4, 1.3, 1.2, 1.1, 1.2, 1.3, 1.4, 1.5, 1.4, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 14,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13
      ],
      "d_pos": [
        0.1,
        0.05,
        -0.05,
        -0.1,
        -0.05,
        0,
        0.05,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.05,
        0
      ],
      "s_speed": [
        6,
        6.5,
        6.8,
        7,
        6.9,
        6.7,
        6.5,
        6.3,
        6.4,
        6.6,
        6.8,
        7,
        6.9,
        6.8
      ],
      "d_speed": [
        0.2,
        0.15,
        0.1,
        0.05,
        0.1,
        0.15,
        0.2,
        0.25,
        0.2,
        0.15,
        0.1,
        0.05,
        0.1,
        0.15
      ],
      "d_left": [
        1.5,
        1.6,
        1.7,
        1.8,
        1.7,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.7,
        1.8,
        1.7,
        1.6
      ],
      "d_right": [
        1.2,
        1.3,
        1.4,
        1.5,
        1.4,
        1.3,
        1.2,
        1.1,
        1.2,
        1.3,
        1.4,
        1.5,
        1.4,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.3, -0.25, -0.2, -0.15, -0.1, -0.05, 0, 0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7]\n\n\n        - The distance to the right wall is: [2.65, 2.6, 2.55, 2.5, 2.45, 2.4, 2.35, 2.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 8,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "d_pos": [
        -0.3,
        -0.25,
        -0.2,
        -0.15,
        -0.1,
        -0.05,
        0,
        0.05
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.35,
        0.4,
        0.45,
        0.5,
        0.55,
        0.6,
        0.65,
        0.7
      ],
      "d_right": [
        2.65,
        2.6,
        2.55,
        2.5,
        2.45,
        2.4,
        2.35,
        2.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 11.0, 12.1]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0.0, -0.05, -0.1, -0.05, 0.0, 0.05, 0.1, 0.05, 0.0, -0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.5, 6.6, 6.7, 6.8, 6.9, 7.0, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.0, -0.1, -0.1, -0.1, 0.0, 0.1, 0.1, 0.1, 0.0, -0.1]\n\n        \n        - The distance to the left wall is: [1.2, 1.1, 1.3, 1.2, 1.1, 1.3, 1.2, 1.1, 1.3, 1.2, 1.1, 1.3]\n\n\n        - The distance to the right wall is: [0.8, 0.9, 0.7, 0.8, 0.9, 0.7, 0.8, 0.9, 0.7, 0.8, 0.9, 0.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 12,
      "s_pos": [
        0,
        1.1,
        2.2,
        3.3,
        4.4,
        5.5,
        6.6,
        7.7,
        8.8,
        9.9,
        11.0,
        12.1
      ],
      "d_pos": [
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1,
        -0.05,
        0.0,
        0.05,
        0.1,
        0.05,
        0.0,
        -0.05
      ],
      "s_speed": [
        6.5,
        6.6,
        6.7,
        6.8,
        6.9,
        7.0,
        7.1,
        7.2,
        7.3,
        7.4,
        7.5,
        7.6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.0,
        -0.1,
        -0.1,
        -0.1,
        0.0,
        0.1,
        0.1,
        0.1,
        0.0,
        -0.1
      ],
      "d_left": [
        1.2,
        1.1,
        1.3,
        1.2,
        1.1,
        1.3,
        1.2,
        1.1,
        1.3,
        1.2,
        1.1,
        1.3
      ],
      "d_right": [
        0.8,
        0.9,
        0.7,
        0.8,
        0.9,
        0.7,
        0.8,
        0.9,
        0.7,
        0.8,
        0.9,
        0.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n\n        - The distance to the right wall is: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 14,
      "s_pos": [
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "d_right": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.2, 0.2, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.4, 1.5, 1.4, 1.5]\n\n\n        - The distance to the right wall is: [1.4, 1.3, 1.5, 1.4, 1.5, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 6,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35
      ],
      "d_pos": [
        0.1,
        0.1,
        0.2,
        0.2,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "d_left": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.4,
        1.5
      ],
      "d_right": [
        1.4,
        1.3,
        1.5,
        1.4,
        1.5,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 8,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.05, 0.1, 0.2, 0.25, 0.3, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7, 6.8, 6.9, 6, 6.5, 7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.15, 0.1, 0.05, 0.1, 0.2, 0.15]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.6, 1.5, 1.4, 1.3, 1.2, 1.3]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.4, 1.5, 1.6, 1.7, 1.8, 1.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 8,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "d_pos": [
        0.1,
        0.15,
        0.05,
        0.1,
        0.2,
        0.25,
        0.3,
        0.2
      ],
      "s_speed": [
        6,
        6.5,
        7,
        6.8,
        6.9,
        6,
        6.5,
        7
      ],
      "d_speed": [
        0.1,
        0.2,
        0.15,
        0.1,
        0.05,
        0.1,
        0.2,
        0.15
      ],
      "d_left": [
        1.5,
        1.4,
        1.6,
        1.5,
        1.4,
        1.3,
        1.2,
        1.3
      ],
      "d_right": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.6,
        1.7,
        1.8,
        1.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.2, 0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 6,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.2,
        0.2,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0.0, -0.05, -0.1, -0.15, -0.1, -0.05, 0.0, 0.05, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.5, 5.6, 5.5, 5.7, 5.6, 5.5, 5.6, 5.5, 5.7, 5.6, 5.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.0, 0.05, 0.0, -0.05, 0.0, 0.05, 0.0, -0.05, 0.0, 0.05, 0.0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 11,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "d_pos": [
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1,
        -0.15,
        -0.1,
        -0.05,
        0.0,
        0.05,
        0.1
      ],
      "s_speed": [
        5.5,
        5.6,
        5.5,
        5.7,
        5.6,
        5.5,
        5.6,
        5.5,
        5.7,
        5.6,
        5.5
      ],
      "d_speed": [
        0.0,
        0.05,
        0.0,
        -0.05,
        0.0,
        0.05,
        0.0,
        -0.05,
        0.0,
        0.05,
        0.0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0.0, 0.7, 1.4, 2.1, 2.8, 3.5, 4.2, 4.9, 5.6]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.0, -0.1, -0.05, 0.05, 0.1, 0.0, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.0, -0.1, -0.05, 0.05, 0.1, 0.0, -0.1]\n\n        \n        - The distance to the left wall is: [1.0, 1.1, 1.0, 0.9, 1.0, 1.1, 1.0, 1.1, 0.9]\n\n\n        - The distance to the right wall is: [1.0, 0.9, 1.0, 1.1, 1.0, 0.9, 1.0, 0.9, 1.1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 9,
      "s_pos": [
        0.0,
        0.7,
        1.4,
        2.1,
        2.8,
        3.5,
        4.2,
        4.9,
        5.6
      ],
      "d_pos": [
        0.1,
        0.1,
        0.0,
        -0.1,
        -0.05,
        0.05,
        0.1,
        0.0,
        -0.1
      ],
      "s_speed": [
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0,
        5.0
      ],
      "d_speed": [
        0.1,
        0.1,
        0.0,
        -0.1,
        -0.05,
        0.05,
        0.1,
        0.0,
        -0.1
      ],
      "d_left": [
        1.0,
        1.1,
        1.0,
        0.9,
        1.0,
        1.1,
        1.0,
        1.1,
        0.9
      ],
      "d_right": [
        1.0,
        0.9,
        1.0,
        1.1,
        1.0,
        0.9,
        1.0,
        0.9,
        1.1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.2, 0.1, 0, -0.1, -0.05, 0, 0.05, 0.1, 0.15]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.2, 6.5, 6.3, 6.1, 6, 6.2, 6.4, 6.3, 6.5, 6.1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.25, 0.3, 0.15, 0.1, 0.05, 0.1, 0.15, 0.2, 0.25, 0.2]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.3, 1.5, 1.6, 1.7, 1.6, 1.5, 1.4, 1.3, 1.4]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.7, 1.5, 1.4, 1.3, 1.4, 1.5, 1.6, 1.7, 1.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 11,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50
      ],
      "d_pos": [
        0.1,
        0.15,
        0.2,
        0.1,
        0,
        -0.1,
        -0.05,
        0,
        0.05,
        0.1,
        0.15
      ],
      "s_speed": [
        6,
        6.2,
        6.5,
        6.3,
        6.1,
        6,
        6.2,
        6.4,
        6.3,
        6.5,
        6.1
      ],
      "d_speed": [
        0.2,
        0.25,
        0.3,
        0.15,
        0.1,
        0.05,
        0.1,
        0.15,
        0.2,
        0.25,
        0.2
      ],
      "d_left": [
        1.5,
        1.4,
        1.3,
        1.5,
        1.6,
        1.7,
        1.6,
        1.5,
        1.4,
        1.3,
        1.4
      ],
      "d_right": [
        1.5,
        1.6,
        1.7,
        1.5,
        1.4,
        1.3,
        1.4,
        1.5,
        1.6,
        1.7,
        1.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.15, 0.1, 0.05, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.25, 0.2, 0.15, 0.2]\n\n        \n        - The distance to the left wall is: [0.3, 0.35, 0.3, 0.25, 0.3, 0.35]\n\n\n        - The distance to the right wall is: [3.7, 3.65, 3.7, 3.75, 3.7, 3.65]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 6,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35
      ],
      "d_pos": [
        0.1,
        0.2,
        0.15,
        0.1,
        0.05,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.2,
        0.3,
        0.25,
        0.2,
        0.15,
        0.2
      ],
      "d_left": [
        0.3,
        0.35,
        0.3,
        0.25,
        0.3,
        0.35
      ],
      "d_right": [
        3.7,
        3.65,
        3.7,
        3.75,
        3.7,
        3.65
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [100, 100, 100, 100, 100, 100, 100, 100, 100, 100]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 10,
      "s_pos": [
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100,
        100
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 4 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 21, 27, 34]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.4, -0.5, 0.6, -0.7, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, 0.7, 0.8, 0.7, 0.6]\n\n        \n        - The distance to the left wall is: [1.2, 1.1, 1.3, 1.1, 1.4]\n\n\n        - The distance to the right wall is: [0.8, 0.9, 0.7, 0.9, 0.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 4,
      "s_pos": [
        10,
        15,
        21,
        27,
        34
      ],
      "d_pos": [
        0.4,
        -0.5,
        0.6,
        -0.7,
        0.5
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.6,
        0.7,
        0.8,
        0.7,
        0.6
      ],
      "d_left": [
        1.2,
        1.1,
        1.3,
        1.1,
        1.4
      ],
      "d_right": [
        0.8,
        0.9,
        0.7,
        0.9,
        0.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.5, 3.2, 4.8, 6.5, 8.1, 9.7, 11.4, 12.9]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0.0, -0.05, 0.0, 0.05, 0.1, 0.05, 0.0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.5, 6.7, 6.8, 6.6, 6.7, 6.9, 6.8, 6.7, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.1, 0.0, -0.1, -0.2, -0.1, 0.0, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.5, 1.5, 1.6, 1.5, 1.6, 1.5, 1.6]\n\n\n        - The distance to the right wall is: [1.4, 1.3, 1.4, 1.5, 1.3, 1.4, 1.3, 1.4, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 9,
      "s_pos": [
        0,
        1.5,
        3.2,
        4.8,
        6.5,
        8.1,
        9.7,
        11.4,
        12.9
      ],
      "d_pos": [
        0.1,
        0.05,
        0.0,
        -0.05,
        0.0,
        0.05,
        0.1,
        0.05,
        0.0
      ],
      "s_speed": [
        6.5,
        6.7,
        6.8,
        6.6,
        6.7,
        6.9,
        6.8,
        6.7,
        6.5
      ],
      "d_speed": [
        0.1,
        0.2,
        0.1,
        0.0,
        -0.1,
        -0.2,
        -0.1,
        0.0,
        0.1
      ],
      "d_left": [
        1.5,
        1.6,
        1.5,
        1.5,
        1.6,
        1.5,
        1.6,
        1.5,
        1.6
      ],
      "d_right": [
        1.4,
        1.3,
        1.4,
        1.5,
        1.3,
        1.4,
        1.3,
        1.4,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [3.5, 3.4, 3.3, 3.2, 3.1, 3.0, 2.9, 2.8, 2.7, 2.6, 2.5, 2.4, 2.3]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2, -0.25, -0.2, -0.15, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1]\n\n\n        - The distance to the right wall is: [1.0, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7, 0.65, 0.6, 0.55, 0.5, 0.45, 0.4]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 13,
      "s_pos": [
        3.5,
        3.4,
        3.3,
        3.2,
        3.1,
        3.0,
        2.9,
        2.8,
        2.7,
        2.6,
        2.5,
        2.4,
        2.3
      ],
      "d_pos": [
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25,
        -0.2,
        -0.15,
        -0.1
      ],
      "s_speed": [
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.5,
        0.55,
        0.6,
        0.65,
        0.7,
        0.75,
        0.8,
        0.85,
        0.9,
        0.95,
        1.0,
        1.05,
        1.1
      ],
      "d_right": [
        1.0,
        0.95,
        0.9,
        0.85,
        0.8,
        0.75,
        0.7,
        0.65,
        0.6,
        0.55,
        0.5,
        0.45,
        0.4
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [3.5, 3.4, 3.3, 3.2, 3.1, 3.0, 2.9, 2.8, 2.7, 2.6, 2.5, 2.4, 2.3]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2, -0.25, -0.2, -0.15, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1]\n\n\n        - The distance to the right wall is: [1.0, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7, 0.65, 0.6, 0.55, 0.5, 0.45, 0.4]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 13,
      "s_pos": [
        3.5,
        3.4,
        3.3,
        3.2,
        3.1,
        3.0,
        2.9,
        2.8,
        2.7,
        2.6,
        2.5,
        2.4,
        2.3
      ],
      "d_pos": [
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25,
        -0.2,
        -0.15,
        -0.1
      ],
      "s_speed": [
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2,
        -0.2
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.5,
        0.55,
        0.6,
        0.65,
        0.7,
        0.75,
        0.8,
        0.85,
        0.9,
        0.95,
        1.0,
        1.05,
        1.1
      ],
      "d_right": [
        1.0,
        0.95,
        0.9,
        0.85,
        0.8,
        0.75,
        0.7,
        0.65,
        0.6,
        0.55,
        0.5,
        0.45,
        0.4
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35, 40, 45]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n        \n        - The distance to the left wall is: [2, 2, 2, 2, 2, 2, 2, 2]\n\n\n        - The distance to the right wall is: [2, 2, 2, 2, 2, 2, 2, 2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 8,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45
      ],
      "d_pos": [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "d_left": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "d_right": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 0 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.2, 0.3, -0.3, 0.2, -0.1, 0.3, -0.3, 0.2, -0.2, 0.3, -0.3, 0.1, -0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7, 6.5, 6, 6.5, 7, 6.5, 6, 6.5, 7, 6.5, 6, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, 0.7, 0.8, 0.7, 0.6, 0.7, 0.8, 0.7, 0.6, 0.7, 0.8, 0.7, 0.6, 0.7]\n\n        \n        - The distance to the left wall is: [1.5, 1.3, 1.6, 1.4, 1.5, 1.3, 1.6, 1.4, 1.5, 1.3, 1.6, 1.4, 1.5, 1.3]\n\n\n        - The distance to the right wall is: [1.5, 1.7, 1.4, 1.6, 1.5, 1.7, 1.4, 1.6, 1.5, 1.7, 1.4, 1.6, 1.5, 1.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 0,
      "data_samples": 14,
      "s_pos": [
        0,
        0.5,
        1,
        1.5,
        2,
        2.5,
        3,
        3.5,
        4,
        4.5,
        5,
        5.5,
        6,
        6.5
      ],
      "d_pos": [
        0.1,
        -0.2,
        0.3,
        -0.3,
        0.2,
        -0.1,
        0.3,
        -0.3,
        0.2,
        -0.2,
        0.3,
        -0.3,
        0.1,
        -0.2
      ],
      "s_speed": [
        6,
        6.5,
        7,
        6.5,
        6,
        6.5,
        7,
        6.5,
        6,
        6.5,
        7,
        6.5,
        6,
        6.5
      ],
      "d_speed": [
        0.6,
        0.7,
        0.8,
        0.7,
        0.6,
        0.7,
        0.8,
        0.7,
        0.6,
        0.7,
        0.8,
        0.7,
        0.6,
        0.7
      ],
      "d_left": [
        1.5,
        1.3,
        1.6,
        1.4,
        1.5,
        1.3,
        1.6,
        1.4,
        1.5,
        1.3,
        1.6,
        1.4,
        1.5,
        1.3
      ],
      "d_right": [
        1.5,
        1.7,
        1.4,
        1.6,
        1.5,
        1.7,
        1.4,
        1.6,
        1.5,
        1.7,
        1.4,
        1.6,
        1.5,
        1.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 11,
      "s_pos": [
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0,
        1.0
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [25.0, 24.6, 24.2, 23.8, 23.4, 23.0, 22.6, 22.2, 21.8, 21.4, 21.0, 20.6, 20.2, 19.8]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.3, 0.4, 0.3, 0.2, 0.3, 0.4, 0.3, 0.2, 0.3, 0.4, 0.3, 0.2, 0.3]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5, 0.6, 0.5]\n\n        \n        - The distance to the left wall is: [0.6, 0.5, 0.4, 0.5, 0.6, 0.5, 0.4, 0.5, 0.6, 0.5, 0.4, 0.5, 0.6, 0.5]\n\n\n        - The distance to the right wall is: [1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5, 1.6, 1.5, 1.4, 1.5]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 14,
      "s_pos": [
        25.0,
        24.6,
        24.2,
        23.8,
        23.4,
        23.0,
        22.6,
        22.2,
        21.8,
        21.4,
        21.0,
        20.6,
        20.2,
        19.8
      ],
      "d_pos": [
        0.2,
        0.3,
        0.4,
        0.3,
        0.2,
        0.3,
        0.4,
        0.3,
        0.2,
        0.3,
        0.4,
        0.3,
        0.2,
        0.3
      ],
      "s_speed": [
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0,
        -3.0
      ],
      "d_speed": [
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5,
        0.6,
        0.5
      ],
      "d_left": [
        0.6,
        0.5,
        0.4,
        0.5,
        0.6,
        0.5,
        0.4,
        0.5,
        0.6,
        0.5,
        0.4,
        0.5,
        0.6,
        0.5
      ],
      "d_right": [
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.5
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 12, 14, 16, 18, 20]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, -0.5, 0.6, -0.6, 0.5, -0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, 0.6, 0.7, 0.7, 0.6, 0.6]\n\n        \n        - The distance to the left wall is: [0.8, 0.9, 0.7, 0.9, 0.8, 0.9]\n\n\n        - The distance to the right wall is: [0.8, 0.9, 0.7, 0.9, 0.8, 0.9]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 6,
      "s_pos": [
        10,
        12,
        14,
        16,
        18,
        20
      ],
      "d_pos": [
        0.5,
        -0.5,
        0.6,
        -0.6,
        0.5,
        -0.5
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.6,
        0.6,
        0.7,
        0.7,
        0.6,
        0.6
      ],
      "d_left": [
        0.8,
        0.9,
        0.7,
        0.9,
        0.8,
        0.9
      ],
      "d_right": [
        0.8,
        0.9,
        0.7,
        0.9,
        0.8,
        0.9
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35, 40, 45]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 8,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [100, 99.5, 99, 98.5, 98, 97.5, 97, 96.5, 96, 95.5, 95, 94.5, 94, 93.5, 93]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2, -0.25, -0.2, -0.15, -0.1, -0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [-0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1]\n\n        \n        - The distance to the left wall is: [0.8, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35]\n\n\n        - The distance to the right wall is: [1.2, 1.3, 1.25, 1.2, 1.15, 1.1, 1.05, 1, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7, 0.65]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 15,
      "s_pos": [
        100,
        99.5,
        99,
        98.5,
        98,
        97.5,
        97,
        96.5,
        96,
        95.5,
        95,
        94.5,
        94,
        93.5,
        93
      ],
      "d_pos": [
        0.1,
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25,
        -0.2,
        -0.15,
        -0.1,
        -0.05
      ],
      "s_speed": [
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2
      ],
      "d_speed": [
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1
      ],
      "d_left": [
        0.8,
        0.7,
        0.75,
        0.8,
        0.85,
        0.9,
        0.95,
        1,
        1.05,
        1.1,
        1.15,
        1.2,
        1.25,
        1.3,
        1.35
      ],
      "d_right": [
        1.2,
        1.3,
        1.25,
        1.2,
        1.15,
        1.1,
        1.05,
        1,
        0.95,
        0.9,
        0.85,
        0.8,
        0.75,
        0.7,
        0.65
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5.0, 4.7, 4.4, 4.1, 3.8, 3.5, 3.2, 2.9, 2.6, 2.3, 2.0, 1.7, 1.4, 1.1, 0.8]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.15, 0.1, 0.05, 0.0, -0.05, -0.1, -0.15, -0.2, -0.25, -0.3, -0.35, -0.4, -0.45, -0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.8, 0.75, 0.7, 0.65, 0.6, 0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1]\n\n\n        - The distance to the right wall is: [1.2, 1.25, 1.3, 1.35, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7, 1.75, 1.8, 1.85, 1.9]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 15,
      "s_pos": [
        5.0,
        4.7,
        4.4,
        4.1,
        3.8,
        3.5,
        3.2,
        2.9,
        2.6,
        2.3,
        2.0,
        1.7,
        1.4,
        1.1,
        0.8
      ],
      "d_pos": [
        0.2,
        0.15,
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25,
        -0.3,
        -0.35,
        -0.4,
        -0.45,
        -0.5
      ],
      "s_speed": [
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0,
        -1.0
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.8,
        0.75,
        0.7,
        0.65,
        0.6,
        0.55,
        0.5,
        0.45,
        0.4,
        0.35,
        0.3,
        0.25,
        0.2,
        0.15,
        0.1
      ],
      "d_right": [
        1.2,
        1.25,
        1.3,
        1.35,
        1.4,
        1.45,
        1.5,
        1.55,
        1.6,
        1.65,
        1.7,
        1.75,
        1.8,
        1.85,
        1.9
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0, -0.05, -0.1, -0.05, 0, 0.05, 0.1, 0.05, 0, -0.05, -0.1, -0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7, 6.9, 6.8, 6.7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0, -0.1, -0.1, 0, 0.1, 0.1, 0, -0.1, -0.1, 0, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.4, 1.5, 1.6, 1.5, 1.4, 1.3, 1.2, 1.3, 1.4, 1.5, 1.6, 1.5]\n\n\n        - The distance to the right wall is: [1.8, 1.7, 1.6, 1.5, 1.4, 1.5, 1.6, 1.7, 1.8, 1.7, 1.6, 1.5, 1.4, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 14,
      "s_pos": [
        5,
        5.5,
        6,
        6.5,
        7,
        7.5,
        8,
        8.5,
        9,
        9.5,
        10,
        10.5,
        11,
        11.5
      ],
      "d_pos": [
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.05,
        0,
        0.05,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.05
      ],
      "s_speed": [
        6,
        6.1,
        6.2,
        6.3,
        6.4,
        6.5,
        6.6,
        6.7,
        6.8,
        6.9,
        7,
        6.9,
        6.8,
        6.7
      ],
      "d_speed": [
        0.1,
        0.1,
        0,
        -0.1,
        -0.1,
        0,
        0.1,
        0.1,
        0,
        -0.1,
        -0.1,
        0,
        0.1,
        0.1
      ],
      "d_left": [
        1.2,
        1.3,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.3,
        1.2,
        1.3,
        1.4,
        1.5,
        1.6,
        1.5
      ],
      "d_right": [
        1.8,
        1.7,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.7,
        1.8,
        1.7,
        1.6,
        1.5,
        1.4,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.35, 0.3, 0.32, 0.33, 0.34]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.35, 0.35, 0.35, 0.35, 0.35]\n\n\n        - The distance to the right wall is: [3.65, 3.65, 3.65, 3.65, 3.65]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 5,
      "s_pos": [
        10,
        15,
        20,
        25,
        30
      ],
      "d_pos": [
        0.35,
        0.3,
        0.32,
        0.33,
        0.34
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.35,
        0.35,
        0.35,
        0.35,
        0.35
      ],
      "d_right": [
        3.65,
        3.65,
        3.65,
        3.65,
        3.65
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 4.8, 4.6, 4.4, 4.2, 4.0, 3.8, 3.6, 3.4, 3.2, 3.0, 2.8, 2.6]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.25, 0.28, 0.3, 0.26, 0.22, 0.2, 0.18, 0.15, 0.1, 0.05, 0.02, 0.0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.15, 0.1, 0.05, -0.05, -0.1, -0.15, -0.2, -0.15, -0.1, -0.05, 0.0, 0.0]\n\n        \n        - The distance to the left wall is: [1.2, 1.15, 1.1, 1.0, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35, 1.4, 1.45]\n\n\n        - The distance to the right wall is: [0.8, 0.85, 0.9, 1.0, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7, 0.65, 0.6, 0.55]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 13,
      "s_pos": [
        5,
        4.8,
        4.6,
        4.4,
        4.2,
        4.0,
        3.8,
        3.6,
        3.4,
        3.2,
        3.0,
        2.8,
        2.6
      ],
      "d_pos": [
        0.2,
        0.25,
        0.28,
        0.3,
        0.26,
        0.22,
        0.2,
        0.18,
        0.15,
        0.1,
        0.05,
        0.02,
        0.0
      ],
      "s_speed": [
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6,
        -0.6
      ],
      "d_speed": [
        0.1,
        0.15,
        0.1,
        0.05,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.15,
        -0.1,
        -0.05,
        0.0,
        0.0
      ],
      "d_left": [
        1.2,
        1.15,
        1.1,
        1.0,
        1.05,
        1.1,
        1.15,
        1.2,
        1.25,
        1.3,
        1.35,
        1.4,
        1.45
      ],
      "d_right": [
        0.8,
        0.85,
        0.9,
        1.0,
        0.95,
        0.9,
        0.85,
        0.8,
        0.75,
        0.7,
        0.65,
        0.6,
        0.55
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\n\n\n        - The distance to the right wall is: [1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 10,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "d_pos": [
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3
      ],
      "d_right": [
        1.7,
        1.7,
        1.7,
        1.7,
        1.7,
        1.7,
        1.7,
        1.7,
        1.7,
        1.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.2, 2.4, 3.6, 4.8, 6.0, 7.2]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.05, 0.1, 0.05, 0, -0.05, 0, 0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.1, 0, -0.1, 0, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.5, 1.6, 1.7, 1.6, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.5, 1.4, 1.3, 1.4, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 7,
      "s_pos": [
        0,
        1.2,
        2.4,
        3.6,
        4.8,
        6.0,
        7.2
      ],
      "d_pos": [
        0.05,
        0.1,
        0.05,
        0,
        -0.05,
        0,
        0.05
      ],
      "s_speed": [
        3.5,
        4.0,
        4.5,
        5.0,
        5.5,
        6.0,
        6.5
      ],
      "d_speed": [
        0.1,
        0.2,
        0.1,
        0,
        -0.1,
        0,
        0.1
      ],
      "d_left": [
        1.5,
        1.4,
        1.5,
        1.6,
        1.7,
        1.6,
        1.5
      ],
      "d_right": [
        1.5,
        1.6,
        1.5,
        1.4,
        1.3,
        1.4,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0, -0.05, -0.1, -0.05, 0, 0.05, 0.1, 0.05, 0, -0.05, -0.1, -0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7, 6.9, 6.8, 6.7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0, -0.1, -0.1, 0, 0.1, 0.1, 0, -0.1, -0.1, 0, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.4, 1.5, 1.6, 1.5, 1.4, 1.3, 1.2, 1.3, 1.4, 1.5, 1.6, 1.5]\n\n\n        - The distance to the right wall is: [1.8, 1.7, 1.6, 1.5, 1.4, 1.5, 1.6, 1.7, 1.8, 1.7, 1.6, 1.5, 1.4, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 14,
      "s_pos": [
        5,
        5.5,
        6,
        6.5,
        7,
        7.5,
        8,
        8.5,
        9,
        9.5,
        10,
        10.5,
        11,
        11.5
      ],
      "d_pos": [
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.05,
        0,
        0.05,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.05
      ],
      "s_speed": [
        6,
        6.1,
        6.2,
        6.3,
        6.4,
        6.5,
        6.6,
        6.7,
        6.8,
        6.9,
        7,
        6.9,
        6.8,
        6.7
      ],
      "d_speed": [
        0.1,
        0.1,
        0,
        -0.1,
        -0.1,
        0,
        0.1,
        0.1,
        0,
        -0.1,
        -0.1,
        0,
        0.1,
        0.1
      ],
      "d_left": [
        1.2,
        1.3,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.3,
        1.2,
        1.3,
        1.4,
        1.5,
        1.6,
        1.5
      ],
      "d_right": [
        1.8,
        1.7,
        1.6,
        1.5,
        1.4,
        1.5,
        1.6,
        1.7,
        1.8,
        1.7,
        1.6,
        1.5,
        1.4,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 0 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.15]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.15]\n\n        \n        - The distance to the left wall is: [0.8, 0.7, 0.75]\n\n\n        - The distance to the right wall is: [0.9, 0.8, 0.85]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 0,
      "data_samples": 3,
      "s_pos": [
        10,
        15,
        20
      ],
      "d_pos": [
        0.1,
        0.2,
        0.15
      ],
      "s_speed": [
        6,
        6.5,
        7
      ],
      "d_speed": [
        0.1,
        0.2,
        0.15
      ],
      "d_left": [
        0.8,
        0.7,
        0.75
      ],
      "d_right": [
        0.9,
        0.8,
        0.85
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.2, 0.25, 0.3, 0.2, 0.1, 0.05, 0, -0.05, -0.1, -0.15]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.3, 1.2, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]\n\n\n        - The distance to the right wall is: [1.5, 1.6, 1.7, 1.8, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 12,
      "s_pos": [
        50,
        49,
        48,
        47,
        46,
        45,
        44,
        43,
        42,
        41,
        40,
        39
      ],
      "d_pos": [
        0.1,
        0.15,
        0.2,
        0.25,
        0.3,
        0.2,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15
      ],
      "s_speed": [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.5,
        1.4,
        1.3,
        1.2,
        1.1,
        1.2,
        1.3,
        1.4,
        1.5,
        1.6,
        1.7,
        1.8
      ],
      "d_right": [
        1.5,
        1.6,
        1.7,
        1.8,
        1.9,
        1.8,
        1.7,
        1.6,
        1.5,
        1.4,
        1.3,
        1.2
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 13,
      "s_pos": [
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10
      ],
      "d_pos": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 5.5, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.1]\n\n        \n        - The distance to the left wall is: [2, 2.1, 2.2]\n\n\n        - The distance to the right wall is: [1.9, 1.8, 1.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 3,
      "s_pos": [
        10,
        15,
        20
      ],
      "d_pos": [
        0.1,
        0.2,
        0.1
      ],
      "s_speed": [
        5,
        5.5,
        6
      ],
      "d_speed": [
        0.1,
        0.2,
        0.1
      ],
      "d_left": [
        2,
        2.1,
        2.2
      ],
      "d_right": [
        1.9,
        1.8,
        1.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 4 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.1, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6.8, 7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.1, 0.2, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.3, 1.7, 1.6]\n\n\n        - The distance to the right wall is: [1.2, 1.4, 1.1, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 4,
      "s_pos": [
        10,
        15,
        20,
        25
      ],
      "d_pos": [
        0.1,
        0.2,
        0.1,
        0.2
      ],
      "s_speed": [
        6,
        6.5,
        6.8,
        7
      ],
      "d_speed": [
        0.2,
        0.1,
        0.2,
        0.1
      ],
      "d_left": [
        1.5,
        1.3,
        1.7,
        1.6
      ],
      "d_right": [
        1.2,
        1.4,
        1.1,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 0 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [100.5, 100.3, 100.1, 99.9, 99.7, 99.5, 99.3, 99.1, 98.9, 98.7, 98.5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.25, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2, -0.25]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.12, 0.1, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2, -0.25]\n\n        \n        - The distance to the left wall is: [2.0, 2.1, 2.2, 2.1, 2.0, 1.9, 1.8, 1.9, 2.0, 2.1, 2.2]\n\n\n        - The distance to the right wall is: [1.8, 1.7, 1.6, 1.7, 1.8, 1.9, 2.0, 1.9, 1.8, 1.7, 1.6]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 0,
      "data_samples": 11,
      "s_pos": [
        100.5,
        100.3,
        100.1,
        99.9,
        99.7,
        99.5,
        99.3,
        99.1,
        98.9,
        98.7,
        98.5
      ],
      "d_pos": [
        0.2,
        0.25,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25
      ],
      "s_speed": [
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5
      ],
      "d_speed": [
        0.12,
        0.1,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25
      ],
      "d_left": [
        2.0,
        2.1,
        2.2,
        2.1,
        2.0,
        1.9,
        1.8,
        1.9,
        2.0,
        2.1,
        2.2
      ],
      "d_right": [
        1.8,
        1.7,
        1.6,
        1.7,
        1.8,
        1.9,
        2.0,
        1.9,
        1.8,
        1.7,
        1.6
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 0 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, -0.2, 0.3, -0.3, 0.2, -0.1, 0.3, -0.3, 0.2, -0.2, 0.3, -0.3, 0.1, -0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7, 6.5, 6, 6.5, 7, 6.5, 6, 6.5, 7, 6.5, 6, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, 0.7, 0.8, 0.7, 0.6, 0.7, 0.8, 0.7, 0.6, 0.7, 0.8, 0.7, 0.6, 0.7]\n\n        \n        - The distance to the left wall is: [1.5, 1.3, 1.6, 1.4, 1.5, 1.3, 1.6, 1.4, 1.5, 1.3, 1.6, 1.4, 1.5, 1.3]\n\n\n        - The distance to the right wall is: [1.5, 1.7, 1.4, 1.6, 1.5, 1.7, 1.4, 1.6, 1.5, 1.7, 1.4, 1.6, 1.5, 1.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 0,
      "data_samples": 14,
      "s_pos": [
        0,
        0.5,
        1,
        1.5,
        2,
        2.5,
        3,
        3.5,
        4,
        4.5,
        5,
        5.5,
        6,
        6.5
      ],
      "d_pos": [
        0.1,
        -0.2,
        0.3,
        -0.3,
        0.2,
        -0.1,
        0.3,
        -0.3,
        0.2,
        -0.2,
        0.3,
        -0.3,
        0.1,
        -0.2
      ],
      "s_speed": [
        6,
        6.5,
        7,
        6.5,
        6,
        6.5,
        7,
        6.5,
        6,
        6.5,
        7,
        6.5,
        6,
        6.5
      ],
      "d_speed": [
        0.6,
        0.7,
        0.8,
        0.7,
        0.6,
        0.7,
        0.8,
        0.7,
        0.6,
        0.7,
        0.8,
        0.7,
        0.6,
        0.7
      ],
      "d_left": [
        1.5,
        1.3,
        1.6,
        1.4,
        1.5,
        1.3,
        1.6,
        1.4,
        1.5,
        1.3,
        1.6,
        1.4,
        1.5,
        1.3
      ],
      "d_right": [
        1.5,
        1.7,
        1.4,
        1.6,
        1.5,
        1.7,
        1.4,
        1.6,
        1.5,
        1.7,
        1.4,
        1.6,
        1.5,
        1.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0.05, -0.1, 0.1, -0.05, 0, 0.1, -0.1, 0.05, 0, -0.05, 0.1, -0.1, 0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6, 5.5, 6, 6.5, 6, 5.5, 6, 6.5, 6, 5.5, 6, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0.1, -0.2, 0.2, -0.1, 0, 0.2, -0.2, 0.1, 0, -0.1, 0.2, -0.2, 0.1]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 14,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13
      ],
      "d_pos": [
        0,
        0.05,
        -0.1,
        0.1,
        -0.05,
        0,
        0.1,
        -0.1,
        0.05,
        0,
        -0.05,
        0.1,
        -0.1,
        0.05
      ],
      "s_speed": [
        6,
        6.5,
        6,
        5.5,
        6,
        6.5,
        6,
        5.5,
        6,
        6.5,
        6,
        5.5,
        6,
        6.5
      ],
      "d_speed": [
        0,
        0.1,
        -0.2,
        0.2,
        -0.1,
        0,
        0.2,
        -0.2,
        0.1,
        0,
        -0.1,
        0.2,
        -0.2,
        0.1
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 10, 10, 10, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, 0.5, 0.5, 0.5, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.6, 0.6, 0.6, 0.6, 0.6]\n\n\n        - The distance to the right wall is: [1.4, 1.4, 1.4, 1.4, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 5,
      "s_pos": [
        10,
        10,
        10,
        10,
        10
      ],
      "d_pos": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.6,
        0.6,
        0.6,
        0.6,
        0.6
      ],
      "d_right": [
        1.4,
        1.4,
        1.4,
        1.4,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 12, 14, 16, 18, 20, 22]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.35, 0.36, 0.38, 0.37, 0.36, 0.35, 0.34]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.35, 0.34, 0.32, 0.33, 0.34, 0.35, 0.36]\n\n\n        - The distance to the right wall is: [2.65, 2.66, 2.68, 2.67, 2.66, 2.65, 2.64]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 7,
      "s_pos": [
        10,
        12,
        14,
        16,
        18,
        20,
        22
      ],
      "d_pos": [
        0.35,
        0.36,
        0.38,
        0.37,
        0.36,
        0.35,
        0.34
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.35,
        0.34,
        0.32,
        0.33,
        0.34,
        0.35,
        0.36
      ],
      "d_right": [
        2.65,
        2.66,
        2.68,
        2.67,
        2.66,
        2.65,
        2.64
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 3,
      "s_pos": [
        5,
        10,
        15
      ],
      "d_pos": [
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 4 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0, -0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 5.5, 6, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.05, 0]\n\n        \n        - The distance to the left wall is: [0.8, 0.75, 0.7, 0.65]\n\n\n        - The distance to the right wall is: [0.9, 0.85, 0.8, 0.75]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 4,
      "s_pos": [
        10,
        15,
        20,
        25
      ],
      "d_pos": [
        0.1,
        0.05,
        0,
        -0.05
      ],
      "s_speed": [
        5,
        5.5,
        6,
        6.5
      ],
      "d_speed": [
        0.1,
        0.1,
        0.05,
        0
      ],
      "d_left": [
        0.8,
        0.75,
        0.7,
        0.65
      ],
      "d_right": [
        0.9,
        0.85,
        0.8,
        0.75
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 0 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1.2, 2.4, 3.6, 4.8, 6]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.2, 0.18, 0.16, 0.12]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 0,
      "data_samples": 6,
      "s_pos": [
        0,
        1.2,
        2.4,
        3.6,
        4.8,
        6
      ],
      "d_pos": [
        0.1,
        0.15,
        0.2,
        0.18,
        0.16,
        0.12
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.35, -0.36, -0.34, -0.33, -0.35, -0.36, -0.37, -0.35, -0.36, -0.34, -0.33, -0.35]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 5.5, 6, 5.8, 6.2, 5.9, 6.1, 5.7, 6, 6.3, 6, 5.8]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.1, 0.2, 0.3, 0.4, 0.2, 0.3, 0.2, 0.1, 0.2, 0.3]\n\n        \n        - The distance to the left wall is: [0.35, 0.34, 0.36, 0.37, 0.35, 0.34, 0.33, 0.35, 0.34, 0.36, 0.37, 0.35]\n\n\n        - The distance to the right wall is: [2.65, 2.66, 2.64, 2.63, 2.65, 2.66, 2.67, 2.65, 2.66, 2.64, 2.63, 2.65]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 12,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11
      ],
      "d_pos": [
        -0.35,
        -0.36,
        -0.34,
        -0.33,
        -0.35,
        -0.36,
        -0.37,
        -0.35,
        -0.36,
        -0.34,
        -0.33,
        -0.35
      ],
      "s_speed": [
        5,
        5.5,
        6,
        5.8,
        6.2,
        5.9,
        6.1,
        5.7,
        6,
        6.3,
        6,
        5.8
      ],
      "d_speed": [
        0.2,
        0.3,
        0.1,
        0.2,
        0.3,
        0.4,
        0.2,
        0.3,
        0.2,
        0.1,
        0.2,
        0.3
      ],
      "d_left": [
        0.35,
        0.34,
        0.36,
        0.37,
        0.35,
        0.34,
        0.33,
        0.35,
        0.34,
        0.36,
        0.37,
        0.35
      ],
      "d_right": [
        2.65,
        2.66,
        2.64,
        2.63,
        2.65,
        2.66,
        2.67,
        2.65,
        2.66,
        2.64,
        2.63,
        2.65
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0.0, -0.05, -0.1, -0.15, -0.1, -0.05, 0.0, 0.05, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.5, 5.6, 5.5, 5.7, 5.6, 5.5, 5.6, 5.5, 5.7, 5.6, 5.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.0, 0.05, 0.0, -0.05, 0.0, 0.05, 0.0, -0.05, 0.0, 0.05, 0.0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 11,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "d_pos": [
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1,
        -0.15,
        -0.1,
        -0.05,
        0.0,
        0.05,
        0.1
      ],
      "s_speed": [
        5.5,
        5.6,
        5.5,
        5.7,
        5.6,
        5.5,
        5.6,
        5.5,
        5.7,
        5.6,
        5.5
      ],
      "d_speed": [
        0.0,
        0.05,
        0.0,
        -0.05,
        0.0,
        0.05,
        0.0,
        -0.05,
        0.0,
        0.05,
        0.0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 12,
      "s_pos": [
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55,
        60
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, -0.1, 0.0, 0.1, 0.05, -0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7, 6.8, 6.5, 6.2, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.1, 0.05, 0.1, 0.15, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.4, 1.5, 1.5, 1.6, 1.4]\n\n\n        - The distance to the right wall is: [1.2, 1.3, 1.1, 1.2, 1.2, 1.3, 1.1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 7,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30
      ],
      "d_pos": [
        0.1,
        0.05,
        -0.1,
        0.0,
        0.1,
        0.05,
        -0.05
      ],
      "s_speed": [
        6,
        6.5,
        7,
        6.8,
        6.5,
        6.2,
        6
      ],
      "d_speed": [
        0.1,
        0.2,
        0.1,
        0.05,
        0.1,
        0.15,
        0.1
      ],
      "d_left": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.5,
        1.6,
        1.4
      ],
      "d_right": [
        1.2,
        1.3,
        1.1,
        1.2,
        1.2,
        1.3,
        1.1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 21, 27, 34]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, -0.1, 0.1, -0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 6, 6, 7, 7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.4, 0.2, 0.3]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.5, 1.4, 1.6]\n\n\n        - The distance to the right wall is: [1.6, 1.5, 1.6, 1.7, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 5,
      "s_pos": [
        10,
        15,
        21,
        27,
        34
      ],
      "d_pos": [
        0.1,
        0.05,
        -0.1,
        0.1,
        -0.05
      ],
      "s_speed": [
        5,
        6,
        6,
        7,
        7
      ],
      "d_speed": [
        0.2,
        0.3,
        0.4,
        0.2,
        0.3
      ],
      "d_left": [
        1.5,
        1.6,
        1.5,
        1.4,
        1.6
      ],
      "d_right": [
        1.6,
        1.5,
        1.6,
        1.7,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.2, 0.2, 0.2, 0.1, 0.1, 0.1, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.1, 0.2, 0.2, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.4, 1.4, 1.5, 1.5, 1.5, 1.5, 1.4, 1.4]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.6, 1.6, 1.5, 1.5, 1.5, 1.5, 1.6, 1.6]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 11,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.2,
        0.2,
        0.2,
        0.1,
        0.1,
        0.1,
        0.2,
        0.2
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.2,
        0.2,
        0.1,
        0.1,
        0.1,
        0.2,
        0.2,
        0.1,
        0.1
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.4,
        1.4,
        1.5,
        1.5,
        1.5,
        1.5,
        1.4,
        1.4
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.6,
        1.6,
        1.5,
        1.5,
        1.5,
        1.5,
        1.6,
        1.6
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 9.8, 9.6, 9.4, 9.2, 9, 8.8, 8.6, 8.4, 8.2, 8, 7.8, 7.6, 7.4]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.2, 0.25, 0.3, 0.25, 0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.4, 1.5, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1, 0.9, 0.8, 0.7]\n\n\n        - The distance to the right wall is: [0.8, 0.7, 0.6, 0.5, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 14,
      "s_pos": [
        10,
        9.8,
        9.6,
        9.4,
        9.2,
        9,
        8.8,
        8.6,
        8.4,
        8.2,
        8,
        7.8,
        7.6,
        7.4
      ],
      "d_pos": [
        0.1,
        0.15,
        0.2,
        0.25,
        0.3,
        0.25,
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15
      ],
      "s_speed": [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1
      ],
      "d_left": [
        1.2,
        1.3,
        1.4,
        1.5,
        1.6,
        1.5,
        1.4,
        1.3,
        1.2,
        1.1,
        1,
        0.9,
        0.8,
        0.7
      ],
      "d_right": [
        0.8,
        0.7,
        0.6,
        0.5,
        0.4,
        0.5,
        0.6,
        0.7,
        0.8,
        0.9,
        1,
        1.1,
        1.2,
        1.3
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 4 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [2, 3, 4, 5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, -0.5, 0.4, -0.4]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, 0.7, 0.6, 0.7]\n\n        \n        - The distance to the left wall is: [1.5, 1.2, 1.8, 1.3]\n\n\n        - The distance to the right wall is: [1.7, 1.9, 1.4, 1.8]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 4,
      "s_pos": [
        2,
        3,
        4,
        5
      ],
      "d_pos": [
        0.5,
        -0.5,
        0.4,
        -0.4
      ],
      "s_speed": [
        6,
        6.5,
        6,
        6.5
      ],
      "d_speed": [
        0.6,
        0.7,
        0.6,
        0.7
      ],
      "d_left": [
        1.5,
        1.2,
        1.8,
        1.3
      ],
      "d_right": [
        1.7,
        1.9,
        1.4,
        1.8
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35, 40, 45, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35, -0.35]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n\n        - The distance to the right wall is: [3.8, 3.8, 3.8, 3.8, 3.8, 3.8, 3.8, 3.8, 3.8]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 9,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50
      ],
      "d_pos": [
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35,
        -0.35
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "d_right": [
        3.8,
        3.8,
        3.8,
        3.8,
        3.8,
        3.8,
        3.8,
        3.8,
        3.8
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35, 40, 45]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n        \n        - The distance to the left wall is: [2, 2, 2, 2, 2, 2, 2, 2]\n\n\n        - The distance to the right wall is: [2, 2, 2, 2, 2, 2, 2, 2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 8,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45
      ],
      "d_pos": [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      "d_left": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "d_right": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35, 40]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.4, -0.35, 0.45, -0.4, 0.5, -0.45, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6, 5.5, 6, 6.5, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.7, 0.65, -0.75, 0.7, -0.65, 0.6]\n\n        \n        - The distance to the left wall is: [0.5, 0.3, 0.6, 0.4, 0.5, 0.3, 0.6]\n\n\n        - The distance to the right wall is: [0.5, 0.6, 0.4, 0.6, 0.5, 0.7, 0.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 7,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35,
        40
      ],
      "d_pos": [
        0.4,
        -0.35,
        0.45,
        -0.4,
        0.5,
        -0.45,
        0.5
      ],
      "s_speed": [
        6,
        6.5,
        6,
        5.5,
        6,
        6.5,
        6
      ],
      "d_speed": [
        0.6,
        -0.7,
        0.65,
        -0.75,
        0.7,
        -0.65,
        0.6
      ],
      "d_left": [
        0.5,
        0.3,
        0.6,
        0.4,
        0.5,
        0.3,
        0.6
      ],
      "d_right": [
        0.5,
        0.6,
        0.4,
        0.6,
        0.5,
        0.7,
        0.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 12, 14, 16, 18, 20, 22, 24, 26]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0.05, -0.1, -0.05, 0.2, 0.1, -0.05, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.2, 6.1, 6, 6.3, 6.1, 6.2, 6, 6.1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.1, 0.2, 0.15, 0.25, 0.2, 0.1, 0.05]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 9,
      "s_pos": [
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26
      ],
      "d_pos": [
        0.1,
        0.15,
        0.05,
        -0.1,
        -0.05,
        0.2,
        0.1,
        -0.05,
        0
      ],
      "s_speed": [
        6,
        6.2,
        6.1,
        6,
        6.3,
        6.1,
        6.2,
        6,
        6.1
      ],
      "d_speed": [
        0.2,
        0.3,
        0.1,
        0.2,
        0.15,
        0.25,
        0.2,
        0.1,
        0.05
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.15, 0.1, 0.05, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.5, 6.0, 6.5, 6.0, 5.5, 6.0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.2, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.4, 1.3, 1.2, 1.3]\n\n\n        - The distance to the right wall is: [0.8, 0.7, 0.6, 0.7, 0.8, 0.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 6,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35
      ],
      "d_pos": [
        0.1,
        0.1,
        0.15,
        0.1,
        0.05,
        0.1
      ],
      "s_speed": [
        5.5,
        6.0,
        6.5,
        6.0,
        5.5,
        6.0
      ],
      "d_speed": [
        0.1,
        0.1,
        0.2,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.2,
        1.3,
        1.4,
        1.3,
        1.2,
        1.3
      ],
      "d_right": [
        0.8,
        0.7,
        0.6,
        0.7,
        0.8,
        0.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [1, 6, 11, 16, 21, 26, 31, 36]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, -0.1, -0.1, 0.1, 0.1, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.2, 0.2, 0.3, 0.3, 0.2, 0.2, 0.3]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.4, 1.4, 1.5, 1.5, 1.4]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.4, 1.4, 1.5, 1.5, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 8,
      "s_pos": [
        1,
        6,
        11,
        16,
        21,
        26,
        31,
        36
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        -0.1,
        -0.1,
        0.1,
        0.1,
        -0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.2,
        0.2,
        0.2,
        0.3,
        0.3,
        0.2,
        0.2,
        0.3
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.4,
        1.4,
        1.5,
        1.5,
        1.4
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.4,
        1.4,
        1.5,
        1.5,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 0 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [100.5, 100.3, 100.1, 99.9, 99.7, 99.5, 99.3, 99.1, 98.9, 98.7, 98.5]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.25, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2, -0.25]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.12, 0.1, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2, -0.25]\n\n        \n        - The distance to the left wall is: [2.0, 2.1, 2.2, 2.1, 2.0, 1.9, 1.8, 1.9, 2.0, 2.1, 2.2]\n\n\n        - The distance to the right wall is: [1.8, 1.7, 1.6, 1.7, 1.8, 1.9, 2.0, 1.9, 1.8, 1.7, 1.6]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 0,
      "data_samples": 11,
      "s_pos": [
        100.5,
        100.3,
        100.1,
        99.9,
        99.7,
        99.5,
        99.3,
        99.1,
        98.9,
        98.7,
        98.5
      ],
      "d_pos": [
        0.2,
        0.25,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25
      ],
      "s_speed": [
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5,
        -0.5
      ],
      "d_speed": [
        0.12,
        0.1,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25
      ],
      "d_left": [
        2.0,
        2.1,
        2.2,
        2.1,
        2.0,
        1.9,
        1.8,
        1.9,
        2.0,
        2.1,
        2.2
      ],
      "d_right": [
        1.8,
        1.7,
        1.6,
        1.7,
        1.8,
        1.9,
        2.0,
        1.9,
        1.8,
        1.7,
        1.6
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 9 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.4, -0.4, 0.5, -0.5, 0.6, -0.6, 0.7, -0.7, 0.8]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7, 6.5, 6, 5.5, 6, 6.5, 7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.6, 0.7, -0.7, 0.8, -0.8, 0.9, -0.9, 1.0]\n\n        \n        - The distance to the left wall is: [1.2, 0.8, 1.3, 0.7, 1.4, 0.6, 1.5, 0.5, 1.6]\n\n\n        - The distance to the right wall is: [0.8, 1.2, 0.7, 1.3, 0.6, 1.4, 0.5, 1.5, 0.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 9,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "d_pos": [
        0.4,
        -0.4,
        0.5,
        -0.5,
        0.6,
        -0.6,
        0.7,
        -0.7,
        0.8
      ],
      "s_speed": [
        6,
        6.5,
        7,
        6.5,
        6,
        5.5,
        6,
        6.5,
        7
      ],
      "d_speed": [
        0.6,
        -0.6,
        0.7,
        -0.7,
        0.8,
        -0.8,
        0.9,
        -0.9,
        1.0
      ],
      "d_left": [
        1.2,
        0.8,
        1.3,
        0.7,
        1.4,
        0.6,
        1.5,
        0.5,
        1.6
      ],
      "d_right": [
        0.8,
        1.2,
        0.7,
        1.3,
        0.6,
        1.4,
        0.5,
        1.5,
        0.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\n\n\n        - The distance to the right wall is: [1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 12,
      "s_pos": [
        30,
        30,
        30,
        30,
        30,
        30,
        30,
        30,
        30,
        30,
        30,
        30
      ],
      "d_pos": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8
      ],
      "d_right": [
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2,
        1.2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.4, -0.5, 0.6, -0.7, 0.8, -0.9]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 5.5, 6, 6.5, 5.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.7, 0.8, -0.9, 1.0, -1.1]\n\n        \n        - The distance to the left wall is: [0.6, 0.5, 0.7, 0.4, 0.8, 0.9]\n\n\n        - The distance to the right wall is: [1.2, 1.3, 1.1, 1.4, 1.0, 0.9]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 6,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35
      ],
      "d_pos": [
        0.4,
        -0.5,
        0.6,
        -0.7,
        0.8,
        -0.9
      ],
      "s_speed": [
        6,
        6.5,
        5.5,
        6,
        6.5,
        5.5
      ],
      "d_speed": [
        0.6,
        -0.7,
        0.8,
        -0.9,
        1.0,
        -1.1
      ],
      "d_left": [
        0.6,
        0.5,
        0.7,
        0.4,
        0.8,
        0.9
      ],
      "d_right": [
        1.2,
        1.3,
        1.1,
        1.4,
        1.0,
        0.9
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 21, 27, 34]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, -0.1, 0.1, -0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 6, 6, 7, 7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.4, 0.2, 0.3]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.5, 1.4, 1.6]\n\n\n        - The distance to the right wall is: [1.6, 1.5, 1.6, 1.7, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 5,
      "s_pos": [
        10,
        15,
        21,
        27,
        34
      ],
      "d_pos": [
        0.1,
        0.05,
        -0.1,
        0.1,
        -0.05
      ],
      "s_speed": [
        5,
        6,
        6,
        7,
        7
      ],
      "d_speed": [
        0.2,
        0.3,
        0.4,
        0.2,
        0.3
      ],
      "d_left": [
        1.5,
        1.6,
        1.5,
        1.4,
        1.6
      ],
      "d_right": [
        1.6,
        1.5,
        1.6,
        1.7,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 50, 50, 50, 50, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\n\n\n        - The distance to the right wall is: [0.9, 0.9, 0.9, 0.9, 0.9, 0.9]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 6,
      "s_pos": [
        50,
        50,
        50,
        50,
        50,
        50
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8
      ],
      "d_right": [
        0.9,
        0.9,
        0.9,
        0.9,
        0.9,
        0.9
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0.0, 0.6, 1.2, 1.8, 2.4, 3.0, 3.6, 4.2, 4.8, 5.4, 6.0, 6.6, 7.2]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, -0.05, -0.1, 0.0, 0.05, -0.05, 0.1, 0.0, -0.05, 0.05, 0.1, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.3, 0.25, 0.2, 0.15, 0.1, 0.05, 0.2, 0.15, 0.1, 0.05, 0.2, 0.15, 0.3]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 13,
      "s_pos": [
        0.0,
        0.6,
        1.2,
        1.8,
        2.4,
        3.0,
        3.6,
        4.2,
        4.8,
        5.4,
        6.0,
        6.6,
        7.2
      ],
      "d_pos": [
        0.1,
        0.05,
        -0.05,
        -0.1,
        0.0,
        0.05,
        -0.05,
        0.1,
        0.0,
        -0.05,
        0.05,
        0.1,
        -0.1
      ],
      "s_speed": [
        3.5,
        3.5,
        3.5,
        3.5,
        3.5,
        3.5,
        3.5,
        3.5,
        3.5,
        3.5,
        3.5,
        3.5,
        3.5
      ],
      "d_speed": [
        0.3,
        0.25,
        0.2,
        0.15,
        0.1,
        0.05,
        0.2,
        0.15,
        0.1,
        0.05,
        0.2,
        0.15,
        0.3
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, -0.1, 0.0, 0.1, 0.05, -0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7, 6.8, 6.5, 6.2, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.2, 0.1, 0.05, 0.1, 0.15, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.4, 1.5, 1.5, 1.6, 1.4]\n\n\n        - The distance to the right wall is: [1.2, 1.3, 1.1, 1.2, 1.2, 1.3, 1.1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 7,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30
      ],
      "d_pos": [
        0.1,
        0.05,
        -0.1,
        0.0,
        0.1,
        0.05,
        -0.05
      ],
      "s_speed": [
        6,
        6.5,
        7,
        6.8,
        6.5,
        6.2,
        6
      ],
      "d_speed": [
        0.1,
        0.2,
        0.1,
        0.05,
        0.1,
        0.15,
        0.1
      ],
      "d_left": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.5,
        1.6,
        1.4
      ],
      "d_right": [
        1.2,
        1.3,
        1.1,
        1.2,
        1.2,
        1.3,
        1.1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 7,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 12 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.35, 0.36, 0.37, 0.38, 0.39, 0.38, 0.37, 0.36, 0.35, 0.34, 0.33, 0.32]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6.7, 6.8, 7, 6.9, 6.8, 6.7, 6.5, 6.3, 6, 5.8]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.15, 0.15, 0.2, 0.2, 0.15, 0.15, 0.1, 0.1, 0.05, 0.05]\n\n        \n        - The distance to the left wall is: [0.35, 0.34, 0.33, 0.32, 0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38]\n\n\n        - The distance to the right wall is: [3.65, 3.66, 3.67, 3.68, 3.69, 3.68, 3.67, 3.66, 3.65, 3.64, 3.63, 3.62]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 12,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55,
        60,
        65
      ],
      "d_pos": [
        0.35,
        0.36,
        0.37,
        0.38,
        0.39,
        0.38,
        0.37,
        0.36,
        0.35,
        0.34,
        0.33,
        0.32
      ],
      "s_speed": [
        6,
        6.5,
        6.7,
        6.8,
        7,
        6.9,
        6.8,
        6.7,
        6.5,
        6.3,
        6,
        5.8
      ],
      "d_speed": [
        0.1,
        0.1,
        0.15,
        0.15,
        0.2,
        0.2,
        0.15,
        0.15,
        0.1,
        0.1,
        0.05,
        0.05
      ],
      "d_left": [
        0.35,
        0.34,
        0.33,
        0.32,
        0.31,
        0.32,
        0.33,
        0.34,
        0.35,
        0.36,
        0.37,
        0.38
      ],
      "d_right": [
        3.65,
        3.66,
        3.67,
        3.68,
        3.69,
        3.68,
        3.67,
        3.66,
        3.65,
        3.64,
        3.63,
        3.62
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15, 20, 25, 30]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5, 6, 5, 6, 5, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [2, 2, 2, 2, 2, 2]\n\n\n        - The distance to the right wall is: [2, 2, 2, 2, 2, 2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 6,
      "s_pos": [
        5,
        10,
        15,
        20,
        25,
        30
      ],
      "d_pos": [
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "s_speed": [
        5,
        6,
        5,
        6,
        5,
        6
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "d_right": [
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.7, 1.4, 2.1, 2.8, 3.5, 4.2, 4.9, 5.6, 6.3]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.05, 0.02, -0.01, 0.03, -0.02, 0.01, 0.04, -0.03, 0.01, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6.8, 7, 6.9, 6.7, 6.5, 6.3, 6.1, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.05, 0.07, 0.02, 0.03, 0.08, 0.05, 0.06, 0.04, 0.03]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.4, 1.5, 1.4, 1.6, 1.5, 1.6, 1.7, 1.5]\n\n\n        - The distance to the right wall is: [1.4, 1.3, 1.5, 1.4, 1.5, 1.3, 1.4, 1.3, 1.2, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 10,
      "s_pos": [
        0,
        0.7,
        1.4,
        2.1,
        2.8,
        3.5,
        4.2,
        4.9,
        5.6,
        6.3
      ],
      "d_pos": [
        0.05,
        0.02,
        -0.01,
        0.03,
        -0.02,
        0.01,
        0.04,
        -0.03,
        0.01,
        0
      ],
      "s_speed": [
        6,
        6.5,
        6.8,
        7,
        6.9,
        6.7,
        6.5,
        6.3,
        6.1,
        6
      ],
      "d_speed": [
        0.1,
        0.05,
        0.07,
        0.02,
        0.03,
        0.08,
        0.05,
        0.06,
        0.04,
        0.03
      ],
      "d_left": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.4,
        1.6,
        1.5,
        1.6,
        1.7,
        1.5
      ],
      "d_right": [
        1.4,
        1.3,
        1.5,
        1.4,
        1.5,
        1.3,
        1.4,
        1.3,
        1.2,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0, -0.05, -0.1, -0.05, 0, 0.05, 0.1, 0.05, 0, -0.05, -0.1, -0.05, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [5.5, 5.6, 5.7, 5.7, 5.8, 5.8, 5.9, 5.9, 6, 6, 6.1, 6.1, 6.2, 6.2, 6.3]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2, -0.15, -0.1, -0.05, 0, 0.05, 0.1]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.2, 1.1, 1.2, 1.3, 1.2, 1.1, 1.2, 1.3, 1.2, 1.1, 1.2, 1.3, 1.2]\n\n\n        - The distance to the right wall is: [0.8, 0.7, 0.8, 0.9, 0.8, 0.7, 0.8, 0.9, 0.8, 0.7, 0.8, 0.9, 0.8, 0.7, 0.8]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 15,
      "s_pos": [
        0,
        0.5,
        1,
        1.5,
        2,
        2.5,
        3,
        3.5,
        4,
        4.5,
        5,
        5.5,
        6,
        6.5,
        7
      ],
      "d_pos": [
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.05,
        0,
        0.05,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.05,
        0
      ],
      "s_speed": [
        5.5,
        5.6,
        5.7,
        5.7,
        5.8,
        5.8,
        5.9,
        5.9,
        6,
        6,
        6.1,
        6.1,
        6.2,
        6.2,
        6.3
      ],
      "d_speed": [
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.15,
        -0.1,
        -0.05,
        0,
        0.05,
        0.1
      ],
      "d_left": [
        1.2,
        1.3,
        1.2,
        1.1,
        1.2,
        1.3,
        1.2,
        1.1,
        1.2,
        1.3,
        1.2,
        1.1,
        1.2,
        1.3,
        1.2
      ],
      "d_right": [
        0.8,
        0.7,
        0.8,
        0.9,
        0.8,
        0.7,
        0.8,
        0.9,
        0.8,
        0.7,
        0.8,
        0.9,
        0.8,
        0.7,
        0.8
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 49, 48, 47, 46, 45, 44, 43]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.25, 0.28, 0.3, 0.28, 0.25, 0.2, 0.15]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-3, -3, -3, -3, -3, -3, -3, -3]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.15, 0.18, 0.2, 0.18, 0.15, 0.1, 0.05]\n\n        \n        - The distance to the left wall is: [0.9, 0.85, 0.8, 0.75, 0.8, 0.85, 0.9, 0.95]\n\n\n        - The distance to the right wall is: [1.1, 1.15, 1.2, 1.25, 1.2, 1.15, 1.1, 1.05]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 8,
      "s_pos": [
        50,
        49,
        48,
        47,
        46,
        45,
        44,
        43
      ],
      "d_pos": [
        0.2,
        0.25,
        0.28,
        0.3,
        0.28,
        0.25,
        0.2,
        0.15
      ],
      "s_speed": [
        -3,
        -3,
        -3,
        -3,
        -3,
        -3,
        -3,
        -3
      ],
      "d_speed": [
        0.1,
        0.15,
        0.18,
        0.2,
        0.18,
        0.15,
        0.1,
        0.05
      ],
      "d_left": [
        0.9,
        0.85,
        0.8,
        0.75,
        0.8,
        0.85,
        0.9,
        0.95
      ],
      "d_right": [
        1.1,
        1.15,
        1.2,
        1.25,
        1.2,
        1.15,
        1.1,
        1.05
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.15, 0, -0.1, 0.05, -0.05, 0.1, 0.05, -0.1, 0.05, 0]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.5, 6.7, 6.6, 6.8, 6.7, 6.6, 6.5, 6.7, 6.8, 6.6, 6.7]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.1, 0.25, 0.15, 0.2, 0.1, 0.25, 0.3, 0.2, 0.15]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.5, 1.3, 1.6, 1.5, 1.4, 1.3, 1.5, 1.4, 1.6]\n\n\n        - The distance to the right wall is: [1.2, 1.3, 1.2, 1.4, 1.1, 1.2, 1.3, 1.4, 1.2, 1.3, 1.1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 11,
      "s_pos": [
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20
      ],
      "d_pos": [
        0.1,
        0.15,
        0,
        -0.1,
        0.05,
        -0.05,
        0.1,
        0.05,
        -0.1,
        0.05,
        0
      ],
      "s_speed": [
        6.5,
        6.7,
        6.6,
        6.8,
        6.7,
        6.6,
        6.5,
        6.7,
        6.8,
        6.6,
        6.7
      ],
      "d_speed": [
        0.2,
        0.3,
        0.1,
        0.25,
        0.15,
        0.2,
        0.1,
        0.25,
        0.3,
        0.2,
        0.15
      ],
      "d_left": [
        1.5,
        1.4,
        1.5,
        1.3,
        1.6,
        1.5,
        1.4,
        1.3,
        1.5,
        1.4,
        1.6
      ],
      "d_right": [
        1.2,
        1.3,
        1.2,
        1.4,
        1.1,
        1.2,
        1.3,
        1.4,
        1.2,
        1.3,
        1.1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.1, 0.3, 0.2, 0.1, 0.3, 0.2, 0.1, 0.2, 0.1, 0.3, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6, 6.5, 6, 6.5, 6, 6.5, 6, 6.5, 6, 6.5, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.2, 0.4, 0.3, 0.2, 0.4, 0.3, 0.2, 0.3, 0.2, 0.4, 0.3]\n\n        \n        - The distance to the left wall is: [2, 2.1, 2, 2.1, 2, 2.1, 2, 2.1, 2, 2.1, 2, 2.1, 2]\n\n\n        - The distance to the right wall is: [1.9, 1.8, 1.9, 1.8, 1.9, 1.8, 1.9, 1.8, 1.9, 1.8, 1.9, 1.8, 1.9]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 13,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55,
        60
      ],
      "d_pos": [
        0.1,
        0.2,
        0.1,
        0.3,
        0.2,
        0.1,
        0.3,
        0.2,
        0.1,
        0.2,
        0.1,
        0.3,
        0.2
      ],
      "s_speed": [
        6,
        6.5,
        6,
        6.5,
        6,
        6.5,
        6,
        6.5,
        6,
        6.5,
        6,
        6.5,
        6
      ],
      "d_speed": [
        0.2,
        0.3,
        0.2,
        0.4,
        0.3,
        0.2,
        0.4,
        0.3,
        0.2,
        0.3,
        0.2,
        0.4,
        0.3
      ],
      "d_left": [
        2,
        2.1,
        2,
        2.1,
        2,
        2.1,
        2,
        2.1,
        2,
        2.1,
        2,
        2.1,
        2
      ],
      "d_right": [
        1.9,
        1.8,
        1.9,
        1.8,
        1.9,
        1.8,
        1.9,
        1.8,
        1.9,
        1.8,
        1.9,
        1.8,
        1.9
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 49.5, 49, 48.5, 48, 47.5, 47, 46.5, 46, 45.5, 45]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, 0.15, 0.1, 0.05, 0, -0.05, -0.1, -0.15, -0.2, -0.25]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.05, 0, -0.05, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: True\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 11,
      "s_pos": [
        50,
        49.5,
        49,
        48.5,
        48,
        47.5,
        47,
        46.5,
        46,
        45.5,
        45
      ],
      "d_pos": [
        0.1,
        0.2,
        0.15,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.15,
        -0.2,
        -0.25
      ],
      "s_speed": [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      ],
      "d_speed": [
        0.1,
        0.1,
        0.05,
        0,
        -0.05,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1,
        -0.1
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": true,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.2, 0.2, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The distance to the left wall is: [1.5, 1.6, 1.4, 1.5, 1.4, 1.5]\n\n\n        - The distance to the right wall is: [1.4, 1.3, 1.5, 1.4, 1.5, 1.4]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 6,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35
      ],
      "d_pos": [
        0.1,
        0.1,
        0.2,
        0.2,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "d_left": [
        1.5,
        1.6,
        1.4,
        1.5,
        1.4,
        1.5
      ],
      "d_right": [
        1.4,
        1.3,
        1.5,
        1.4,
        1.5,
        1.4
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 14 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.4, -0.4, 0.5, -0.5, 0.4, -0.4, 0.5, -0.5, 0.4, -0.4, 0.5, -0.5, 0.4, -0.4]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 7, 6.5, 6, 6.5, 7, 6.5, 6, 6.5, 7, 6.5, 6, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, -0.6, 0.7, -0.7, 0.6, -0.6, 0.7, -0.7, 0.6, -0.6, 0.7, -0.7, 0.6, -0.6]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.1, 1.2, 1.3, 1.2, 1.3, 1.1, 1.2, 1.3, 1.2, 1.3, 1.1, 1.2]\n\n\n        - The distance to the right wall is: [0.8, 0.7, 0.9, 0.8, 0.7, 0.8, 0.7, 0.9, 0.8, 0.7, 0.8, 0.7, 0.9, 0.8]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 14,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13
      ],
      "d_pos": [
        0.4,
        -0.4,
        0.5,
        -0.5,
        0.4,
        -0.4,
        0.5,
        -0.5,
        0.4,
        -0.4,
        0.5,
        -0.5,
        0.4,
        -0.4
      ],
      "s_speed": [
        6,
        6.5,
        7,
        6.5,
        6,
        6.5,
        7,
        6.5,
        6,
        6.5,
        7,
        6.5,
        6,
        6.5
      ],
      "d_speed": [
        0.6,
        -0.6,
        0.7,
        -0.7,
        0.6,
        -0.6,
        0.7,
        -0.7,
        0.6,
        -0.6,
        0.7,
        -0.7,
        0.6,
        -0.6
      ],
      "d_left": [
        1.2,
        1.3,
        1.1,
        1.2,
        1.3,
        1.2,
        1.3,
        1.1,
        1.2,
        1.3,
        1.2,
        1.3,
        1.1,
        1.2
      ],
      "d_right": [
        0.8,
        0.7,
        0.9,
        0.8,
        0.7,
        0.8,
        0.7,
        0.9,
        0.8,
        0.7,
        0.8,
        0.7,
        0.9,
        0.8
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 11 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [-0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The distance to the left wall is: [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]\n\n\n        - The distance to the right wall is: [3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 11,
      "s_pos": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "d_pos": [
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3,
        -0.3
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "d_left": [
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3,
        0.3
      ],
      "d_right": [
        3.7,
        3.7,
        3.7,
        3.7,
        3.7,
        3.7,
        3.7,
        3.7,
        3.7,
        3.7,
        3.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 5 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 10, 10, 10, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, 0.5, 0.5, 0.5, 0.5]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.3, 0.3, 0.3, 0.3, 0.3]\n\n\n        - The distance to the right wall is: [0.3, 0.3, 0.3, 0.3, 0.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 5,
      "s_pos": [
        10,
        10,
        10,
        10,
        10
      ],
      "d_pos": [
        0.5,
        0.5,
        0.5,
        0.5,
        0.5
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.3,
        0.3,
        0.3,
        0.3,
        0.3
      ],
      "d_right": [
        0.3,
        0.3,
        0.3,
        0.3,
        0.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 12, 14, 16, 18, 20]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.5, -0.6, 0.4, -0.5, 0.6, -0.4]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.6, 0.7, 0.5, 0.6, 0.7, 0.5]\n\n        \n        - The distance to the left wall is: [1.5, 1.3, 1.4, 1.5, 1.3, 1.4]\n\n\n        - The distance to the right wall is: [1.3, 1.5, 1.3, 1.4, 1.5, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 6,
      "s_pos": [
        10,
        12,
        14,
        16,
        18,
        20
      ],
      "d_pos": [
        0.5,
        -0.6,
        0.4,
        -0.5,
        0.6,
        -0.4
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.6,
        0.7,
        0.5,
        0.6,
        0.7,
        0.5
      ],
      "d_left": [
        1.5,
        1.3,
        1.4,
        1.5,
        1.3,
        1.4
      ],
      "d_right": [
        1.3,
        1.5,
        1.3,
        1.4,
        1.5,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 12, 14, 16, 18, 20, 22, 24]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.2, 0.2, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6, 5.5, 6, 6, 6.5, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.1, 0.3, 0.2, 0.1, 0.2, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.4, 1.3, 1.6, 1.5, 1.4, 1.5, 1.4]\n\n\n        - The distance to the right wall is: [1.3, 1.5, 1.4, 1.3, 1.5, 1.4, 1.3, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 8,
      "s_pos": [
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24
      ],
      "d_pos": [
        0.1,
        0.1,
        0.2,
        0.2,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6.5,
        6,
        5.5,
        6,
        6,
        6.5,
        6
      ],
      "d_speed": [
        0.2,
        0.1,
        0.3,
        0.2,
        0.1,
        0.2,
        0.1,
        0.1
      ],
      "d_left": [
        1.5,
        1.4,
        1.3,
        1.6,
        1.5,
        1.4,
        1.5,
        1.4
      ],
      "d_right": [
        1.3,
        1.5,
        1.4,
        1.3,
        1.5,
        1.4,
        1.3,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, -0.1, 0.0, 0.2, -0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [4, 5, 6, 5, 6, 5, 4]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.4, 0.2, 0.3, 0.4, 0.2]\n\n        \n        - The distance to the left wall is: [0.8, 0.9, 0.7, 0.8, 0.9, 0.7, 0.8]\n\n\n        - The distance to the right wall is: [0.7, 0.8, 0.6, 0.7, 0.8, 0.6, 0.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 7,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30
      ],
      "d_pos": [
        0.1,
        0.2,
        -0.1,
        0.0,
        0.2,
        -0.2,
        0.1
      ],
      "s_speed": [
        4,
        5,
        6,
        5,
        6,
        5,
        4
      ],
      "d_speed": [
        0.2,
        0.3,
        0.4,
        0.2,
        0.3,
        0.4,
        0.2
      ],
      "d_left": [
        0.8,
        0.9,
        0.7,
        0.8,
        0.9,
        0.7,
        0.8
      ],
      "d_right": [
        0.7,
        0.8,
        0.6,
        0.7,
        0.8,
        0.6,
        0.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 7 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 5, 10, 15, 20, 25, 30]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.2, -0.1, 0.0, 0.2, -0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [4, 5, 6, 5, 6, 5, 4]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.3, 0.4, 0.2, 0.3, 0.4, 0.2]\n\n        \n        - The distance to the left wall is: [0.8, 0.9, 0.7, 0.8, 0.9, 0.7, 0.8]\n\n\n        - The distance to the right wall is: [0.7, 0.8, 0.6, 0.7, 0.8, 0.6, 0.7]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 7,
      "s_pos": [
        0,
        5,
        10,
        15,
        20,
        25,
        30
      ],
      "d_pos": [
        0.1,
        0.2,
        -0.1,
        0.0,
        0.2,
        -0.2,
        0.1
      ],
      "s_speed": [
        4,
        5,
        6,
        5,
        6,
        5,
        4
      ],
      "d_speed": [
        0.2,
        0.3,
        0.4,
        0.2,
        0.3,
        0.4,
        0.2
      ],
      "d_left": [
        0.8,
        0.9,
        0.7,
        0.8,
        0.9,
        0.7,
        0.8
      ],
      "d_right": [
        0.7,
        0.8,
        0.6,
        0.7,
        0.8,
        0.6,
        0.7
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 1 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 50, 50, 50, 50, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [0.8, 0.8, 0.8, 0.8, 0.8, 0.8]\n\n\n        - The distance to the right wall is: [0.9, 0.9, 0.9, 0.9, 0.9, 0.9]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 1,
      "data_samples": 6,
      "s_pos": [
        50,
        50,
        50,
        50,
        50,
        50
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8
      ],
      "d_right": [
        0.9,
        0.9,
        0.9,
        0.9,
        0.9,
        0.9
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 8 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [20, 25, 30, 35, 40, 45, 50, 55]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0.02, -0.01, 0.04, 0.08, 0.1, 0.05]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6.5, 6.2, 6.8, 7, 6.5, 6.3, 6.8]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.2, 0.15, 0.1, 0.05, 0.1, 0.14, 0.2, 0.15]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.1, 1.4, 1.5, 1.3, 1.2, 1.4]\n\n\n        - The distance to the right wall is: [1.5, 1.4, 1.6, 1.3, 1.2, 1.4, 1.5, 1.3]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 8,
      "s_pos": [
        20,
        25,
        30,
        35,
        40,
        45,
        50,
        55
      ],
      "d_pos": [
        0.1,
        0.05,
        0.02,
        -0.01,
        0.04,
        0.08,
        0.1,
        0.05
      ],
      "s_speed": [
        6,
        6.5,
        6.2,
        6.8,
        7,
        6.5,
        6.3,
        6.8
      ],
      "d_speed": [
        0.2,
        0.15,
        0.1,
        0.05,
        0.1,
        0.14,
        0.2,
        0.15
      ],
      "d_left": [
        1.2,
        1.3,
        1.1,
        1.4,
        1.5,
        1.3,
        1.2,
        1.4
      ],
      "d_right": [
        1.5,
        1.4,
        1.6,
        1.3,
        1.2,
        1.4,
        1.5,
        1.3
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Reverse the car \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 4 seconds in 6 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 15, 20, 25, 30, 35]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.2, 0.2, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6, 6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n\n        - The distance to the right wall is: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Reverse the car. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 4,
      "data_samples": 6,
      "s_pos": [
        10,
        15,
        20,
        25,
        30,
        35
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.2,
        0.2,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6,
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "d_right": [
        1.5,
        1.5,
        1.5,
        1.5,
        1.5,
        1.5
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_reverse_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 5 seconds in 15 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 5,
      "data_samples": 15,
      "s_pos": [
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10
      ],
      "d_pos": [
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 3 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [5, 10, 15]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6, 6, 6]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.1, 0.1, 0.1]\n\n        \n        - The distance to the left wall is: [1, 1, 1]\n\n\n        - The distance to the right wall is: [1, 1, 1]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 3,
      "s_pos": [
        5,
        10,
        15
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        6,
        6,
        6
      ],
      "d_speed": [
        0.1,
        0.1,
        0.1
      ],
      "d_left": [
        1,
        1,
        1
      ],
      "d_right": [
        1,
        1,
        1
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Drive forward \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 3 seconds in 10 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [50, 50, 50, 50, 50, 50, 50, 50, 50, 50]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n        \n        - The distance to the left wall is: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n\n\n        - The distance to the right wall is: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Drive forward. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 3,
      "data_samples": 10,
      "s_pos": [
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50
      ],
      "d_pos": [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1
      ],
      "s_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_speed": [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "d_left": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "d_right": [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_forward_check"
  },
  {
    "prompt": "\n        You are an AI embodied on an autonomous racing car. The human wants to: Don't move \n\n        The car is currently on the track, data available is in the Frenet Corrdinate frame, units are in meters and meters per second. \n        The racing line is a minimal curvature trajectory to optimize the lap time.\n        The data has been sampled for 2 seconds in 13 samples.\n        \n        - The car's position along the racing line is given by the s-coordinate: [0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0]\n\n        \n        - The car's lateral deviation from the racing line is given by the d-coordinate: [0.1, 0.05, 0.0, -0.05, -0.1, -0.05, 0.0, 0.05, 0.1, 0.05, 0.0, -0.05, -0.1]\n\n        \n        - The car's speed along the racing line is given by the s-speed: [6.5, 6.6, 6.5, 6.4, 6.5, 6.6, 6.5, 6.4, 6.5, 6.6, 6.5, 6.4, 6.5]\n\n        \n        - The car's speed perpendicular to the racing line is given by the d-speed: [0.0, 0.05, 0.1, 0.05, 0.0, -0.05, -0.1, -0.05, 0.0, 0.05, 0.1, 0.05, 0.0]\n\n        \n        - The distance to the left wall is: [1.2, 1.3, 1.2, 1.3, 1.2, 1.3, 1.2, 1.3, 1.2, 1.3, 1.2, 1.3, 1.2]\n\n\n        - The distance to the right wall is: [0.8, 0.7, 0.8, 0.7, 0.8, 0.7, 0.8, 0.7, 0.8, 0.7, 0.8, 0.7, 0.8]\n\n \n        - Bool if the car is reversing: False\n\n          \n        - Bool if the car has crashed: False\n\n        \n        - Bool if the car is facing the wall: False\n\n\n   \n        Use these guides to reason: \n\n\n\n    \n        Check if the car is adhering to what the human wants: Don't move. Strictly reply in the following format: \n\n        Explanation: <Brief Explanation> \n\n        Adhering to Human: <True/False> \n\n        ",
    "robot_state": {
      "time": 2,
      "data_samples": 13,
      "s_pos": [
        0,
        0.5,
        1.0,
        1.5,
        2.0,
        2.5,
        3.0,
        3.5,
        4.0,
        4.5,
        5.0,
        5.5,
        6.0
      ],
      "d_pos": [
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1,
        -0.05,
        0.0,
        0.05,
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1
      ],
      "s_speed": [
        6.5,
        6.6,
        6.5,
        6.4,
        6.5,
        6.6,
        6.5,
        6.4,
        6.5,
        6.6,
        6.5,
        6.4,
        6.5
      ],
      "d_speed": [
        0.0,
        0.05,
        0.1,
        0.05,
        0.0,
        -0.05,
        -0.1,
        -0.05,
        0.0,
        0.05,
        0.1,
        0.05,
        0.0
      ],
      "d_left": [
        1.2,
        1.3,
        1.2,
        1.3,
        1.2,
        1.3,
        1.2,
        1.3,
        1.2,
        1.3,
        1.2,
        1.3,
        1.2
      ],
      "d_right": [
        0.8,
        0.7,
        0.8,
        0.7,
        0.8,
        0.7,
        0.8,
        0.7,
        0.8,
        0.7,
        0.8,
        0.7,
        0.8
      ],
      "reversing": false,
      "crashed": false,
      "facing_wall": false
    },
    "evaluation_function": "_stop_car_check"
  }
]